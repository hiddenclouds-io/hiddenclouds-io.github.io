{"version":3,"sources":["../src/Extension.js"],"names":["asn1js","Extension","constructor","parameters","extnID","defaultValues","critical","extnValue","OctetString","valueHex","parsedValue","fromSchema","schema","memberName","Error","names","Sequence","name","blockName","value","ObjectIdentifier","Boolean","optional","asn1","compareSchema","verified","result","valueBlock","toString","fromBER","offset","ex","parsingError","toSchema","outputArray","push","toJSON","object"],"mappings":"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","file":"Extension.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport SubjectDirectoryAttributes from \"./SubjectDirectoryAttributes.js\";\r\nimport PrivateKeyUsagePeriod from \"./PrivateKeyUsagePeriod.js\";\r\nimport AltName from \"./AltName.js\";\r\nimport BasicConstraints from \"./BasicConstraints.js\";\r\nimport IssuingDistributionPoint from \"./IssuingDistributionPoint.js\";\r\nimport GeneralNames from \"./GeneralNames.js\";\r\nimport NameConstraints from \"./NameConstraints.js\";\r\nimport CRLDistributionPoints from \"./CRLDistributionPoints.js\";\r\nimport CertificatePolicies from \"./CertificatePolicies.js\";\r\nimport PolicyMappings from \"./PolicyMappings.js\";\r\nimport AuthorityKeyIdentifier from \"./AuthorityKeyIdentifier.js\";\r\nimport PolicyConstraints from \"./PolicyConstraints.js\";\r\nimport ExtKeyUsage from \"./ExtKeyUsage.js\";\r\nimport InfoAccess from \"./InfoAccess.js\";\r\nimport SignedCertificateTimestampList from \"./SignedCertificateTimestampList.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class Extension\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Extension class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc extnID\r\n\t\t */\r\n\t\tthis.extnID = getParametersValue(parameters, \"extnID\", Extension.defaultValues(\"extnID\"));\r\n\t\t/**\r\n\t\t * @type {boolean}\r\n\t\t * @desc critical\r\n\t\t */\r\n\t\tthis.critical = getParametersValue(parameters, \"critical\", Extension.defaultValues(\"critical\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc extnValue\r\n\t\t */\r\n\t\tif(\"extnValue\" in parameters)\r\n\t\t\tthis.extnValue = new asn1js.OctetString({ valueHex: parameters.extnValue });\r\n\t\telse\r\n\t\t\tthis.extnValue = Extension.defaultValues(\"extnValue\");\r\n\r\n\t\tif(\"parsedValue\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Object}\r\n\t\t\t * @desc parsedValue\r\n\t\t\t */\r\n\t\t\tthis.parsedValue = getParametersValue(parameters, \"parsedValue\", Extension.defaultValues(\"parsedValue\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"extnID\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"critical\":\r\n\t\t\t\treturn false;\r\n\t\t\tcase \"extnValue\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Extension class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * Extension  ::=  SEQUENCE  {\r\n\t *    extnID      OBJECT IDENTIFIER,\r\n\t *    critical    BOOLEAN DEFAULT FALSE,\r\n\t *    extnValue   OCTET STRING\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [extnID]\r\n\t\t * @property {string} [critical]\r\n\t\t * @property {string} [extnValue]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.extnID || \"\") }),\r\n\t\t\t\tnew asn1js.Boolean({\r\n\t\t\t\t\tname: (names.critical || \"\"),\r\n\t\t\t\t\toptional: true\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.extnValue || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"extnID\",\r\n\t\t\t\"critical\",\r\n\t\t\t\"extnValue\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tlet asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tExtension.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\textnID: \"extnID\",\r\n\t\t\t\t\tcritical: \"critical\",\r\n\t\t\t\t\textnValue: \"extnValue\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for Extension\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.extnID = asn1.result.extnID.valueBlock.toString();\r\n\t\tif(\"critical\" in asn1.result)\r\n\t\t\tthis.critical = asn1.result.critical.valueBlock.value;\r\n\t\tthis.extnValue = asn1.result.extnValue;\r\n\r\n\t\t//region Get \"parsedValue\" for well-known extensions\r\n\t\tasn1 = asn1js.fromBER(this.extnValue.valueBlock.valueHex);\r\n\t\tif(asn1.offset === (-1))\r\n\t\t\treturn;\r\n\r\n\t\tswitch(this.extnID)\r\n\t\t{\r\n\t\t\tcase \"2.5.29.9\": // SubjectDirectoryAttributes\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.parsedValue = new SubjectDirectoryAttributes({ schema: asn1.result });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.parsedValue = new SubjectDirectoryAttributes();\r\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated SubjectDirectoryAttributes\";\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"2.5.29.14\": // SubjectKeyIdentifier\r\n\t\t\t\tthis.parsedValue = asn1.result; // Should be just a simple OCTETSTRING\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"2.5.29.15\": // KeyUsage\r\n\t\t\t\tthis.parsedValue = asn1.result; // Should be just a simple BITSTRING\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"2.5.29.16\": // PrivateKeyUsagePeriod\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.parsedValue = new PrivateKeyUsagePeriod({ schema: asn1.result });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.parsedValue = new PrivateKeyUsagePeriod();\r\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated PrivateKeyUsagePeriod\";\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"2.5.29.17\": // SubjectAltName\r\n\t\t\tcase \"2.5.29.18\": // IssuerAltName\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.parsedValue = new AltName({ schema: asn1.result });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.parsedValue = new AltName();\r\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated AltName\";\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"2.5.29.19\": // BasicConstraints\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.parsedValue = new BasicConstraints({ schema: asn1.result });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.parsedValue = new BasicConstraints();\r\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated BasicConstraints\";\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"2.5.29.20\": // CRLNumber\r\n\t\t\tcase \"2.5.29.27\": // BaseCRLNumber (delta CRL indicator)\r\n\t\t\t\tthis.parsedValue = asn1.result; // Should be just a simple INTEGER\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"2.5.29.21\": // CRLReason\r\n\t\t\t\tthis.parsedValue = asn1.result; // Should be just a simple ENUMERATED\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"2.5.29.24\": // InvalidityDate\r\n\t\t\t\tthis.parsedValue = asn1.result; // Should be just a simple GeneralizedTime\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"2.5.29.28\": // IssuingDistributionPoint\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.parsedValue = new IssuingDistributionPoint({ schema: asn1.result });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.parsedValue = new IssuingDistributionPoint();\r\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated IssuingDistributionPoint\";\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"2.5.29.29\": // CertificateIssuer\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.parsedValue = new GeneralNames({ schema: asn1.result }); // Should be just a simple\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.parsedValue = new GeneralNames();\r\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated GeneralNames\";\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"2.5.29.30\": // NameConstraints\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.parsedValue = new NameConstraints({ schema: asn1.result });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.parsedValue = new NameConstraints();\r\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated NameConstraints\";\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"2.5.29.31\": // CRLDistributionPoints\r\n\t\t\tcase \"2.5.29.46\": // FreshestCRL\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.parsedValue = new CRLDistributionPoints({ schema: asn1.result });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.parsedValue = new CRLDistributionPoints();\r\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated CRLDistributionPoints\";\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"2.5.29.32\": // CertificatePolicies\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.parsedValue = new CertificatePolicies({ schema: asn1.result });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.parsedValue = new CertificatePolicies();\r\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated CertificatePolicies\";\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"2.5.29.33\": // PolicyMappings\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.parsedValue = new PolicyMappings({ schema: asn1.result });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.parsedValue = new PolicyMappings();\r\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated CertificatePolicies\";\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"2.5.29.35\": // AuthorityKeyIdentifier\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.parsedValue = new AuthorityKeyIdentifier({ schema: asn1.result });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.parsedValue = new AuthorityKeyIdentifier();\r\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated AuthorityKeyIdentifier\";\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"2.5.29.36\": // PolicyConstraints\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.parsedValue = new PolicyConstraints({ schema: asn1.result });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.parsedValue = new PolicyConstraints();\r\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated PolicyConstraints\";\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"2.5.29.37\": // ExtKeyUsage\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.parsedValue = new ExtKeyUsage({ schema: asn1.result });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.parsedValue = new ExtKeyUsage();\r\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated ExtKeyUsage\";\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"2.5.29.54\": // InhibitAnyPolicy\r\n\t\t\t\tthis.parsedValue = asn1.result; // Should be just a simple INTEGER\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.3.6.1.5.5.7.1.1\": // AuthorityInfoAccess\r\n\t\t\tcase \"1.3.6.1.5.5.7.1.11\": // SubjectInfoAccess\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.parsedValue = new InfoAccess({ schema: asn1.result });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.parsedValue = new InfoAccess();\r\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated InfoAccess\";\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.3.6.1.4.1.11129.2.4.2\": // SignedCertificateTimestampList\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.parsedValue = new SignedCertificateTimestampList({ schema: asn1.result });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.parsedValue = new SignedCertificateTimestampList();\r\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated SignedCertificateTimestampList\";\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.extnID }));\r\n\r\n\t\tif(this.critical !== Extension.defaultValues(\"critical\"))\r\n\t\t\toutputArray.push(new asn1js.Boolean({ value: this.critical }));\r\n\r\n\t\toutputArray.push(this.extnValue);\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\textnID: this.extnID,\r\n\t\t\textnValue: this.extnValue.toJSON()\r\n\t\t};\r\n\r\n\t\tif(this.critical !== Extension.defaultValues(\"critical\"))\r\n\t\t\tobject.critical = this.critical;\r\n\r\n\t\tif(\"parsedValue\" in this)\r\n\t\t{\r\n\t\t\tif(\"toJSON\" in this.parsedValue)\r\n\t\t\t\tobject.parsedValue = this.parsedValue.toJSON();\r\n\t\t}\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}