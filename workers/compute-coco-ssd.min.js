/*! For license information please see compute-coco-ssd.min.js.LICENSE.txt */
(()=>{var e={112:(e,t,n)=>{"use strict";n.d(t,{V:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({relu_:function(e){const t={x:(0,a.YT)(e,"x","relu")};return s.T2.runKernel(r.fUj,t)}})},125:(e,t,n)=>{"use strict";n.d(t,{o:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({clone_:function(e){const t={x:(0,a.YT)(e,"x","clone","string_or_numeric")};return s.T2.runKernel(r.lzr,t)}})},152:(e,t,n)=>{"use strict";n.d(t,{z:()=>o});var s=n(1585),r=n(5441),a=n(565),i=n(8189);const o=(0,n(929).op)({mod_:function(e,t){let n=(0,i.YT)(e,"a","mod"),o=(0,i.YT)(t,"b","mod");[n,o]=(0,a.makeTypesMatch)(n,o);const l={a:n,b:o};return s.T2.runKernel(r.BLA,l)}})},178:(e,t,n)=>{"use strict";n.d(t,{P:()=>u});var s=n(1585),r=n(5441),a=n(565),i=n(8189),o=n(2198),l=n(9809);const u=(0,n(929).op)({maximum_:function(e,t){let n=(0,i.YT)(e,"a","maximum"),u=(0,i.YT)(t,"b","maximum");[n,u]=(0,a.makeTypesMatch)(n,u),"bool"===n.dtype&&(n=(0,l.w)(n,"int32"),u=(0,l.w)(u,"int32")),(0,o.assertAndGetBroadcastShape)(n.shape,u.shape);const c={a:n,b:u};return s.T2.runKernel(r.LDN,c)}})},234:function(e,t,n){!function(e,t,n){"use strict";const s={1:{name:"/m/01g317",id:1,displayName:"person"},2:{name:"/m/0199g",id:2,displayName:"bicycle"},3:{name:"/m/0k4j",id:3,displayName:"car"},4:{name:"/m/04_sv",id:4,displayName:"motorcycle"},5:{name:"/m/05czz6l",id:5,displayName:"airplane"},6:{name:"/m/01bjv",id:6,displayName:"bus"},7:{name:"/m/07jdr",id:7,displayName:"train"},8:{name:"/m/07r04",id:8,displayName:"truck"},9:{name:"/m/019jd",id:9,displayName:"boat"},10:{name:"/m/015qff",id:10,displayName:"traffic light"},11:{name:"/m/01pns0",id:11,displayName:"fire hydrant"},13:{name:"/m/02pv19",id:13,displayName:"stop sign"},14:{name:"/m/015qbp",id:14,displayName:"parking meter"},15:{name:"/m/0cvnqh",id:15,displayName:"bench"},16:{name:"/m/015p6",id:16,displayName:"bird"},17:{name:"/m/01yrx",id:17,displayName:"cat"},18:{name:"/m/0bt9lr",id:18,displayName:"dog"},19:{name:"/m/03k3r",id:19,displayName:"horse"},20:{name:"/m/07bgp",id:20,displayName:"sheep"},21:{name:"/m/01xq0k1",id:21,displayName:"cow"},22:{name:"/m/0bwd_0j",id:22,displayName:"elephant"},23:{name:"/m/01dws",id:23,displayName:"bear"},24:{name:"/m/0898b",id:24,displayName:"zebra"},25:{name:"/m/03bk1",id:25,displayName:"giraffe"},27:{name:"/m/01940j",id:27,displayName:"backpack"},28:{name:"/m/0hnnb",id:28,displayName:"umbrella"},31:{name:"/m/080hkjn",id:31,displayName:"handbag"},32:{name:"/m/01rkbr",id:32,displayName:"tie"},33:{name:"/m/01s55n",id:33,displayName:"suitcase"},34:{name:"/m/02wmf",id:34,displayName:"frisbee"},35:{name:"/m/071p9",id:35,displayName:"skis"},36:{name:"/m/06__v",id:36,displayName:"snowboard"},37:{name:"/m/018xm",id:37,displayName:"sports ball"},38:{name:"/m/02zt3",id:38,displayName:"kite"},39:{name:"/m/03g8mr",id:39,displayName:"baseball bat"},40:{name:"/m/03grzl",id:40,displayName:"baseball glove"},41:{name:"/m/06_fw",id:41,displayName:"skateboard"},42:{name:"/m/019w40",id:42,displayName:"surfboard"},43:{name:"/m/0dv9c",id:43,displayName:"tennis racket"},44:{name:"/m/04dr76w",id:44,displayName:"bottle"},46:{name:"/m/09tvcd",id:46,displayName:"wine glass"},47:{name:"/m/08gqpm",id:47,displayName:"cup"},48:{name:"/m/0dt3t",id:48,displayName:"fork"},49:{name:"/m/04ctx",id:49,displayName:"knife"},50:{name:"/m/0cmx8",id:50,displayName:"spoon"},51:{name:"/m/04kkgm",id:51,displayName:"bowl"},52:{name:"/m/09qck",id:52,displayName:"banana"},53:{name:"/m/014j1m",id:53,displayName:"apple"},54:{name:"/m/0l515",id:54,displayName:"sandwich"},55:{name:"/m/0cyhj_",id:55,displayName:"orange"},56:{name:"/m/0hkxq",id:56,displayName:"broccoli"},57:{name:"/m/0fj52s",id:57,displayName:"carrot"},58:{name:"/m/01b9xk",id:58,displayName:"hot dog"},59:{name:"/m/0663v",id:59,displayName:"pizza"},60:{name:"/m/0jy4k",id:60,displayName:"donut"},61:{name:"/m/0fszt",id:61,displayName:"cake"},62:{name:"/m/01mzpv",id:62,displayName:"chair"},63:{name:"/m/02crq1",id:63,displayName:"couch"},64:{name:"/m/03fp41",id:64,displayName:"potted plant"},65:{name:"/m/03ssj5",id:65,displayName:"bed"},67:{name:"/m/04bcr3",id:67,displayName:"dining table"},70:{name:"/m/09g1w",id:70,displayName:"toilet"},72:{name:"/m/07c52",id:72,displayName:"tv"},73:{name:"/m/01c648",id:73,displayName:"laptop"},74:{name:"/m/020lf",id:74,displayName:"mouse"},75:{name:"/m/0qjjc",id:75,displayName:"remote"},76:{name:"/m/01m2v",id:76,displayName:"keyboard"},77:{name:"/m/050k8",id:77,displayName:"cell phone"},78:{name:"/m/0fx9l",id:78,displayName:"microwave"},79:{name:"/m/029bxz",id:79,displayName:"oven"},80:{name:"/m/01k6s3",id:80,displayName:"toaster"},81:{name:"/m/0130jx",id:81,displayName:"sink"},82:{name:"/m/040b_t",id:82,displayName:"refrigerator"},84:{name:"/m/0bt_c3",id:84,displayName:"book"},85:{name:"/m/01x3z",id:85,displayName:"clock"},86:{name:"/m/02s195",id:86,displayName:"vase"},87:{name:"/m/01lsmm",id:87,displayName:"scissors"},88:{name:"/m/0kmg4",id:88,displayName:"teddy bear"},89:{name:"/m/03wvsk",id:89,displayName:"hair drier"},90:{name:"/m/012xff",id:90,displayName:"toothbrush"}};class r{constructor(e,t){this.modelPath=t||`https://storage.googleapis.com/tfjs-models/savedmodel/${this.getPrefix(e)}/model.json`}getPrefix(e){return"lite_mobilenet_v2"===e?`ssd${e}`:`ssd_${e}`}async load(){this.model=await t.loadGraphModel(this.modelPath);const e=n.zeros([1,300,300,3],"int32"),s=await this.model.executeAsync(e);await Promise.all(s.map(e=>e.data())),s.map(e=>e.dispose()),e.dispose()}async infer(e,t,s){const r=n.tidy(()=>(e instanceof n.Tensor||(e=n.browser.fromPixels(e)),n.expandDims(e))),a=r.shape[1],i=r.shape[2],o=await this.model.executeAsync(r),l=o[0].dataSync(),u=o[1].dataSync();r.dispose(),n.dispose(o);const[c,d]=this.calculateMaxScores(l,o[0].shape[1],o[0].shape[2]),h=n.getBackend();"webgl"===n.getBackend()&&n.setBackend("cpu");const p=n.tidy(()=>{const e=n.tensor2d(u,[o[1].shape[1],o[1].shape[3]]);return n.image.nonMaxSuppression(e,c,t,s,s)}),f=p.dataSync();return p.dispose(),h!==n.getBackend()&&n.setBackend(h),this.buildDetectedObjects(i,a,u,c,f,d)}buildDetectedObjects(e,t,n,r,a,i){const o=a.length,l=[];for(let u=0;u<o;u++){const o=[];for(let e=0;e<4;e++)o[e]=n[4*a[u]+e];const c=o[0]*t,d=o[1]*e,h=o[2]*t,p=o[3]*e;o[0]=d,o[1]=c,o[2]=p-d,o[3]=h-c,l.push({bbox:o,class:s[i[a[u]]+1].displayName,score:r[a[u]]})}return l}calculateMaxScores(e,t,n){const s=[],r=[];for(let a=0;a<t;a++){let t=Number.MIN_VALUE,i=-1;for(let s=0;s<n;s++)e[a*n+s]>t&&(t=e[a*n+s],i=s);s[a]=t,r[a]=i}return[s,r]}async detect(e,t=20,n=.5){return this.infer(e,t,n)}dispose(){null!=this.model&&this.model.dispose()}}e.ObjectDetection=r,e.load=async function(e={}){if(null==n)throw new Error("Cannot find TensorFlow.js. If you are using a <script> tag, please also include @tensorflow/tfjs on the page before using this model.");const t=e.base||"lite_mobilenet_v2",s=e.modelUrl;if(-1===["mobilenet_v1","mobilenet_v2","lite_mobilenet_v2"].indexOf(t))throw new Error(`ObjectDetection constructed with invalid base model ${t}. Valid names are 'mobilenet_v1', 'mobilenet_v2' and 'lite_mobilenet_v2'.`);const a=new r(t,s);return await a.load(),a},e.version="2.2.3",Object.defineProperty(e,"__esModule",{value:!0})}(t,n(5062),n(5838))},252:(e,t,n)=>{"use strict";n.d(t,{v:()=>u});var s=n(1585),r=n(5441),a=n(5119),i=n(7195),o=n(929),l=n(2302);const u=(0,o.op)({conv2DBackpropInput_:function(e,t,n,o,u,c="NHWC",d){a.vA(e.length===t.rank,()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`);let h=e,p=t,f=!1;3===t.rank&&(f=!0,p=(0,l.t)(t,[1,t.shape[0],t.shape[1],t.shape[2]]),h=[1,e[0],e[1],e[2]]),a.vA(4===h.length,()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${h.length}.`),a.vA(4===p.rank,()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${p.rank}`),a.vA(4===n.rank,()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`);const m="NHWC"===c?h[3]:h[1],g="NHWC"===c?p.shape[3]:p.shape[1];a.vA(m===n.shape[2],()=>`Error in conv2dDerInput: depth of input (${m}) must match input depth for filter ${n.shape[2]}.`),a.vA(g===n.shape[3],()=>`Error in conv2dDerInput: depth of output (${g}) must match output depth for filter ${n.shape[3]}.`),i.s_("conv2dDerInput",u,d);const y={dy:p,filter:n},b={strides:o,pad:u,dataFormat:c,dimRoundingMode:d,inputShape:h},x=s.T2.runKernel(r.jfg,y,b);return f?(0,l.t)(x,[x.shape[1],x.shape[2],x.shape[3]]):x}})},259:(e,t,n)=>{"use strict";n.d(t,{qY:()=>b,yl:()=>d,rT:()=>v,tp:()=>x,B4:()=>y,Q5:()=>g,qP:()=>m});var s=n(1743),r=n(5119);function a(e,t,n,s){const a=(0,r.Ur)(t),o=function(e,t,n,s){const a=(0,r.Ze)(t),o=s[s.length-1],l=new Array(o).fill(0),c=t.length,d="complex64"===n?u(e):e;if(c>1)for(let e=0;e<a/o;e++){const t=e*o;for(let e=0;e<o;e++)l[e]=Math.max(l[e],i(d[t+e],0,n).length)}return l}(e,t,n,a),c=t.length,d=l(e,t,n,a,o),h=["Tensor"];return s&&(h.push(`  dtype: ${n}`),h.push(`  rank: ${c}`),h.push(`  shape: [${t}]`),h.push("  values:")),h.push(d.map(e=>"    "+e).join("\n")),h.join("\n")}function i(e,t,n){let s;return s=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:(0,r.Kg)(e)?`'${e}'`:"bool"===n?o(e):parseFloat(e.toFixed(7)).toString(),(0,r.av)(s,t)}function o(e){return 0===e?"false":"true"}function l(e,t,n,s,r,a=!0){const c="complex64"===n?2:1,d=t[0],h=t.length;if(0===h)return"complex64"===n?[i(u(e)[0],0,n)]:"bool"===n?[o(e[0])]:[e[0].toString()];if(1===h){if(d>20){const t=3*c;let s=Array.from(e.slice(0,t)),a=Array.from(e.slice((d-3)*c,d*c));return"complex64"===n&&(s=u(s),a=u(a)),["["+s.map((e,t)=>i(e,r[t],n)).join(", ")+", ..., "+a.map((e,t)=>i(e,r[d-3+t],n)).join(", ")+"]"]}return["["+("complex64"===n?u(e):Array.from(e)).map((e,t)=>i(e,r[t],n)).join(", ")+"]"]}const p=t.slice(1),f=s.slice(1),m=s[0]*c,g=[];if(d>20){for(let t=0;t<3;t++){const s=t*m,a=s+m;g.push(...l(e.slice(s,a),p,n,f,r,!1))}g.push("...");for(let t=d-3;t<d;t++){const s=t*m,a=s+m;g.push(...l(e.slice(s,a),p,n,f,r,t===d-1))}}else for(let t=0;t<d;t++){const s=t*m,a=s+m;g.push(...l(e.slice(s,a),p,n,f,r,t===d-1))}const y=2===h?",":"";g[0]="["+(d>0?g[0]+y:"");for(let e=1;e<g.length-1;e++)g[e]=" "+g[e]+y;let b=",\n";for(let e=2;e<h;e++)b+="\n";return g[g.length-1]=" "+g[g.length-1]+"]"+(a?"":b),g}function u(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}var c=n(3879);class d{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=r.Ze(e),null!=n){const e=n.length;r.vA(e===this.size,()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`)}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||r.Ab(t,this.size),this.strides=(0,r.Ur)(e)}set(e,...t){0===t.length&&(t=[0]),r.vA(t.length===this.rank,()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`);const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return h().makeTensor(this.values,this.shape,this.dtype)}}let h=null,p=null,f=null;function m(e){h=e}function g(e){p=e}function y(e){f=e}class b{constructor(e,t,n,s){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=r.Ze(e),this.strides=(0,r.Ur)(e),this.dataId=n,this.id=s,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return p.buffer(this.shape,this.dtype,e)}bufferSync(){return p.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return(0,r.yw)(this.shape,e,"complex64"===this.dtype)}arraySync(){return(0,r.yw)(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=h().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map(e=>c.decodeString(e))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),h().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const e=h().readSync(this.dataId);if("string"===this.dtype)try{return e.map(e=>c.decodeString(e))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await h().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(this.kerasMask&&this.kerasMask.dispose(),h().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return p.print(this,e)}clone(){return this.throwIfDisposed(),p.clone(this)}toString(e=!1){return a(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),p.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),h().makeVariable(this,e,t,n)}}function x(){return(0,s.m)("Tensor",()=>b)}Object.defineProperty(b,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),x();class v extends b{constructor(e,t,n,s){super(e.shape,e.dtype,e.dataId,s),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!r.r1(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);h().disposeTensor(this),this.dataId=e.dataId,h().incRef(this,null)}dispose(){h().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(v,Symbol.hasInstance,{value:e=>e instanceof b&&null!=e.assign&&e.assign instanceof Function})},269:(e,t,n)=>{"use strict";n.d(t,{y:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({asinh_:function(e){const t={x:(0,a.YT)(e,"x","asinh")};return s.T2.runKernel(r.epO,t)}})},302:(e,t,n)=>{"use strict";n.d(t,{L:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({cumprod_:function(e,t=0,n=!1,i=!1){const o={x:(0,a.YT)(e,"x","cumprod")},l={axis:t,exclusive:n,reverse:i};return s.T2.runKernel(r.jj_,o,l)}})},448:(e,t,n)=>{"use strict";n.d(t,{r:()=>a});var s=n(259),r=n(5119);function a(e,t="float32",n){return t=t||"float32",r.SA(e),new s.yl(e,t,n)}},517:(e,t,n)=>{"use strict";n.d(t,{I:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({expm1_:function(e){const t={x:(0,a.YT)(e,"x","expm1")};return s.T2.runKernel(r.ybj,t)}})},551:()=>{},565:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assertTypesMatch:()=>o,getTensorsInContainer:()=>u,isTensorInList:()=>l,makeTypesMatch:()=>i});var s=n(259),r=n(2046),a=n(5119);function i(e,t){if(e.dtype===t.dtype)return[e,t];const n=(0,r.Tu)(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function o(e,t){(0,a.vA)(e.dtype===t.dtype,()=>`The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`)}function l(e,t){return t.some(t=>t.id===e.id)}function u(e){const t=[];return c(e,t,new Set),t}function c(e,t,n){if(null==e)return;if(e instanceof s.qY)return void t.push(e);if(r=e,!Array.isArray(r)&&"object"!=typeof r)return;var r;const a=e;for(const e in a){const s=a[e];n.has(s)||(n.add(s),c(s,t,n))}}},676:(e,t,n)=>{"use strict";n.d(t,{G:()=>c});var s=n(1585),r=n(5441),a=n(8189),i=n(5119),o=n(7195),l=n(929),u=n(2302);const c=(0,l.op)({depthwiseConv2d_:function(e,t,n,l,c="NHWC",d=[1,1],h){const p=(0,a.YT)(e,"x","depthwiseConv2d","float32"),f=(0,a.YT)(t,"filter","depthwiseConv2d","float32");let m=p,g=!1;3===p.rank&&(g=!0,m=(0,u.t)(p,[1,p.shape[0],p.shape[1],p.shape[2]])),i.vA(4===m.rank,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${m.rank}.`),i.vA(4===f.rank,()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${f.rank}.`);const y="NHWC"===c?m.shape[3]:m.shape[1];i.vA(y===f.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${y}) must match the inChannels dimension in filter ${f.shape[2]}.`),o.s_("depthwiseConv2d",l,h);const b={x:m,filter:f},x={strides:n,pad:l,dataFormat:c,dilations:d,dimRoundingMode:h},v=s.T2.runKernel(r.tGH,b,x);return g?(0,u.t)(v,[v.shape[1],v.shape[2],v.shape[3]]):v}})},700:(e,t,n)=>{"use strict";n.d(t,{P:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({step_:function(e,t=0){const n={x:(0,a.YT)(e,"x","step")},i={alpha:t};return s.T2.runKernel(r.pnw,n,i)}})},776:(e,t,n)=>{"use strict";n.d(t,{e:()=>o});var s=n(1585),r=n(5441),a=n(8189),i=n(5119);const o=(0,n(929).op)({spaceToBatchND_:function(e,t,n){const o=(0,a.YT)(e,"x","spaceToBatchND");i.vA(o.rank>=1+t.length,()=>`input rank ${o.rank} should be > than [blockShape] ${t.length}`),i.vA(n.length===t.length,()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`),i.vA(o.shape.reduce((e,s,r)=>r>0&&r<=t.length?e&&(s+n[r-1][0]+n[r-1][1])%t[r-1]===0:e,!0),()=>`input spatial dimensions ${o.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`);const l={x:o},u={blockShape:t,paddings:n};return s.T2.runKernel(r.A8B,l,u)}})},855:(e,t,n)=>{"use strict";n.d(t,{m:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({ceil_:function(e){const t={x:(0,a.YT)(e,"x","ceil","float32")};return s.T2.runKernel(r.QDP,t)}})},897:(e,t,n)=>{"use strict";n.d(t,{F:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({argMax_:function(e,t=0){const n={x:(0,a.YT)(e,"x","argMax")},i={axis:t};return s.T2.runKernel(r.Jp_,n,i)}})},919:(e,t,n)=>{"use strict";n.d(t,{e:()=>c});var s=n(565),r=n(8189),a=n(9359),i=n(3020),o=n(929),l=n(2151),u=n(5537);const c=(0,o.op)({divNoNan_:function(e,t){let n=(0,r.YT)(e,"a","div"),o=(0,r.YT)(t,"b","div");[n,o]=(0,s.makeTypesMatch)(n,o);const c=(0,a.y)(n,o),d=(0,u.P)(c),h=(0,i.L)(o,d);return(0,l._)(h,d,c)}})},929:(e,t,n)=>{"use strict";n.d(t,{B:()=>a,op:()=>i});var s=n(1585),r=n(5119);const a="__op";function i(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const i=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=a;const o=(...e)=>{s.T2.startScope(n);try{const t=i(...e);return(0,r.yL)(t)&&console.error("Cannot return a Promise inside of tidy."),s.T2.endScope(t),t}catch(e){throw s.T2.endScope(null),e}};return Object.defineProperty(o,"name",{value:n,configurable:!0}),o}},1078:(e,t,n)=>{"use strict";n.d(t,{Em:()=>u,SM:()=>o,WC:()=>l,WH:()=>r,aF:()=>a,fK:()=>d,gx:()=>c,lb:()=>i});var s=n(5119);function r(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function a(e,t,n){const s=e.length+t.length,r=[];let a=0,i=0;for(let o=0;o<s;o++)-1===n.indexOf(o)?r.push(e[a++]):r.push(t[i++]);return r}function i(e,t){const n=[],s=e.length;for(let r=0;r<s;r++)-1===t.indexOf(r)&&n.push(e[r]);return[n,t.map(t=>e[t])]}function o(e,t){return a(e,t.map(e=>1),t)}function l(e,t,n){s.vA(r(t,n),()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`)}function u(e,t){if(r(e,t))return null;const n=[];for(let s=0;s<t;++s)-1===e.indexOf(s)&&n.push(s);return e.forEach(e=>n.push(e)),n}function c(e){return e.map((e,t)=>[t,e]).sort((e,t)=>e[1]-t[1]).map(e=>e[0])}function d(e,t){const n=[];for(let s=t-e;s<t;++s)n.push(s);return n}},1106:(e,t,n)=>{"use strict";n.d(t,{w:()=>a});var s=n(8189),r=n(252);const a=(0,n(929).op)({conv2dTranspose_:function(e,t,n,a,i,o){const l=(0,s.YT)(e,"x","conv2dTranspose"),u=(0,s.YT)(t,"filter","conv2dTranspose");return(0,r.v)(n,l,u,a,i,"NHWC",o)}})},1115:(e,t,n)=>{"use strict";n.d(t,{_:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({sign_:function(e){const t={x:(0,a.YT)(e,"x","sign")};return s.T2.runKernel(r.YVe,t)}})},1190:(e,t,n)=>{"use strict";n.d(t,{r:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({topk_:function(e,t=1,n=!0){const i=(0,a.YT)(e,"x","topk");if(0===i.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const o=i.shape[i.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>o)throw new Error(`'k' passed to topk() must be <= the last dimension (${o}) but got ${t}`);const l={x:i},u={k:t,sorted:n},[c,d]=s.T2.runKernel(r.TBb,l,u);return{values:c,indices:d}}})},1216:(e,t,n)=>{"use strict";n.d(t,{R:()=>o});var s=n(1585),r=n(5441),a=n(8189),i=n(5119);const o=(0,n(929).op)({depthToSpace_:function(e,t,n="NHWC"){const o=(0,a.YT)(e,"x","depthToSpace","float32"),l="NHWC"===n?o.shape[1]:o.shape[2],u="NHWC"===n?o.shape[2]:o.shape[3],c="NHWC"===n?o.shape[3]:o.shape[1];i.vA(t>1,()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`),i.vA(l*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${l} and ${t}  for depthToSpace with input shape\n    ${o.shape}`),i.vA(u*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${u} and ${t} for depthToSpace with input shape\n        ${o.shape}`),i.vA(c%(t*t)===0,()=>`Dimension size must be evenly divisible by ${t*t} but is ${c} for depthToSpace with input shape ${o.shape}`);const d={x:o},h={blockSize:t,dataFormat:n};return s.T2.runKernel(r.TMz,d,h)}})},1234:()=>{},1303:(e,t,n)=>{"use strict";n.d(t,{M:()=>l});var s=n(1585),r=n(5441),a=n(565),i=n(8189),o=n(2198);const l=(0,n(929).op)({less_:function(e,t){let n=(0,i.YT)(e,"a","less","string_or_numeric"),l=(0,i.YT)(t,"b","less","string_or_numeric");[n,l]=(0,a.makeTypesMatch)(n,l),(0,o.assertAndGetBroadcastShape)(n.shape,l.shape);const u={a:n,b:l};return s.T2.runKernel(r.mIA,u)}})},1361:(e,t,n)=>{"use strict";n.d(t,{h:()=>i});var s=n(1585),r=n(5441),a=n(5119);const i=(0,n(929).op)({fft_:function(e){(0,a.vA)("complex64"===e.dtype,()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`);const t={input:e};return s.T2.runKernel(r.rGP,t)}})},1404:(e,t,n)=>{"use strict";n.d(t,{F:()=>o});var s=n(1585),r=n(5441),a=n(565),i=n(8189);const o=(0,n(929).op)({atan2_:function(e,t){let n=(0,i.YT)(e,"a","atan2"),o=(0,i.YT)(t,"b","atan2");[n,o]=(0,a.makeTypesMatch)(n,o);const l={a:n,b:o};return s.T2.runKernel(r.lxb,l)}})},1411:(e,t,n)=>{"use strict";n.d(t,{S:()=>o});var s=n(1585),r=n(5119),a=n(7148),i=n(2855);function o(e,t="float32"){if((0,r.SA)(e),"complex64"===t){const t=o(e,"float32"),n=(0,i.U)(e,"float32");return(0,a.f)(t,n)}const n=(0,r.FZ)((0,r.Ze)(e),t);return s.T2.makeTensor(n,e,t)}},1585:(e,t,n)=>{"use strict";n.d(t,{T2:()=>v,Ye:()=>x});var s=n(5149),r=n(6574),a=n(1743),i=n(5441),o=n(7074),l=n(3673),u=n(3879),c=n(5119);class d{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new p)}profileKernel(e,t,n){let s;const a=()=>{s=n()};let i;const o=u.now();if(this.backendTimer.timerAvailable())i=this.backendTimer.time(a);else{a();for(const e of s)e.dataSync();i=Promise.resolve({kernelMs:u.now()-o})}if((0,r._K)().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<s.length;t++){const n=s[t];n.data().then(t=>{h(t,n.dtype,e)})}return{kernelName:e,outputs:s,inputs:t,timeMs:i.then(e=>e.kernelMs),extraInfo:i.then(e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():"")}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:s,inputs:r,extraInfo:a}=e;n.forEach(e=>{Promise.all([e.data(),s,a]).then(n=>{this.logger.logKernelProfile(t,e,n[0],n[1],r,n[2])})})}}function h(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const s=e[t];if(isNaN(s)||!isFinite(s))return console.warn(`Found ${s} in the result of '${n}'`),!0}return!1}class p{logKernelProfile(e,t,n,s,r,a){const i="number"==typeof s?c.av(`${s}ms`,9):s.error,o=c.av(e,25),l=t.rank,u=t.size,d=c.av(t.shape.toString(),14);let h="";for(const e in r){const n=r[e];if(null!=n){const s=n.shape||t.shape,r=s.length;h+=`${e}: ${r}D ${r>0?s:""} `}}console.log(`%c${o}\t%c${i}\t%c${l}D ${d}\t%c${u}\t%c${h}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}var f=n(259),m=n(565);function g(e){return null!=e.kernelName}class y{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map(e=>e.name)))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class b{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new y}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then(()=>{});if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(l.i(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new d(this.backendInstance),!0}setupRegisteredKernels(){(0,o.Op)(this.backendName).forEach(e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)})}disposeRegisteredKernels(e){(0,o.Op)(e).forEach(t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])})}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof s.uI||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,s=n.then(n=>!(t<this.pendingBackendInitId||(this.registry[e]=n,this.pendingBackendInit=null,0))).catch(n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,l.i(`Initialization of backend ${e} failed`),l.i(n.stack||n.message)),!1));return this.pendingBackendInit=s,{success:s,asyncInit:!0}}}catch(t){return l.i(`Initialization of backend ${e} failed`),l.i(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority)}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:s,asyncInit:r}=this.initializeBackend(n);if(r||s)return{name:n,asyncInit:r}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),s=n.backend,r=this.readSync(t),a=s.refCount(t);s.disposeData(t,!0),n.backend=e,e.move(t,r,n.shape,n.dtype,a),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,s=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");s=e}return this.scopedRun(()=>this.startScope(s),()=>this.endScope(n),()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return b.nextTensorId++}nextVariableId(){return b.nextVariableId++}clone(e){const t=v.runKernel(i.lzr,{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],e=>({x:()=>{const t={x:e};return v.runKernel(i.KXH,t,{dtype:"float32"})}}),[],{}),t}runKernel(e,t,n){if(null==this.backendName&&this.backend,null==(0,o._5)(e,this.backendName))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const s=this.backend.numDataIds();let r=0;n.forEach(e=>{r+="complex64"===e.dtype?3:1});const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=s-t-r-a;if(i>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const s=this.isTapeOn(),r=this.state.numBytes,a=this.state.numTensors;let i,l;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const u=g(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(g(e)){const{kernelName:t,inputs:r,attrs:a}=e;null==this.backendName&&this.backend;const u=(0,o._5)(t,this.backendName);c.vA(null!=u,()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`),i=()=>{const e=this.backend.numDataIds();l=u.kernelFunc({inputs:r,attrs:a,backend:this.backend});const i=Array.isArray(l)?l:[l];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,i);const o=i.map(e=>null!=e.rank?e:this.makeTensorFromTensorInfo(e));if(s){const e=this.getTensorsForGradient(t,r,o);n=this.saveTensorsForBackwardMode(e)}return o}}else{const{forwardFunc:t}=e,r=e=>{s&&(n=e.map(e=>this.keep(this.clone(e))))};i=()=>{const e=this.backend.numDataIds();l=this.tidy(()=>t(this.backend,r));const n=Array.isArray(l)?l:[l];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(u,e,n),n}}const{inputs:d,attrs:h}=e,p=g(e)?null:e.backwardsFunc;let f;return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(f=this.profiler.profileKernel(u,d,()=>i()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(f),t=f.outputs):t=i()}),s&&this.addTapeNode(u,d,t,p,n,h),this.state.profiling&&this.state.activeProfile.kernels.push({name:u,bytesAdded:this.state.numBytes-r,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-a,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(d).map(e=>null!=d[e]?d[e].shape:null),outputShapes:t.map(e=>e.shape),kernelTimeMs:f.timeMs,extraInfo:f.extraInfo}),Array.isArray(l)?t:t[0]}saveTensorsForBackwardMode(e){const t=e.map(e=>this.keep(this.clone(e)));return t}getTensorsForGradient(e,t,n){const s=(0,o.vQ)(e);if(null!=s){const e=s.inputsToSave||[],r=s.outputsToSave||[];let a;s.saveAllInputs?(c.vA(Array.isArray(t),()=>"saveAllInputs is true, expected inputs to be an array."),a=Object.keys(t).map(e=>t[e])):a=e.map(e=>t[e]);const i=n.filter((e,t)=>r[t]);return a.concat(i)}return[]}makeTensor(e,t,n,s){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",s=s||this.backend;let r=e;"string"===n&&c.Kg(e[0])&&(r=e.map(e=>u.encodeString(e)));const a=s.write(r,t,n),i=new f.qY(t,n,a,this.nextTensorId());if(this.trackTensor(i,s),"string"===n){const e=this.state.tensorInfo.get(a),t=(0,c.SL)(r);this.state.numBytes+=t-e.bytes,e.bytes=t}return i}makeTensorFromDataId(e,t,n,s){const r={dataId:e,shape:t,dtype:n=n||"float32"};return this.makeTensorFromTensorInfo(r,s)}makeTensorFromTensorInfo(e,t){const{dataId:n,shape:s,dtype:r}=e,a=new f.qY(s,r,n,this.nextTensorId());return this.trackTensor(a,t),a}makeVariable(e,t=!0,n,s){n=n||this.nextVariableId().toString(),null!=s&&s!==e.dtype&&(e=e.cast(s));const r=new f.rT(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[r.name])throw new Error(`Variable with name ${r.name} was already registered`);return this.state.registeredVariables[r.name]=r,this.incRef(r,this.backend),r}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*c.jv(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof f.rT||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*c.jv(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(e=>e.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,s,r,a){const i={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:r},l=(0,o.vQ)(e);null!=l&&(s=l.gradFunc),null!=s&&(i.gradient=e=>(e=e.map((e,t)=>{if(null==e){const e=n[t],s=c.Ty(e.size,e.dtype);return this.makeTensor(s,e.shape,e.dtype)}return e}),s(e.length>1?e:e[0],r,a))),this.state.activeTape.push(i)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=(0,m.getTensorsInContainer)(e),n=new Set(t.map(e=>e.id));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const s=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach(e=>{e.kept||e.scopeId!==s.id||this.track(e)})}gradients(e,t,n,s=!1){if(c.vA(t.length>0,()=>"gradients() received an empty list of xs."),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const r=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",e));c.vA(r instanceof f.qY,()=>"The result y returned by f() must be a tensor.");const a=function(e,t,n){const s={},r={};for(let e=0;e<t.length;e++)s[t[e].id]=!0;for(let n=0;n<e.length;n++){const a=e[n],i=a.inputs;for(const e in i){const n=i[e];let o=!1;for(let e=0;e<t.length;e++)if(s[n.id]){a.outputs.forEach(e=>s[e.id]=!0),o=!0,r[a.id]=!0;break}if(o)break}}const a={};a[n.id]=!0;const i={};for(let t=e.length-1;t>=0;t--){const n=e[t],s=n.inputs;for(let e=0;e<n.outputs.length;e++)if(a[n.outputs[e].id]){for(const e in s)a[s[e].id]=!0,i[n.id]=!0;break}}const o=[];for(let t=0;t<e.length;t++){const n=e[t];if(r[n.id]&&i[n.id]){const e={};for(const t in n.inputs){const r=n.inputs[t];s[r.id]&&(e[t]=r)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,o.push(t)}}return o}(this.state.activeTape,t,r);if(!s&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{const e={};e[r.id]=null==n?function(e){const t=(0,c.FZ)((0,c.Ze)(e),"float32");return v.makeTensor(t,e,"float32")}(r.shape):n,function(e,t,n,s){for(let r=t.length-1;r>=0;r--){const a=t[r],i=[];if(a.outputs.forEach(t=>{const n=e[t.id];null!=n?i.push(n):i.push(null)}),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const o=a.gradient(i);for(const t in a.inputs){if(!(t in o))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(o)}.`);const r=n(()=>o[t]());if("float32"!==r.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${r.dtype}'`);const i=a.inputs[t];if(!c.r1(r.shape,i.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${t}' has shape '${r.shape}', which does not match the shape of the input '${i.shape}'`);if(null==e[i.id])e[i.id]=r;else{const t=e[i.id];e[i.id]=s(t,r),t.dispose()}}}}(e,a,e=>this.tidy(e),w);const s=t.map(t=>e[t.id]);return 0===this.state.gradientDepth&&(this.state.activeTape.forEach(e=>{for(const t of e.saved)t.dispose()}),this.state.activeTape=null),{value:r,grads:s}})}customGrad(e){return c.vA(c.Tn(e),()=>"The f passed in customGrad(f) must be a function."),(...t)=>{let n;c.vA(t.every(e=>e instanceof f.qY),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");const s={};return t.forEach((e,t)=>{s[t]=e}),this.runKernelFunc({forwardFunc:(s,r)=>(n=e(...t,r),c.vA(n.value instanceof f.qY,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),c.vA(c.Tn(n.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),n.value),backwardsFunc:(e,s)=>{const r=n.gradFunc(e,s),a=Array.isArray(r)?r:[r];c.vA(a.length===t.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),c.vA(a.every(e=>e instanceof f.qY),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");const i={};return a.forEach((e,t)=>{i[t]=()=>e}),i},inputs:s})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){const t=(0,u.now)(),n=await this.backend.time(e);return n.wallMs=(0,u.now)()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new y;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function x(){const e=(0,a.L)();if(null==e._tfengine){const t=new r.OH(e);e._tfengine=new b(t)}return(0,r.tj)(e._tfengine.ENV),(0,f.qP)(()=>e._tfengine),e._tfengine}b.nextTensorId=0,b.nextVariableId=0;const v=x();function w(e,t){const n={a:e,b:t};return v.runKernel(i.OMN,n)}},1743:(e,t,n)=>{"use strict";let s;function r(){if(null==s){let e;if("undefined"!=typeof window)e=window;else if(void 0!==n.g)e=n.g;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}s=e}return s}function a(e,t){const n=function(){const e=r();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const s=t();return n.set(e,s),n.get(e)}}n.d(t,{L:()=>r,m:()=>a})},1760:(e,t,n)=>{"use strict";n.d(t,{M:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({oneHot_:function(e,t,n=1,i=0,o="int32"){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const l={indices:(0,a.YT)(e,"indices","oneHot","int32")},u={dtype:o,depth:t,onValue:n,offValue:i};return s.T2.runKernel(r.urI,l,u)}})},1830:(e,t,n)=>{"use strict";n.d(t,{Dv:()=>o,_X:()=>h,jY:()=>u,mu:()=>c,ok:()=>l,y7:()=>d});var s=n(1585),r=n(259),a=n(8189),i=n(5119);function o(e){return i.vA(i.Tn(e),()=>"The f passed in grad(f) must be a function"),(t,n)=>{const r=(0,a.YT)(t,"x","tf.grad","string_or_numeric"),o=null!=n?(0,a.YT)(n,"dy","tf.grad"):null;return s.T2.tidy(()=>{const{value:t,grads:n}=s.T2.gradients(()=>e(r),[r],o);return null!=o&&i.O3(t.shape,o.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),p(n),n[0]})}}function l(e){return i.vA(i.Tn(e),()=>"The f passed in grads(f) must be a function"),(t,n)=>{i.vA(Array.isArray(t),()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s");const r=(0,a.j1)(t,"args","tf.grads","string_or_numeric"),o=null!=n?(0,a.YT)(n,"dy","tf.grads"):null;return s.T2.tidy(()=>{const{value:t,grads:n}=s.T2.gradients(()=>e(...r),r,o);return null!=o&&i.O3(t.shape,o.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),p(n),n})}}function u(e){return i.vA(i.Tn(e),()=>"The f passed in valueAndGrad(f) must be a function"),(t,n)=>{i.vA(t instanceof r.qY,()=>"The x passed in valueAndGrad(f)(x) must be a tensor"),i.vA(null==n||n instanceof r.qY,()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor");const{grads:a,value:o}=s.T2.gradients(()=>e(t),[t],n);return p(a),{grad:a[0],value:o}}}function c(e){return i.vA(i.Tn(e),()=>"The f passed in valueAndGrads(f) must be a function"),(t,n)=>{i.vA(Array.isArray(t)&&t.every(e=>e instanceof r.qY),()=>"The args passed in valueAndGrads(f)(args) must be array of tensors"),i.vA(null==n||n instanceof r.qY,()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor");const a=s.T2.gradients(()=>e(...t),t,n);return null!=n&&i.O3(a.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),p(a.grads),a}}function d(e,t){i.vA(i.Tn(e),()=>"The f passed in variableGrads(f) must be a function"),i.vA(null==t||Array.isArray(t)&&t.every(e=>e instanceof r.rT),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");const n=null!=t;if(!n){t=[];for(const e in s.T2.registeredVariables)t.push(s.T2.registeredVariables[e])}const a=n?t.filter(e=>!e.trainable):null,o=t.length;t=t.filter(e=>e.trainable),i.vA(t.length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${o} variables is trainable.`);const{value:l,grads:u}=s.T2.gradients(e,t,null,!0);i.vA(u.some(e=>null!=e),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),i.vA(0===l.rank,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${l.rank} tensor`);const c={};return t.forEach((e,t)=>{null!=u[t]&&(c[e.name]=u[t])}),null!=a&&a.forEach(e=>c[e.name]=null),{value:l,grads:c}}function h(e){return s.T2.customGrad(e)}function p(e){if(e.filter(e=>null==e).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}},1890:(e,t,n)=>{"use strict";n.d(t,{x:()=>o});var s=n(1585),r=n(5441),a=n(929),i=n(2302);const o=(0,a.op)({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,a,o,l=[1,1],u){let c=e;3===e.rank&&(c=(0,i.t)(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let d=t;3===d.rank&&(d=(0,i.t)(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const h={x:c,dy:d},p={strides:a,pad:o,dimRoundingMode:u,dilations:l,filterShape:n};return s.T2.runKernel(r.X$8,h,p)}})},1895:(e,t,n)=>{"use strict";n.d(t,{c:()=>l});var s=n(1585),r=n(5441),a=n(5119),i=n(929),o=n(2302);const l=(0,i.op)({conv3DBackpropInput_:function(e,t,n,i,l){a.vA(e.length===t.rank,()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`);let u=e,c=t,d=!1;4===t.rank&&(d=!0,c=(0,o.t)(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),u=[1,e[0],e[1],e[2],e[3]]);const h=u[4],p=c.shape[4];a.vA(5===u.length,()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${u.length}.`),a.vA(5===c.rank,()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${c.rank}`),a.vA(5===n.rank,()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`),a.vA(h===n.shape[3],()=>`Error in conv3dDerInput: depth of input (${h}) must match input depth for filter ${n.shape[3]}.`),a.vA(p===n.shape[4],()=>`Error in conv3dDerInput: depth of output (${p}) must match output depth for filter ${n.shape[4]}.`);const f={dy:c,filter:n},m={pad:l,strides:i,inputShape:u},g=s.T2.runKernel(r.gC7,f,m);return d?(0,o.t)(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}})},1902:(e,t,n)=>{"use strict";n.d(t,{x:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({real_:function(e){const t={input:(0,a.YT)(e,"input","real")};return s.T2.runKernel(r.LRy,t)}})},1938:(e,t,n)=>{"use strict";n.d(t,{T:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({max_:function(e,t=null,n=!1){const i={x:(0,a.YT)(e,"x","max")},o={reductionIndices:t,keepDims:n};return s.T2.runKernel(r.VAI,i,o)}})},2015:(e,t,n)=>{"use strict";n.d(t,{K:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({log1p_:function(e){const t={x:(0,a.YT)(e,"x","log1p")};return s.T2.runKernel(r.Cg$,t)}})},2046:(e,t,n)=>{"use strict";var s,r,a,i,o;n.d(t,{Nw:()=>h,Oj:()=>d,Tu:()=>u,ch:()=>c,rg:()=>s}),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(s||(s={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(r||(r={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(a||(a={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(i||(i={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(o||(o={}));const l={float32:i,int32:r,bool:a,complex64:o};function u(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return l[e][t]}function c(e){return u(e,"int32")}function d(e){return null!=e&&"object"==typeof e&&"texture"in e&&e.texture instanceof WebGLTexture}function h(e){return"undefined"!=typeof GPUBuffer&&null!=e&&"object"==typeof e&&"buffer"in e&&e.buffer instanceof GPUBuffer}},2058:(e,t,n)=>{"use strict";n.d(t,{r:()=>l});var s=n(1585),r=n(5441),a=n(565),i=n(8189),o=n(2198);const l=(0,n(929).op)({greater_:function(e,t){let n=(0,i.YT)(e,"a","greater","string_or_numeric"),l=(0,i.YT)(t,"b","greater","string_or_numeric");[n,l]=(0,a.makeTypesMatch)(n,l),(0,o.assertAndGetBroadcastShape)(n.shape,l.shape);const u={a:n,b:l};return s.T2.runKernel(r.XhZ,u)}})},2118:(e,t,n)=>{"use strict";n.d(t,{E:()=>l});var s=n(1585),r=n(5441),a=n(565),i=n(8189),o=n(2198);const l=(0,n(929).op)({notEqual_:function(e,t){let n=(0,i.YT)(e,"a","notEqual","string_or_numeric"),l=(0,i.YT)(t,"b","notEqual","string_or_numeric");[n,l]=(0,a.makeTypesMatch)(n,l),(0,o.assertAndGetBroadcastShape)(n.shape,l.shape);const u={a:n,b:l};return s.T2.runKernel(r.ylV,u)}})},2151:(e,t,n)=>{"use strict";n.d(t,{_:()=>l});var s=n(1585),r=n(5441),a=n(8189),i=n(3567),o=n(2198);const l=(0,n(929).op)({where_:function(e,t,n){const l=(0,a.YT)(t,"a","where"),u=(0,a.YT)(n,"b","where"),c=(0,a.YT)(e,"condition","where","bool"),d=(0,o.assertAndGetBroadcastShape)((0,o.assertAndGetBroadcastShape)(c.shape,l.shape),u.shape),h={condition:(0,i.h)(c,d),t:(0,i.h)(l,d),e:(0,i.h)(u,d)};return s.T2.runKernel(r.l6P,h)}})},2198:(e,t,n)=>{"use strict";function s(e,t){const n=e.length,s=[];for(let r=0;r<n;r++){const a=n-1-r,i=e[a]||1;(t[t.length-1-r]||1)>1&&1===i&&s.unshift(a)}return s}function r(e,t){const n=[];for(let s=0;s<t.length;s++){const r=e[e.length-s-1],a=t.length-s-1,i=t[a];(null==r||1===r&&i>1)&&n.unshift(a)}return n}function a(e,t){const n=Math.max(e.length,t.length),s=new Array(n);for(let r=0;r<n;r++){let a=e[e.length-r-1];null==a&&(a=1);let i=t[t.length-r-1];if(null==i&&(i=1),1===a)s[n-r-1]=i;else if(1===i)s[n-r-1]=a;else{if(a!==i)throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`);s[n-r-1]=a}}return s}n.r(t),n.d(t,{assertAndGetBroadcastShape:()=>a,getBroadcastDims:()=>s,getReductionAxes:()=>r})},2292:(e,t,n)=>{"use strict";n.d(t,{g:()=>f});var s=n(7148),r=n(5030),a=n(5040),i=n(9258),o=n(929),l=n(1902),u=n(2302),c=n(3262),d=n(5702),h=n(7986),p=n(3108);const f=(0,o.op)({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let o;if(t<=2){const s=(0,u.t)(e,[n,t]);o=(0,p.K)(s)}else{const f=[n,2*(t-1)],m=(0,u.t)((0,l.x)(e),[n,t]),g=(0,u.t)((0,a.n)(e),[n,t]),y=(0,c.B)((0,h.d)(m,[0,1],[n,t-2]),1),b=(0,i.l)((0,c.B)((0,h.d)(g,[0,1],[n,t-2]),1),(0,d.d)(-1)),x=(0,r.x)([m,y],1),v=(0,r.x)([g,b],1),w=(0,u.t)((0,s.f)(x,v),[f[0],f[1]]);o=(0,p.K)(w)}if(o=(0,l.x)(o),3===e.rank&&0!==e.shape[0]){const t=o,n=e.shape[0];o=(0,u.t)(o,[n,o.shape[0]/n,o.shape[1]]),t.dispose()}return o}})},2302:(e,t,n)=>{"use strict";n.d(t,{t:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({reshape_:function(e,t){const n={x:(0,a.YT)(e,"x","reshape","string_or_numeric")},i={shape:t};return s.T2.runKernel(r.R23,n,i)}})},2307:(e,t,n)=>{"use strict";n.d(t,{Q:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({all_:function(e,t=null,n=!1){const i={x:(0,a.YT)(e,"x","all","bool")},o={axis:t,keepDims:n};return s.T2.runKernel(r.u8Z,i,o)}})},2596:(e,t,n)=>{"use strict";n.d(t,{x:()=>y});var s=n(8189),r=n(5119),a=n(4888),i=n(1078),o=n(1938),l=n(7436),u=n(929),c=n(8990),d=n(2302),h=n(5702),p=n(9348),f=n(5793),m=n(3791);function g(e,t,n=null){if(0===e.rank)return(0,a.t)(e);if(1!==e.rank&&null===n)return g((0,d.t)(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return(0,m.c)((0,a.t)(e),n);if(t===1/0)return(0,o.T)((0,a.t)(e),n);if(t===-1/0)return(0,l.j)((0,a.t)(e),n);if("euclidean"===t||2===t)return(0,p.R)((0,m.c)((0,c.n)((0,a.t)(e),(0,h.d)(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return(0,o.T)((0,m.c)((0,a.t)(e),n[0]),n[1]-1);if(t===1/0)return(0,o.T)((0,m.c)((0,a.t)(e),n[1]),n[0]);if(t===-1/0)return(0,l.j)((0,m.c)((0,a.t)(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return(0,p.R)((0,m.c)((0,f.E)(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const y=(0,u.op)({norm_:function(e,t="euclidean",n=null,a=!1){const o=g(e=(0,s.YT)(e,"x","norm"),t,n);let l=o.shape;if(a){const t=(0,r.Y6)(n,e.shape);l=i.SM(o.shape,t)}return(0,d.t)(o,l)}})},2611:(e,t,n)=>{"use strict";n.d(t,{i:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({mean_:function(e,t=null,n=!1){const i={x:(0,a.YT)(e,"x","mean")},o={axis:t,keepDims:n};return s.T2.runKernel(r.g5A,i,o)}})},2644:(e,t,n)=>{"use strict";n.d(t,{B:()=>u});var s=n(1585),r=n(5441),a=n(565),i=n(8189),o=n(2198),l=n(9809);const u=(0,n(929).op)({minimum_:function(e,t){let n=(0,i.YT)(e,"a","minimum"),u=(0,i.YT)(t,"b","minimum");[n,u]=(0,a.makeTypesMatch)(n,u),"bool"===n.dtype&&(n=(0,l.w)(n,"int32"),u=(0,l.w)(u,"int32")),(0,o.assertAndGetBroadcastShape)(n.shape,u.shape);const c={a:n,b:u};return s.T2.runKernel(r.LG0,c)}})},2768:(e,t,n)=>{"use strict";n.d(t,{$:()=>i});var s=n(8189),r=n(5119),a=n(9171);function i(e,t,n){if((0,r.HO)(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const i=(0,s.MZ)(e,n);if(3!==i.length&&1!==i.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===i.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return(0,a.Q)(e,t,i,n)}},2804:(e,t,n)=>{"use strict";n.d(t,{H:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({acos_:function(e){const t={x:(0,a.YT)(e,"x","acos")};return s.T2.runKernel(r.Vvy,t)}})},2855:(e,t,n)=>{"use strict";n.d(t,{U:()=>i});var s=n(1585),r=n(5119),a=n(7148);function i(e,t="float32"){if((0,r.SA)(e),"complex64"===t){const t=i(e,"float32"),n=i(e,"float32");return(0,a.f)(t,n)}const n=(0,r.Ty)((0,r.Ze)(e),t);return s.T2.makeTensor(n,e,t)}},2954:(e,t,n)=>{"use strict";n.d(t,{b:()=>u});var s=n(1585),r=n(5441),a=n(8189),i=n(5119),o=n(929),l=n(2302);const u=(0,o.op)({resizeNearestNeighbor_:function(e,t,n=!1,o=!1){const u=(0,a.YT)(e,"images","resizeNearestNeighbor");i.vA(3===u.rank||4===u.rank,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${u.rank}.`),i.vA(2===t.length,()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`),i.vA("float32"===u.dtype||"int32"===u.dtype,()=>"`images` must have `int32` or `float32` as dtype"),i.vA(!1===o||!1===n,()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");let c=u,d=!1;3===u.rank&&(d=!0,c=(0,l.t)(u,[1,u.shape[0],u.shape[1],u.shape[2]]));const[]=t,h={images:c},p={alignCorners:n,halfPixelCenters:o,size:t},f=s.T2.runKernel(r.jOE,h,p);return d?(0,l.t)(f,[f.shape[1],f.shape[2],f.shape[3]]):f}})},3002:(e,t,n)=>{"use strict";n.d(t,{X:()=>u});var s=n(1585),r=n(5441),a=n(8189),i=n(5119),o=n(929),l=n(2302);const u=(0,o.op)({dilation2d_:function(e,t,n,o,u=[1,1],c="NHWC"){const d=(0,a.YT)(e,"x","dilation2d"),h=(0,a.YT)(t,"filter","dilation2d");i.vA(3===d.rank||4===d.rank,()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${d.rank}.`),i.vA(3===h.rank,()=>`Error in dilation2d: filter must be rank 3, but got rank ${h.rank}.`),i.vA("NHWC"===c,()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${c}`);let p=d,f=!1;3===d.rank&&(p=(0,l.t)(d,[1,d.shape[0],d.shape[1],d.shape[2]]),f=!0),i.vA(p.shape[3]===h.shape[2],()=>`Error in dilation2d:  input and filter must have the same depth: ${p.shape[3]} vs ${h.shape[2]}`);const m={x:p,filter:h},g={strides:n,pad:o,dilations:u},y=s.T2.runKernel(r.jxD,m,g);return f?(0,l.t)(y,[y.shape[1],y.shape[2],y.shape[3]]):y}})},3020:(e,t,n)=>{"use strict";n.d(t,{L:()=>l});var s=n(1585),r=n(5441),a=n(565),i=n(8189),o=n(2198);const l=(0,n(929).op)({equal_:function(e,t){let n=(0,i.YT)(e,"a","equal","string_or_numeric"),l=(0,i.YT)(t,"b","equal","string_or_numeric");[n,l]=(0,a.makeTypesMatch)(n,l),(0,o.assertAndGetBroadcastShape)(n.shape,l.shape);const u={a:n,b:l};return s.T2.runKernel(r.BRl,u)}})},3031:function(e,t,n){var s;!function(e,r){function a(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),s==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function i(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function o(e,t){var n=new a(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&("object"==typeof s&&i(s,n),r.state=function(){return i(n,{})}),r}r&&r.exports?r.exports=o:n.amdD&&n.amdO?void 0===(s=function(){return o}.call(t,n,t,r))||(r.exports=s):this.xorwow=o}(0,e=n.nmd(e),n.amdD)},3108:(e,t,n)=>{"use strict";n.d(t,{K:()=>i});var s=n(1585),r=n(5441),a=n(5119);const i=(0,n(929).op)({ifft_:function(e){(0,a.vA)("complex64"===e.dtype,()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`);const t={input:e};return s.T2.runKernel(r.OAQ,t)}})},3134:(e,t,n)=>{"use strict";n.d(t,{l:()=>o});var s=n(1585),r=n(5441),a=n(929),i=n(2302);const o=(0,a.op)({depthwiseConv2dNativeBackpropInput_:function(e,t,n,a,o,l=[1,1],u){let c=t,d=!1;3===t.rank&&(d=!0,c=(0,i.t)(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const h={dy:c,filter:n},p={strides:a,pad:o,dimRoundingMode:u,dilations:l,inputShape:e},f=s.T2.runKernel(r.nVu,h,p);return d?(0,i.t)(f,[f.shape[1],f.shape[2],f.shape[3]]):f}})},3181:function(e,t,n){var s;!function(e,r){function a(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),t.next()}function i(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function o(e,t){var n=new a(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&("object"==typeof s&&i(s,n),r.state=function(){return i(n,{})}),r}r&&r.exports?r.exports=o:n.amdD&&n.amdO?void 0===(s=function(){return o}.call(t,n,t,r))||(r.exports=s):this.xor128=o}(0,e=n.nmd(e),n.amdD)},3262:(e,t,n)=>{"use strict";n.d(t,{B:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({reverse_:function(e,t){const n={x:(0,a.YT)(e,"x","reverse")},i={dims:t};return s.T2.runKernel(r.D7i,n,i)}})},3330:(e,t,n)=>{"use strict";n.d(t,{V:()=>f});var s=n(8189),r=n(5119),a=n(7523),i=n(1078),o=n(8631),l=n(4010),u=n(1938),c=n(929),d=n(2302),h=n(7126),p=n(3791);const f=(0,c.op)({logSumExp_:function(e,t=null,n=!1){const c=(0,s.YT)(e,"x","logSumExp"),f=(0,r.Y6)(t,c.shape),m=(0,u.T)(c,f,!0),g=(0,h.j)(c,m),y=(0,o.o)(g),b=(0,p.c)(y,f),x=(0,l.R)(b),v=(0,a.W)((0,d.t)(m,x.shape),x);if(n){const e=(0,i.SM)(v.shape,f);return(0,d.t)(v,e)}return v}})},3337:(e,t,n)=>{"use strict";n.d(t,{D:()=>l});var s=n(1585),r=n(5441),a=n(565),i=n(8189),o=n(2198);const l=(0,n(929).op)({greaterEqual_:function(e,t){let n=(0,i.YT)(e,"a","greaterEqual","string_or_numeric"),l=(0,i.YT)(t,"b","greaterEqual","string_or_numeric");[n,l]=(0,a.makeTypesMatch)(n,l),(0,o.assertAndGetBroadcastShape)(n.shape,l.shape);const u={a:n,b:l};return s.T2.runKernel(r.lLS,u)}})},3416:(e,t,n)=>{"use strict";n.d(t,{P:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({elu_:function(e){const t={x:(0,a.YT)(e,"x","elu","float32")};return s.T2.runKernel(r.Pah,t)}})},3427:(e,t,n)=>{"use strict";n.d(t,{P:()=>l});var s=n(1585),r=n(5441),a=n(565),i=n(8189),o=n(2198);const l=(0,n(929).op)({squaredDifference_:function(e,t){let n=(0,i.YT)(e,"a","squaredDifference"),l=(0,i.YT)(t,"b","squaredDifference");[n,l]=(0,a.makeTypesMatch)(n,l),(0,o.assertAndGetBroadcastShape)(n.shape,l.shape);const u={a:n,b:l};return s.T2.runKernel(r.Ddj,u,{})}})},3454:(e,t,n)=>{"use strict";n.d(t,{E:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({isInf_:function(e){const t={x:(0,a.YT)(e,"x","isInf")};return s.T2.runKernel(r.E3$,t)}})},3531:(e,t,n)=>{"use strict";n.d(t,{K:()=>u});var s=n(1585),r=n(5441),a=n(8189),i=n(5119),o=n(929),l=n(2302);const u=(0,o.op)({localResponseNormalization_:function(e,t=5,n=1,o=1,u=.5){const c=(0,a.YT)(e,"x","localResponseNormalization");i.vA(4===c.rank||3===c.rank,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${c.rank}.`),i.vA(i.E6(t),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`);let d=c,h=!1;3===c.rank&&(h=!0,d=(0,l.t)(c,[1,c.shape[0],c.shape[1],c.shape[2]]));const p={x:d},f={depthRadius:t,bias:n,alpha:o,beta:u},m=s.T2.runKernel(r.jM4,p,f);return h?(0,l.t)(m,[m.shape[1],m.shape[2],m.shape[3]]):m}})},3567:(e,t,n)=>{"use strict";n.d(t,{h:()=>c});var s=n(1585),r=n(5441),a=n(8189),i=n(5119),o=n(125),l=n(929),u=n(2302);const c=(0,l.op)({broadcastTo_:function(e,t){let n=(0,a.YT)(e,"broadcastTo","x");const l=n.shape;if((0,i.SA)(t),t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=(0,u.t)(n,e)}const c=n.shape,d=Array.from(t);for(let e=t.length-1;e>=0;e--)if(c[e]===t[e])d[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${l}] cannot be broadcast to [${t}].`);if(0===d.map((e,t)=>e>1?t:-1).filter(e=>e>=0).length)return(0,o.o)(n);const h={x:n},p={reps:d};return s.T2.runKernel(r.FAs,h,p)}})},3673:(e,t,n)=>{"use strict";n.d(t,{R:()=>a,i:()=>r});var s=n(6574);function r(...e){(0,s._K)().getBool("IS_TEST")||(0,s._K)().getBool("PROD")||console.warn(...e)}function a(...e){(0,s._K)().getBool("IS_TEST")||(0,s._K)().getBool("PROD")||console.log(...e)}},3701:(e,t,n)=>{"use strict";n.d(t,{k:()=>u});var s=n(8189),r=n(5119),a=n(8794),i=n(7195),o=n(929),l=n(2302);const u=(0,o.op)({conv1d_:function(e,t,n,o,u="NWC",c=1,d){const h=(0,s.YT)(e,"x","conv1d"),p=(0,s.YT)(t,"filter","conv1d");let f=h,m=!1;2===h.rank&&(m=!0,f=(0,l.t)(h,[1,h.shape[0],h.shape[1]])),r.vA(3===f.rank,()=>`Error in conv1d: input must be rank 3, but got rank ${f.rank}.`),r.vA(3===p.rank,()=>`Error in conv1d: filter must be rank 3, but got rank ${p.rank}.`),i.s_("conv1d",o,d),r.vA(f.shape[2]===p.shape[1],()=>`Error in conv1d: depth of input (${f.shape[2]}) must match input depth for filter ${p.shape[1]}.`),r.vA(i.G0(n,c),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${c}'`),r.vA(i.qk(c),()=>"Error in conv1D: Dilated rates should be larger than 0."),r.vA(i.qk(n),()=>"Error in conv1D: Stride should be larger than 0."),r.vA("NWC"===u,()=>`Error in conv1d: got dataFormat of ${u} but only NWC is currently supported.`);const g=(0,l.t)(p,[1,p.shape[0],p.shape[1],p.shape[2]]),y=(0,l.t)(f,[f.shape[0],1,f.shape[1],f.shape[2]]),b=[1,n],x=[1,c],v=(0,a.X)(y,g,b,o,"NHWC",x,d);return m?(0,l.t)(v,[v.shape[2],v.shape[3]]):(0,l.t)(v,[v.shape[0],v.shape[2],v.shape[3]])}})},3717:function(e,t,n){var s;!function(e,r){function a(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,s=t.d,r=t.a;return e=e<<25^e>>>7^n,n=n-s|0,s=s<<24^s>>>8^r,r=r-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-s|0,t.d=s<<16^n>>>16^r,t.a=r-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var s=0;s<n.length+20;s++)t.b^=0|n.charCodeAt(s),t.next()}function i(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function o(e,t){var n=new a(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&("object"==typeof s&&i(s,n),r.state=function(){return i(n,{})}),r}r&&r.exports?r.exports=o:n.amdD&&n.amdO?void 0===(s=function(){return o}.call(t,n,t,r))||(r.exports=s):this.tychei=o}(0,e=n.nmd(e),n.amdD)},3726:(e,t,n)=>{"use strict";n.d(t,{F:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({sin_:function(e){const t={x:(0,a.YT)(e,"x","sin","float32")};return s.T2.runKernel(r.hql,t)}})},3732:(e,t,n)=>{"use strict";n.d(t,{j:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({relu6_:function(e){const t={x:(0,a.YT)(e,"x","relu6")};return s.T2.runKernel(r.P_L,t)}})},3774:(e,t,n)=>{"use strict";n.d(t,{r:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({atanh_:function(e){const t={x:(0,a.YT)(e,"x","atanh")};return s.T2.runKernel(r.zP9,t)}})},3789:(e,t,n)=>{"use strict";n.d(t,{n:()=>o});var s=n(1585),r=n(5441),a=n(8189),i=n(2198);const o=(0,n(929).op)({logicalAnd_:function(e,t){const n=(0,a.YT)(e,"a","logicalAnd","bool"),o=(0,a.YT)(t,"b","logicalAnd","bool");(0,i.assertAndGetBroadcastShape)(n.shape,o.shape);const l={a:n,b:o};return s.T2.runKernel(r.RUm,l)}})},3791:(e,t,n)=>{"use strict";n.d(t,{c:()=>o});var s=n(1585),r=n(5441),a=n(8189),i=n(9809);const o=(0,n(929).op)({sum_:function(e,t=null,n=!1){let o=(0,a.YT)(e,"x","sum");"bool"===o.dtype&&(o=(0,i.w)(o,"int32"));const l={x:o},u={axis:t,keepDims:n};return s.T2.runKernel(r.WuN,l,u)}})},3879:(e,t,n)=>{"use strict";n.r(t),n.d(t,{arraysEqual:()=>a.r1,arraysEqualWithNull:()=>a.e_,assert:()=>a.vA,assertNonNegativeIntegerDimensions:()=>a.SA,assertNonNull:()=>a.HO,assertShapesMatch:()=>a.O3,bytesFromStringArray:()=>a.SL,bytesPerElement:()=>a.jv,checkConversionForErrors:()=>a.nd,clamp:()=>a.qE,computeStrides:()=>a.Ur,convertBackendValuesAndArrayBuffer:()=>a.o2,createScalarValue:()=>v,createShuffledIndices:()=>a.P8,decodeString:()=>N,distSquared:()=>a.oO,encodeString:()=>S,fetch:()=>T,fingerPrint64:()=>x,flatten:()=>C,getArrayFromDType:()=>a.Ab,getTypedArrayFromDType:()=>a.ce,hasEncodingLoss:()=>a.BE,hexToLong:()=>l,indexToLoc:()=>a._k,inferDtype:()=>a.X$,inferFromImplicitShape:()=>a.XT,isBoolean:()=>a.Lm,isFunction:()=>a.Tn,isInt:()=>a.E6,isNumber:()=>a.Et,isPromise:()=>a.yL,isScalarShape:()=>a.Sf,isString:()=>a.Kg,isTypedArray:()=>I,isValidDtype:()=>a.xn,locToIndex:()=>a.sX,makeOnesTypedArray:()=>a.FZ,makeZerosNestedTypedArray:()=>a.c7,makeZerosTypedArray:()=>a.Ty,nearestDivisor:()=>a.lK,nearestLargerEven:()=>a.eV,now:()=>k,parseAxisParam:()=>a.Y6,randUniform:()=>a.so,repeatedTry:()=>a._q,rightPad:()=>a.av,shuffle:()=>a.k4,shuffleCombo:()=>a.a0,sizeFromShape:()=>a.Ze,sizeToSquarishShape:()=>a.gS,squeezeShape:()=>a.gx,sum:()=>a.cz,swap:()=>a.wg,tanh:()=>a.ym,toNestedArray:()=>a.yw,toTypedArray:()=>w});var s=n(6574),r=n(6448),a=n(5119),i=n(8570);const o=n.n(i)()||i;function l(e){return o.fromString(e,!0,16)}const u=l("c3a5c85c97cb3127"),c=l("b492b66fbe98f273"),d=l("9ae16a3b2f90404f");function h(e){return e.xor(e.shru(47))}function p(e,t,n){const s=e.slice(t,t+n);return o.fromBytes(Array.from(s),!0,!0)}function f(e,t){return p(e,t,8)}function m(e,t){return p(e,t,4)}function g(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function y(e,t,n=l("9ddfea08eb382d69")){let s=e.xor(t).mul(n);s=s.xor(s.shru(47));let r=t.xor(s).mul(n);return r=r.xor(r.shru(47)),r=r.mul(n),r}function b(e,t,n,s){return function(e,t,n,s,r,a){r=r.add(e),a=g(a.add(r).add(s),21);const i=r;return r=(r=r.add(t)).add(n),a=a.add(g(r,44)),[r.add(s),a.add(i)]}(f(e,t),f(e,t+8),f(e,t+16),f(e,t+24),n,s)}function x(e,t=e.length){const n=o.fromNumber(81,!0);if(t<=32)return t<=16?function(e,t=e.length){if(t>=8){const n=d.add(2*t),s=f(e,0).add(d),r=f(e,t-8);return y(g(r,37).mul(n).add(s),g(s,25).add(r).mul(n),n)}if(t>=4){const n=d.add(2*t);return y(m(e,0).shl(3).add(t),m(e,t-4),n)}if(t>0){const n=e[0]+(e[t>>1]<<8),s=t+(e[t-1]<<2);return h(d.mul(n).xor(u.mul(s))).mul(d)}return d}(e,t):function(e,t=e.length){const n=d.add(2*t),s=f(e,0).mul(c),r=f(e,8),a=f(e,t-8).mul(n),i=f(e,t-16).mul(d);return y(g(s.add(r),43).add(g(a,30)).add(i),s.add(g(r.add(d),18)).add(a),n)}(e,t);if(t<=64)return function(e,t=e.length){const n=d.add(2*t),s=f(e,0).mul(d),r=f(e,8),a=f(e,t-8).mul(n),i=f(e,t-16).mul(d),o=g(s.add(r),43).add(g(a,30)).add(i),l=y(o,s.add(g(r.add(d),18)).add(a),n),u=f(e,16).mul(n),c=f(e,24),h=o.add(f(e,t-32)).mul(n),p=l.add(f(e,t-24)).mul(n);return y(g(u.add(c),43).add(g(h,30)).add(p),u.add(g(c.add(s),18)).add(h),n)}(e,t);let s=n,r=n.mul(c).add(113),a=h(r.mul(d).add(113)).mul(d),i=[o.UZERO,o.UZERO],l=[o.UZERO,o.UZERO];s=s.mul(d).add(f(e,0));let p=0;const x=64*(t-1>>6),v=x+(t-1&63)-63;do{s=g(s.add(r).add(i[0]).add(f(e,p+8)),37).mul(c),r=g(r.add(i[1]).add(f(e,p+48)),42).mul(c),s=s.xor(l[1]),r=r.add(i[0]).add(f(e,p+40)),a=g(a.add(l[0]),33).mul(c),i=b(e,p,i[1].mul(c),s.add(l[0])),l=b(e,p+32,a.add(l[1]),r.add(f(e,p+16))),[a,s]=[s,a],p+=64}while(p!==x);const w=c.add(a.and(255).shl(1));return p=v,l[0]=l[0].add(t-1&63),i[0]=i[0].add(l[0]),l[0]=l[0].add(i[0]),s=g(s.add(r).add(i[0]).add(f(e,p+8)),37).mul(w),r=g(r.add(i[1]).add(f(e,p+48)),42).mul(w),s=s.xor(l[1].mul(9)),r=r.add(i[0].mul(9).add(f(e,p+40))),a=g(a.add(l[0]),33).mul(w),i=b(e,p,i[1].mul(w),s.add(l[0])),l=b(e,p+32,a.add(l[1]),r.add(f(e,p+16))),[a,s]=[s,a],y(y(i[0],l[0],w).add(h(r).mul(u)).add(a),y(i[1],l[1],w).add(s),w)}function v(e,t){return"string"===t?S(e):w([e],t)}function w(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=C(e)),(0,s._K)().getBool("DEBUG")&&a.nd(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function k(){return(0,s._K)().platform.now()}function T(e,t){return(0,s._K)().platform.fetch(e,t)}function S(e,t="utf-8"){return t=t||"utf-8",(0,s._K)().platform.encode(e,t)}function N(e,t="utf-8"){return t=t||"utf-8",(0,s._K)().platform.decode(e,t)}function I(e){return null!=(0,s._K)().platform.isTypedArray?(0,s._K)().platform.isTypedArray(e):(0,r.Y)(e)}function C(e,t=[],n=!1){if(null==t&&(t=[]),"boolean"==typeof e||"number"==typeof e||"string"==typeof e||a.yL(e)||null==e||I(e)&&n)t.push(e);else if(Array.isArray(e)||I(e))for(let s=0;s<e.length;++s)C(e[s],t,n);else{let s=-1;for(const t of Object.keys(e))/^([1-9]+[0-9]*|0)$/.test(t)&&(s=Math.max(s,Number(t)));for(let r=0;r<=s;r++)C(e[r],t,n)}return t}},3909:(e,t,n)=>{"use strict";n.d(t,{$:()=>d});var s=n(1585),r=n(5441),a=n(8189),i=n(5119),o=n(9809),l=n(7195),u=n(929),c=n(2302);const d=(0,u.op)({avgPool_:function(e,t,n,u,d){const h=(0,a.YT)(e,"x","avgPool","float32");i.vA(l.G0(n,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`);let p=h,f=!1;3===h.rank&&(f=!0,p=(0,c.t)(h,[1,h.shape[0],h.shape[1],h.shape[2]])),i.vA(4===p.rank,()=>`Error in avgPool: x must be rank 4 but got rank ${p.rank}.`),l.s_("avgPool",u,d);const m={x:p},g={filterSize:t,strides:n,pad:u,dimRoundingMode:d};let y=s.T2.runKernel(r.ho8,m,g);return y=(0,o.w)(y,h.dtype),f?(0,c.t)(y,[y.shape[1],y.shape[2],y.shape[3]]):y}})},3937:(e,t,n)=>{"use strict";n.d(t,{A:()=>o});var s=n(1585),r=n(5441),a=n(8189),i=n(5119);const o=(0,n(929).op)({unique_:function(e,t=0){const n=(0,a.YT)(e,"x","unique","string_or_numeric");(0,i.vA)(n.rank>0,()=>"The input tensor must be at least 1D");const o={x:n},l={axis:t},[u,c]=s.T2.runKernel(r.EwU,o,l);return{values:u,indices:c}}})},4010:(e,t,n)=>{"use strict";n.d(t,{R:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({log_:function(e){const t={x:(0,a.YT)(e,"x","log","float32")};return s.T2.runKernel(r.tG8,t)}})},4027:(e,t,n)=>{"use strict";n.d(t,{O:()=>a});var s=n(8189),r=n(9171);function a(e,t,n){const a=(0,s.MZ)(e,n);return(0,r.Q)(e,t,a,n)}},4268:(e,t,n)=>{"use strict";n.d(t,{t:()=>o});var s=n(1585),r=n(5441),a=n(8189),i=n(5119);const o=(0,n(929).op)({stack_:function(e,t=0){const n=(0,a.j1)(e,"tensors","stack","string_or_numeric");i.vA(n.length>=1,()=>"Pass at least one tensor to tf.stack"),n.length>0&&i.vA(t<=n[0].rank,()=>"Axis must be <= rank of the tensor");const o=n,l={axis:t};return s.T2.runKernel(r.mM$,o,l)}})},4339:(e,t,n)=>{"use strict";n.d(t,{X:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({argMin_:function(e,t=0){const n={x:(0,a.YT)(e,"x","argMin")},i={axis:t};return s.T2.runKernel(r.p_m,n,i)}})},4394:(e,t,n)=>{"use strict";n.d(t,{N:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({prelu_:function(e,t){const n={x:(0,a.YT)(e,"x","prelu"),alpha:(0,a.YT)(t,"alpha","prelu")};return s.T2.runKernel(r.Ncv,n)}})},4411:(e,t,n)=>{"use strict";n.d(t,{Y:()=>r});var s=n(448);function r(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const r=(0,s.r)(e,"int32"),a=(0,s.r)([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const s=r.indexToLoc(n[t]),i=t*e.length;a.values.set(s,i)}return a.toTensor()}},4530:()=>{},4703:(e,t,n)=>{"use strict";var s;n.d(t,{i:()=>s}),function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(s||(s={}))},4711:(e,t,n)=>{"use strict";n.d(t,{v:()=>u});var s=n(1585),r=n(5441),a=n(8189),i=n(5119),o=n(929),l=n(2302);const u=(0,o.op)({resizeBilinear_:function(e,t,n=!1,o=!1){const u=(0,a.YT)(e,"images","resizeBilinear");i.vA(3===u.rank||4===u.rank,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${u.rank}.`),i.vA(2===t.length,()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`),i.vA(!1===o||!1===n,()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");let c=u,d=!1;3===u.rank&&(d=!0,c=(0,l.t)(u,[1,u.shape[0],u.shape[1],u.shape[2]]));const[]=t,h={images:c},p={alignCorners:n,halfPixelCenters:o,size:t},f=s.T2.runKernel(r.hgw,h,p);return d?(0,l.t)(f,[f.shape[1],f.shape[2],f.shape[3]]):f}})},4801:function(e,t,n){var s;!function(r,a,i){var o,l=256,u=i.pow(l,6),c=i.pow(2,52),d=2*c,h=255;function p(e,t,n){var s=[],h=y(g((t=1==t?{entropy:!0}:t||{}).entropy?[e,b(a)]:null==e?function(){try{var e;return o&&(e=o.randomBytes)?e=e(l):(e=new Uint8Array(l),(r.crypto||r.msCrypto).getRandomValues(e)),b(e)}catch(e){var t=r.navigator,n=t&&t.plugins;return[+new Date,r,n,r.screen,b(a)]}}():e,3),s),p=new f(s),x=function(){for(var e=p.g(6),t=u,n=0;e<c;)e=(e+n)*l,t*=l,n=p.g(1);for(;e>=d;)e/=2,t/=2,n>>>=1;return(e+n)/t};return x.int32=function(){return 0|p.g(4)},x.quick=function(){return p.g(4)/4294967296},x.double=x,y(b(p.S),a),(t.pass||n||function(e,t,n,s){return s&&(s.S&&m(s,p),e.state=function(){return m(p,{})}),n?(i.random=e,t):e})(x,h,"global"in t?t.global:this==i,t.state)}function f(e){var t,n=e.length,s=this,r=0,a=s.i=s.j=0,i=s.S=[];for(n||(e=[n++]);r<l;)i[r]=r++;for(r=0;r<l;r++)i[r]=i[a=h&a+e[r%n]+(t=i[r])],i[a]=t;(s.g=function(e){for(var t,n=0,r=s.i,a=s.j,i=s.S;e--;)t=i[r=h&r+1],n=n*l+i[h&(i[r]=i[a=h&a+t])+(i[a]=t)];return s.i=r,s.j=a,n})(l)}function m(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function g(e,t){var n,s=[],r=typeof e;if(t&&"object"==r)for(n in e)try{s.push(g(e[n],t-1))}catch(e){}return s.length?s:"string"==r?e:e+"\0"}function y(e,t){for(var n,s=e+"",r=0;r<s.length;)t[h&r]=h&(n^=19*t[h&r])+s.charCodeAt(r++);return b(t)}function b(e){return String.fromCharCode.apply(0,e)}if(y(i.random(),a),e.exports){e.exports=p;try{o=n(1234)}catch(e){}}else void 0===(s=function(){return p}.call(t,n,t,e))||(e.exports=s)}("undefined"!=typeof self?self:this,[],Math)},4826:(e,t,n)=>{"use strict";n.d(t,{V:()=>o});var s=n(1585),r=n(5441),a=n(8189),i=n(5119);const o=(0,n(929).op)({tile_:function(e,t){const n=(0,a.YT)(e,"x","tile","string_or_numeric");i.vA(n.rank===t.length,()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`);const o={x:n},l={reps:t};return s.T2.runKernel(r.FAs,o,l)}})},4881:(e,t,n)=>{"use strict";n.d(t,{p:()=>r});var s=n(2596);const r=(0,n(929).op)({euclideanNorm_:function(e,t=null,n=!1){return(0,s.x)(e,"euclidean",t,n)}})},4888:(e,t,n)=>{"use strict";n.d(t,{t:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({abs_:function(e){const t=(0,a.YT)(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return s.T2.runKernel(r.$zE,e)}{const e={x:t};return s.T2.runKernel(r.ljI,e)}}})},4969:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assertParamsValid:()=>i,computeFlatOffset:()=>x,computeOutShape:()=>l,getNormalizedAxes:()=>h,isSliceContinous:()=>b,maskToAxes:()=>o,parseSliceParams:()=>v,sliceInfo:()=>w,startForAxis:()=>g,startIndicesWithElidedDims:()=>p,stopForAxis:()=>y,stopIndicesWithElidedDims:()=>f,stridesForAxis:()=>m,stridesWithElidedDims:()=>u});var s=n(5119);const r=-2,a=-1;function i(e,t,n){const r=e.shape.length;s.vA(r===t.length,()=>`Error in slice${r}D: Length of begin ${t} must match the rank of the array (${r}).`),s.vA(r===n.length,()=>`Error in slice${r}D: Length of size ${n} must match the rank of the array (${r}).`);for(let a=0;a<r;++a)s.vA(t[a]+n[a]<=e.shape[a],()=>`Error in slice${r}D: begin[${a}] + size[${a}] (${t[a]+n[a]}) would overflow input.shape[${a}] (${e.shape[a]})`)}function o(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function l(e,t,n){const s=[];for(let r=0;r<e.length;r++)s[r]=Math.ceil((t[r]-e[r])/n[r]);return s}function u(e,t,n,s){const r=[...e];for(let e=r.length;e<s.length;e++)r.push(1);for(let e=0;e<n;e++)0===e?r[t]=1:(r.splice(t,0,1),r.pop());return r}function c(e,t,n){return n<=e?n:n-(t-1)}function d(e,t){const n=[];for(let s=0;s<e;s++)n.push(t+s);return n}function h(e,t,n,s,r,a,i,o,l){const c=e.length;let d=new Array(c),h=new Array(c),b=new Array(c);if(t.length&&n>0){const l=t[0],c=n+1;d=p(i,l,c,s,e),h=f(o,l,c,r,e),b=u(a,l,c,e)}else for(let t=0;t<c;t++)d[t]=g(i,s,a,e,t,l),h[t]=y(o,r,a,e,t,l),b[t]=m(a,t,l);return{begin:d,end:h,strides:b}}function p(e,t,n,s,r){const a=[...r],i=d(n,t);for(let r=0;r<a.length;r++)if(i.indexOf(r)>-1)a[r]=0;else{const i=c(t,n,r);let o=s[i];e&1<<i&&(o=0),a[r]=o}return a}function f(e,t,n,r,a){const i=[...a],o=d(n,t);for(let s=0;s<i.length;s++)if(o.indexOf(s)>-1)i[s]=Number.MAX_SAFE_INTEGER;else{const a=c(t,n,s);let o=r[a];e&1<<a&&(o=Number.MAX_SAFE_INTEGER),i[s]=o}for(let e=0;e<i.length;e++){const t=a[e];i[e]<0&&(i[e]+=t),i[e]=s.qE(0,i[e],a[e])}return i}function m(e,t,n){let s=e[t];return(n&1<<t||null==s)&&(s=1),s}function g(e,t,n,r,a,i){let o=t[a];const l=n[a]||1;(e&1<<a||i&1<<a||null==o)&&(o=l>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const u=r[a];return o<0&&(o+=u),o=s.qE(0,o,u-1),o}function y(e,t,n,r,a,i){let o=t[a];const l=n[a]||1;(e&1<<a||i&1<<a||null==o)&&(o=l>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const u=r[a];return o<0&&(o+=u),o=l>0?s.qE(0,o,u):s.qE(-1,o,u-1),o}function b(e,t,n){let s=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){s=e;break}for(let r=s+1;r<n.length;r++)if(t[r]>0||n[r]!==e[r])return!1;return!0}function x(e,t){let n=e.length>0?e[e.length-1]:1;for(let s=0;s<e.length-1;s++)n+=e[s]*t[s];return n}function v(e,t,n){let r;const a=e.shape.length;let i;return r="number"==typeof t?[t,...new Array(a-1).fill(0)]:t.length<a?t.concat(new Array(a-t.length).fill(0)):t.slice(),r.forEach(e=>{s.vA(-1!==e,()=>"slice() does not support negative begin indexing.")}),i=null==n?new Array(a).fill(-1):"number"==typeof n?[n,...new Array(a-1).fill(-1)]:n.length<a?n.concat(new Array(a-n.length).fill(-1)):n,i=i.map((t,n)=>t>=0?t:(s.vA(-1===t,()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`),e.shape[n]-r[n])),[r,i]}function w(e,t,n,s,i,o,l,u,c){let d;if(null==s?(d=new Array(t.length),d.fill(1)):d=s,null!=l&&l&l-1)throw new Error("Multiple ellipses in slice is not allowed.");let h=!1;const p={dims:d.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:n.slice(),strides:d.slice(),beginMask:i,endMask:o,ellipsisMask:l,newAxisMask:u,shrinkAxisMask:c};for(let e=0;e<p.dims;e++)h&&1<<e&u&&p.numAddAxisAfterEllipsis++,1<<e&l&&(h=!0);h||(p.ellipsisMask|=1<<p.dims,p.dims++);const f={dims:e.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function(e,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let n=0;t.beginValid=null!=e.begin,t.endValid=null!=e.end,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let s=0;s<e.dims;s++)if(1<<s&e.ellipsisMask){const r=Math.min(t.dims-(e.dims-s)+1+e.numAddAxisAfterEllipsis,t.dims);for(;n<r;n++)t.begin[n]=0,t.end[n]=0,t.strides[n]=1,t.beginMask|=1<<n,t.endMask|=1<<n,t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[n]=s}else if(1<<s&e.newAxisMask)t.finalShapeGatherIndices.push(r),t.finalShapeGatherIndicesSparse.push(-1);else{if(n===t.begin.length)throw Error(`Index out of range using input dim ${n}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=e.begin&&(t.begin[n]=e.begin[s]),null!=e.end&&(t.end[n]=e.end[s]),t.strides[n]=e.strides[s],e.beginMask&1<<s&&(t.beginMask|=1<<n),e.endMask&1<<s&&(t.endMask|=1<<n),e.shrinkAxisMask&1<<s?(t.finalShapeGatherIndices.push(a),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<n):(t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(s)),t.inputShapeGatherIndicesSparse[n]=s,n++}}(p,f);let m=!0,g=!0,y=!0;const b=[],x=[];for(let t=0;t<e.length;++t){if(0===f.strides[t])throw Error(`strides[${t}] must be non-zero`);const n=!!(f.shrinkAxisMask&1<<t),s=e[t];if(-1===s){b.push(n?1:-1);continue}const r=[f.beginMask&1<<t,f.endMask&1<<t],a=[f.strides[t]>0?0:-1,f.strides[t]>0?s:s-1];if(n&&f.strides[t]<=0)throw Error("only stride 1 allowed on non-range indexing.");y=y&&1===f.strides[t];const i=!!(f.beginMask&1<<t&&f.endMask&1<<t);if(f.beginValid&&f.endValid){if(n){const e=f.begin[t]<0?s+f.begin[t]:f.begin[t];if(f.begin[t]=e,f.end[t]=f.begin[t]+1,e<0||e>=s)throw Error(`slice index ${f.begin[t]} of dimension ${t} out of bounds.`)}else f.begin[t]=k(f.begin[t],0,f.strides[t],s,r,a),f.end[t]=k(f.end[t],1,f.strides[t],s,r,a);const e=1===f.strides[t]&&0===f.begin[t]&&f.end[t]===s;m=m&&e,g=g&&(0===t&&1===f.strides[t]||e)}else m=m&&1===f.strides[t]&&i,g=g&&(0===t&&1===f.strides[t]||i);let o,l=!1;if(f.beginValid&&f.endValid?(o=f.end[t]-f.begin[t],l=!0):n?(o=1,l=!0):i&&s>=0&&(o=f.strides[t]<0?-s:s,l=!0),l){let e;e=0===o||o<0!=f.strides[t]<0?0:Math.trunc(o/f.strides[t])+(o%f.strides[t]!==0?1:0),b.push(e)}else b.push(-1)}for(let e=0;e<f.finalShapeGatherIndices.length;++e){const t=f.finalShapeGatherIndices[e];t>=0?x.push(b[t]):t===r&&x.push(1)}return{finalShapeSparse:x.filter((e,t)=>f.finalShapeGatherIndices[t]!==r),finalShape:x,isIdentity:m,sliceDim0:g,isSimpleSlice:y,begin:f.begin,end:f.end,strides:f.strides}}function k(e,t,n,s,r,a){if(r[t])return n>0?a[t]:a[t+1&1];{const t=e<0?s+e:e;return t<a[0]?a[0]:t>a[1]?a[1]:t}}},5030:(e,t,n)=>{"use strict";n.d(t,{x:()=>l});var s=n(1585),r=n(5441),a=n(8189),i=n(5119),o=n(125);const l=(0,n(929).op)({concat_:function(e,t=0){(0,i.vA)(e.length>=1,()=>"Pass at least one tensor to concat");const n=(0,a.j1)(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach(e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)}),1===n.length)return(0,o.o)(n[0]);const l=n,u={axis:t};return s.T2.runKernel(r.$dB,l,u)}})},5040:(e,t,n)=>{"use strict";n.d(t,{n:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({imag_:function(e){const t={input:(0,a.YT)(e,"input","imag")};return s.T2.runKernel(r.dv8,t)}})},5062:(e,t,n)=>{"use strict";n.r(t),n.d(t,{GraphModel:()=>He,deregisterOp:()=>E,loadGraphModel:()=>je,loadGraphModelSync:()=>qe,registerOp:()=>C,version_converter:()=>Ye});var s={};n.r(s),n.d(s,{json:()=>L});var r={};n.r(r),n.d(r,{json:()=>P});var a={};n.r(a),n.d(a,{json:()=>B});var i={};n.r(i),n.d(i,{json:()=>W});var o={};n.r(o),n.d(o,{json:()=>V});var l={};n.r(l),n.d(l,{json:()=>U});var u={};n.r(u),n.d(u,{json:()=>G});var c={};n.r(c),n.d(c,{json:()=>H});var d={};n.r(d),n.d(d,{json:()=>j});var h={};n.r(h),n.d(h,{json:()=>q});var p={};n.r(p),n.d(p,{json:()=>Y});var f={};n.r(f),n.d(f,{json:()=>K});var m={};n.r(m),n.d(m,{json:()=>X});var g={};n.r(g),n.d(g,{json:()=>Z});var y={};n.r(y),n.d(y,{json:()=>Q});var b={};n.r(b),n.d(b,{json:()=>J});var x={};n.r(x),n.d(x,{json:()=>ee});var v={};n.r(v),n.d(v,{json:()=>te});var w={};n.r(w),n.d(w,{json:()=>ne});var k={};n.r(k),n.d(k,{OP_SCOPE_SUFFIX:()=>xe.BTT,abs:()=>xe.tnl,acos:()=>xe.HQu,acosh:()=>xe.FqL,add:()=>xe.WQq,addN:()=>xe.QiD,all:()=>xe.Q7R,any:()=>xe.bzn,argMax:()=>xe.FLi,argMin:()=>xe.XRg,asin:()=>xe.qRo,asinh:()=>xe.yHs,atan:()=>xe.rYl,atan2:()=>xe.FPz,atanh:()=>xe.rfv,avgPool:()=>xe.$jT,avgPool3d:()=>xe.sub,basicLSTMCell:()=>xe.lZX,batchNorm:()=>xe.$v7,batchNorm2d:()=>xe.BFc,batchNorm3d:()=>xe.kSi,batchNorm4d:()=>xe.T5N,batchToSpaceND:()=>xe.GTe,bincount:()=>xe.HbZ,bitwiseAnd:()=>xe.vjT,booleanMaskAsync:()=>xe.ftb,broadcastArgs:()=>xe.ROE,broadcastTo:()=>xe.hOW,buffer:()=>xe.ra8,cast:()=>xe.wgE,ceil:()=>xe.mkO,clipByValue:()=>xe.zQh,clone:()=>xe.o8B,complex:()=>xe.faB,concat:()=>xe.xWs,concat1d:()=>xe.I1m,concat2d:()=>xe.RPU,concat3d:()=>xe.O5O,concat4d:()=>xe.P1l,conv1d:()=>xe.kA9,conv2d:()=>xe.Xtf,conv2dTranspose:()=>xe.wX9,conv3d:()=>xe.IPL,conv3dTranspose:()=>xe.jIJ,cos:()=>xe.gnS,cosh:()=>xe.yIG,cosineWindow:()=>xe._jP,cumprod:()=>xe.Lp0,cumsum:()=>xe.rCv,denseBincount:()=>xe.aOp,depthToSpace:()=>xe.Rj8,depthwiseConv2d:()=>xe.Gl3,diag:()=>xe.smy,dilation2d:()=>xe.X7t,div:()=>xe.y4m,divNoNan:()=>xe.ek5,dot:()=>xe.Omf,dropout:()=>xe.EZY,einsum:()=>xe._3C,elu:()=>xe.Pqc,enclosingPowerOfTwo:()=>xe.FJY,ensureShape:()=>xe.QP2,equal:()=>xe.LCg,erf:()=>xe.Y12,euclideanNorm:()=>xe.p4S,exp:()=>xe.oNF,expandDims:()=>xe.UG6,expm1:()=>xe.IYd,eye:()=>xe.y5U,fft:()=>xe.hVP,fill:()=>xe.GSj,floor:()=>xe.RIf,floorDiv:()=>xe.wh_,fused:()=>xe.cZk,gather:()=>xe.kgh,gatherND:()=>xe.SY9,greater:()=>xe.rhj,greaterEqual:()=>xe.DQN,ifft:()=>xe.KGM,imag:()=>xe.ngS,image:()=>xe.Slp,inTopKAsync:()=>xe.U4u,irfft:()=>xe.ggX,isFinite:()=>xe.MIs,isInf:()=>xe.EN4,isNaN:()=>xe.yrW,leakyRelu:()=>xe.H8d,less:()=>xe.M7h,lessEqual:()=>xe.InN,linalg:()=>xe.mPL,linspace:()=>xe.mT8,localResponseNormalization:()=>xe.Kgs,log:()=>xe.Rm2,log1p:()=>xe.Kko,logSigmoid:()=>xe.nqI,logSoftmax:()=>xe.HPB,logSumExp:()=>xe.VZ,logicalAnd:()=>xe.n76,logicalNot:()=>xe.NSZ,logicalOr:()=>xe.ztW,logicalXor:()=>xe.rxB,losses:()=>xe.YYh,lowerBound:()=>xe.yzS,matMul:()=>xe.NoW,max:()=>xe.T9B,maxPool:()=>xe.jgi,maxPool3d:()=>xe.NYV,maxPoolWithArgmax:()=>xe.RO,maximum:()=>xe.PhQ,mean:()=>xe.i2o,meshgrid:()=>xe.OYQ,min:()=>xe.jkA,minimum:()=>xe.BpO,mirrorPad:()=>xe.FFZ,mod:()=>xe.ziu,moments:()=>xe.Clk,movingAverage:()=>xe.CRk,mul:()=>xe.lKK,multiRNNCell:()=>xe.YDF,multinomial:()=>xe.OjQ,neg:()=>xe.HZy,norm:()=>xe.xbf,notEqual:()=>xe.Ec,oneHot:()=>xe.Mw0,ones:()=>xe.SaS,onesLike:()=>xe.P61,op:()=>xe.op,outerProduct:()=>xe.X4o,pad:()=>xe.eVF,pad1d:()=>xe.BZs,pad2d:()=>xe.grY,pad3d:()=>xe.XHu,pad4d:()=>xe.WLX,pool:()=>xe.dzn,pow:()=>xe.n7C,prelu:()=>xe.NsG,print:()=>xe.yyV,prod:()=>xe._eU,raggedGather:()=>xe.whe,raggedRange:()=>xe.iyU,raggedTensorToTensor:()=>xe.Q0_,rand:()=>xe._9M,randomGamma:()=>xe.pR9,randomNormal:()=>xe.FE$,randomStandardNormal:()=>xe.m0H,randomUniform:()=>xe.YeY,randomUniformInt:()=>xe.HYA,range:()=>xe.y17,real:()=>xe.xav,reciprocal:()=>xe.VOZ,relu:()=>xe.VVh,relu6:()=>xe.j__,reshape:()=>xe.tQQ,reverse:()=>xe.BEg,reverse1d:()=>xe.QD2,reverse2d:()=>xe.LMr,reverse3d:()=>xe.I2l,reverse4d:()=>xe.JYU,rfft:()=>xe.z8$,round:()=>xe.LIG,rsqrt:()=>xe.Z$r,scalar:()=>xe.d_2,scatterND:()=>xe.NFr,searchSorted:()=>xe.sZg,selu:()=>xe.WfX,separableConv2d:()=>xe.wdz,setdiff1dAsync:()=>xe.F12,sigmoid:()=>xe.ry7,sign:()=>xe._SZ,signal:()=>xe.vPA,sin:()=>xe.F8e,sinh:()=>xe.L0l,slice:()=>xe.dik,slice1d:()=>xe.Q$M,slice2d:()=>xe.zAd,slice3d:()=>xe.wck,slice4d:()=>xe.R0O,softmax:()=>xe.Vs9,softplus:()=>xe.lw0,spaceToBatchND:()=>xe.eDJ,sparse:()=>xe.lMo,sparseToDense:()=>xe.Zhr,spectral:()=>xe.lOn,split:()=>xe.lDo,sqrt:()=>xe.RZD,square:()=>xe.EwI,squaredDifference:()=>xe.Pbu,squeeze:()=>xe.r2V,stack:()=>xe.t$z,step:()=>xe.PMw,stridedSlice:()=>xe.Ym9,string:()=>xe.YjP,sub:()=>xe.jbE,sum:()=>xe.czq,tan:()=>xe.Mlm,tanh:()=>xe.ymU,tensor:()=>xe.OEK,tensor1d:()=>xe.tGX,tensor2d:()=>xe.KtR,tensor3d:()=>xe.$_$,tensor4d:()=>xe.g9W,tensor5d:()=>xe.Lpo,tensor6d:()=>xe.yxw,tensorScatterUpdate:()=>xe.NNh,tile:()=>xe.Vsq,topk:()=>xe.rfw,transpose:()=>xe.mgz,truncatedNormal:()=>xe.efE,unique:()=>xe.AmM,unsortedSegmentSum:()=>xe.zAU,unstack:()=>xe.K$i,upperBound:()=>xe.rni,variable:()=>xe.bvq,where:()=>xe._M9,whereAsync:()=>xe.YJN,zeros:()=>xe.Ul9,zerosLike:()=>xe.POl});var T,S,N=n(5838);(0,N.env)().registerFlag("KEEP_INTERMEDIATE_TENSORS",()=>!1,e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")}),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_QINT16=15]="DT_QINT16",e[e.DT_QUINT16=16]="DT_QUINT16",e[e.DT_UINT16=17]="DT_UINT16",e[e.DT_COMPLEX128=18]="DT_COMPLEX128",e[e.DT_HALF=19]="DT_HALF",e[e.DT_RESOURCE=20]="DT_RESOURCE",e[e.DT_VARIANT=21]="DT_VARIANT",e[e.DT_UINT32=22]="DT_UINT32",e[e.DT_UINT64=23]="DT_UINT64",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",e[e.DT_QINT16_REF=115]="DT_QINT16_REF",e[e.DT_QUINT16_REF=116]="DT_QUINT16_REF",e[e.DT_UINT16_REF=117]="DT_UINT16_REF",e[e.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",e[e.DT_HALF_REF=119]="DT_HALF_REF",e[e.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",e[e.DT_VARIANT_REF=121]="DT_VARIANT_REF",e[e.DT_UINT32_REF=122]="DT_UINT32_REF",e[e.DT_UINT64_REF=123]="DT_UINT64_REF"}(T||(T={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(S||(S={}));const I={};function C(e,t){const n={tfOpName:e,category:"custom",inputs:[],attrs:[],customExecutor:t};I[e]=n}function A(e){return I[e]}function E(e){delete I[e]}function $(e,t,n,s,r){const a=t.inputParams[e];if(a&&void 0!==a.inputIndexStart){const e=a.inputIndexStart,i=0===a.inputIndexEnd?void 0:void 0===a.inputIndexEnd?e+1:a.inputIndexEnd,o=e<0?t.inputNames.length+e:e;if("tensor"===a.type)return R(t.inputNames[o],n,s,r);if("tensors"===a.type){const a=t.inputs.slice(e,i);return t.inputNames.slice(e,i).filter((e,t)=>{var n;return"NoOp"!==(null===(n=a[t])||void 0===n?void 0:n.op)}).map(e=>R(e,n,s,r))}const l=R(t.inputNames[o],n,s,r),u=l.dataSync();return"number"===a.type?u[0]:N.util.toNestedArray(l.shape,u)}const i=t.attrParams[e];return i&&i.value}function R(e,t,n,s){const[r,a]=O(e,n);if(null!=s){const e=s.getHashTableHandleByName(r);if(null!=e)return e}const i=n.currentContextIds.find(e=>!!t[F(r,e)]);return void 0!==i?t[F(r,i)][a]:void 0}function _(e,t,n){return t[F(e,n.currentContextId)]}function D(e,t){const[n,s,r]=O(e,t);return[F(n,t&&t.currentContextId),s,r]}function F(e,t){return t?`${e}-${t}`:e}function O(e,t){if(""===e)return["",0,void 0];const n=null!=t&&null!=t.parseNodeNameCache;if(n){const n=t.parseNodeNameCache.get(e);if(null!=n)return n}const s=e.split(":");let r;if(1===s.length)r=[e,0,void 0];else{const e=s[0],t=3===s.length?s[1]:void 0;r=[e,Number(s[s.length-1]),t]}return n&&t.parseNodeNameCache.set(e,r),r}function M(e,t,n){let s=$("pad",e,t,n);if("explicit"===s){s=$("explicitPaddings",e,t,n);const r=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)r[e][0]=s[2*e],r[e][1]=s[2*e+1];return r}return s}function z(e){return e.kept?e:(0,N.clone)(e)}const L=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],P=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsFinite",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsInf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],B=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}],W=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],V=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniformInt",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number"},{tfName:"maxval",name:"maxval",type:"number"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],U=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],G=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],H=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],j=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"InitializeTable",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]},{tfOpName:"InitializeTableV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]}],q=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}],Y=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BitwiseAnd",category:"logical",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}]}],K=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"MatrixBandPart",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"numLower",type:"tensor"},{start:1,name:"numUpper",type:"tensor"}]}],X=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]}],Z=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],Q=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]},{tfOpName:"TensorScatterUpdate",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"values",type:"tensor"}]}],J=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}],ee=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],te=[{tfOpName:"StaticRegexReplace",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"pattern",name:"pattern",type:"string"},{tfName:"rewrite",name:"rewrite",type:"string"},{tfName:"replace_global",name:"replaceGlobal",type:"bool"}]},{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}],ne=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"EnsureShape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];class se{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[s,r,a,i,o,l,u,c,d,h,p,f,m,g,y,b,x,v,w].map(e=>e.json));this.opMappers=e.reduce((e,t)=>(e[t.tfOpName]=t,e),{})}transformGraph(e,t={}){const n=e.node,s=[],r=[],a=[],i=n.reduce((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?s.push(e[t.name]):"Const"===t.op?r.push(e[t.name]):null!=t.input&&0!==t.input.length||a.push(e[t.name]),e),{});let o=[];const l=[];let u={},c={};null!=t&&(u=this.mapSignatureEntries(t.inputs),c=this.mapSignatureEntries(t.outputs));const d=Object.keys(i);d.forEach(e=>{const t=i[e];t.inputNames.forEach((e,n)=>{const[s,,r]=D(e),a=i[s];if(null!=a.outputs){const e=a.outputs.indexOf(r);if(-1!==e){const r=`${s}:${e}`;t.inputNames[n]=r}}t.inputs.push(a),a.children.push(t)})}),0===Object.keys(c).length?d.forEach(e=>{const t=i[e];0===t.children.length&&l.push(t)}):Object.keys(c).forEach(e=>{const[t]=D(e),n=i[t];null!=n&&(n.signatureKey=c[e],l.push(n))}),Object.keys(u).length>0?Object.keys(u).forEach(e=>{const[t]=D(e),n=i[t];n&&(n.signatureKey=u[e],o.push(n))}):o=s;let h={};null!=e.library&&null!=e.library.function&&(h=e.library.function.reduce((e,t)=>(e[t.signature.name]=this.mapFunction(t),e),{}));const p={nodes:i,inputs:o,outputs:l,weights:r,placeholders:s,signature:t,functions:h};return a.length>0&&(p.initNodes=a),p}mapSignatureEntries(e){return Object.keys(e||{}).reduce((t,n)=>(t[e[n].name]=n,t),{})}mapNode(e){const t=A(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map(e=>e.startsWith("^")?e.slice(1):e),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return null!=t.inputs&&(n.inputParams=t.inputs.reduce((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce((t,n)=>{const s=n.type;let r;switch(n.type){case"string":r=ae(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=ae(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":r=me(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=me(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":r=oe(e.attr,n.tfName,n.defaultValue||0),void 0===r&&n.tfDeprecatedName&&(r=oe(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":r=fe(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=fe(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":r=ie(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=ie(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":r=ye(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=ye(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":r=pe(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=pe(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":r=ge(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=ge(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":r=ce(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=ce(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":r=de(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=de(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":r=ue(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=ue(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:r,type:s},t},{})),n}mapFunction(e){const t=e.nodeDef,n=[];let s={};null!=t&&(s=t.reduce((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e),{}));const r=[],a=[];e.signature.inputArg.forEach(e=>{const[t]=D(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:le(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,r.push(n),s[t]=n}),Object.keys(s).forEach(e=>{const t=s[e];t.inputNames.forEach((e,n)=>{const[r,,a]=D(e),i=s[r];if(null!=i.outputs){const e=i.outputs.indexOf(a);if(-1!==e){const s=`${r}:${e}`;t.inputNames[n]=s}}t.inputs.push(i),i.children.push(t)})});const i=e.ret;e.signature.outputArg.forEach(e=>{const[t,n]=D(i[e.name]),r=s[t];null!=r&&(r.defaultOutput=n,a.push(r))});const o=this.mapArgsToSignature(e);return{nodes:s,inputs:r,outputs:a,weights:n,placeholders:[],signature:o}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e),{}),outputs:e.signature.outputArg.reduce((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function re(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=(0,N.env)().global;if(void 0!==t.atob)return t.atob(e);if("undefined"!=typeof Buffer)return new Buffer(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function ae(e,t,n,s=!1){const r=e[t];return null!=r?re(r.s,s):n}function ie(e,t,n){const s=e[t];return s?s.b:n}function oe(e,t,n){const s=e[t]||{},r=null!=s.i?s.i:null!=s.f?s.f:n;return"number"==typeof r?r:parseInt(r,10)}function le(e){switch("string"==typeof e&&(e=T[e]),e){case T.DT_FLOAT:case T.DT_HALF:return"float32";case T.DT_INT32:case T.DT_INT64:case T.DT_INT8:case T.DT_UINT8:return"int32";case T.DT_BOOL:return"bool";case T.DT_DOUBLE:return"float32";case T.DT_STRING:return"string";case T.DT_COMPLEX64:case T.DT_COMPLEX128:return"complex64";default:return null}}function ue(e,t,n){const s=e[t];return s&&s.func?s.func.name:n}function ce(e,t,n){const s=e[t];return s&&s.type?le(s.type):n}function de(e,t,n){const s=e[t];return s&&s.list&&s.list.type?s.list.type.map(e=>le(e)):n}function he(e){if(!e.unknownRank)return null!=e.dim?e.dim.map(e=>"number"==typeof e.size?e.size:parseInt(e.size,10)):[]}function pe(e,t,n){const s=e[t];return s&&s.shape?he(s.shape):n}function fe(e,t,n){const s=e[t];return s?((s.list.f&&s.list.f.length?s.list.f:s.list.i)||[]).map(e=>"number"==typeof e?e:parseInt(e,10)):n}function me(e,t,n,s=!1){const r=e[t];return r&&r.list&&r.list.s?r.list.s.map(e=>re(e,s)):n}function ge(e,t,n){const s=e[t];return s&&s.list&&s.list.shape?s.list.shape.map(e=>he(e)):n}function ye(e,t,n){const s=e[t];return s&&s.list&&s.list.b?s.list.b:n}class be{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map(e=>this.getInput(e)),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce((e,t)=>(e[t]=this.getAttr(t),e),{}))}getInput(e){return R(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return R(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return oe(this.node.rawAttrs,e,t);if(null!=n.s)return ae(this.node.rawAttrs,e,t);if(null!=n.b)return ie(this.node.rawAttrs,e,t);if(null!=n.shape)return pe(this.node.rawAttrs,e,t);if(null!=n.type)return ce(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return fe(this.node.rawAttrs,e,t);if(null!=n.list.s)return me(this.node.rawAttrs,e,t);if(null!=n.list.shape)return ge(this.node.rawAttrs,e,t);if(null!=n.list.b)return ye(this.node.rawAttrs,e,t);if(null!=n.list.type)return de(this.node.rawAttrs,e,t)}return t}}var xe=n(7270);function ve(e,t,n=""){if("number"!=typeof e&&"number"!=typeof t){N.util.assert(e.length===t.length,()=>n+` Shapes ${e} and ${t} must match`);for(let s=0;s<e.length;s++){const r=e[s],a=t[s];N.util.assert(r<0||a<0||r===a,()=>n+` Shapes ${e} and ${t} must match`)}}}function we(e){return"number"!=typeof e&&!e.some(e=>e<0)}function ke(e,t,n){let s=Te(e,n);const r=!we(s);if(r&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${s}`);if(r&&t.forEach(e=>{s=Te(e.shape,s)}),!we(s))throw new Error(`Non-fully-defined elementShape: ${s}`);return s}function Te(e,t){if("number"==typeof e)return t;if("number"==typeof t)return e;if(e.length!==t.length)throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`);const n=[];for(let s=0;s<e.length;++s){const r=e[s],a=t[s];if(r>=0&&a>=0&&r!==a)throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`);n[s]=r>=0?r:a}return n}class Se{constructor(e,t,n,s,r,a,i){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=s,this.identicalElementShapes=r,this.dynamicSize=a,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=(0,N.scalar)(0),(0,N.keep)(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach(t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()}),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map(e=>this.read(e))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),ve(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,(0,N.keep)(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach((e,n)=>this.write(e,t[n]))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return(0,N.tensor)([],[0].concat(this.elementShape));const n=this.readMany(e);return ve(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),(0,N.stack)(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return(0,N.tensor)([],[0].concat(this.elementShape));const t=[];for(let e=0;e<this.size();e++)t.push(e);const n=this.readMany(t);return ve(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),(0,N.concat)(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,(0,N.unstack)(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const s=e.map(e=>(n+=e,n));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const r=0===n?0:t.size/n,a=[];(0,N.tidy)(()=>{t=(0,N.reshape)(t,[1,n,r]);for(let n=0;n<e.length;++n){const i=[0,0===n?0:s[n-1],0],o=[1,e[n],r];a[n]=(0,N.reshape)((0,N.slice)(t,i,o),this.elementShape)}return a});const i=[];for(let t=0;t<e.length;t++)i[t]=t;this.writeMany(i,a)}}class Ne{get id(){return this.idTensor.id}constructor(e,t,n,s=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach(e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);ve(t,e.shape,"TensorList shape mismatch: "),(0,N.keep)(e)}),this.idTensor=(0,N.scalar)(0),this.maxNumElements=s,(0,N.keep)(this.idTensor)}copy(){return new Ne([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach(t=>{null!=e&&e.has(t.id)||t.dispose()}),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);ve(e,this.elementShape,"TensorList shape mismatch: ");const s=ke(this.elementShape,this.tensors,e);return(0,N.tidy)(()=>{const e=this.tensors.map(e=>(0,N.reshape)(e,s));return(0,N.stack)(e,0)})}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=ke(this.elementShape,this.tensors,e),s=this.tensors.pop();return s.kept=!1,ve(s.shape,e,"TensorList shape mismatch: "),(0,N.reshape)(s,n)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(ve(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");(0,N.keep)(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);const t=new Ne([],this.elementShape,this.elementDtype,this.maxNumElements);t.tensors.length=e;for(let n=0;n<Math.min(this.tensors.length,e);++n)t.tensors[n]=this.tensors[n];return t}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);ve(this.tensors[e].shape,t,"TensorList shape mismatch: ");const s=ke(this.elementShape,this.tensors,t);return(0,N.reshape)(this.tensors[e],s)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);ve(this.elementShape,t.shape,"TensorList shape mismatch: "),(0,N.keep)(t),null!=this.tensors[e]&&(this.tensors[e].kept=!1),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);ve(this.elementShape,n,"TensorList shape mismatch: "),e=e.slice(0,this.size());const s=ke(this.elementShape,this.tensors,n);return 0===e.length?(0,N.tensor)([],[0].concat(s)):(0,N.tidy)(()=>{const t=e.map(e=>(0,N.reshape)(this.tensors[e],s));return(0,N.stack)(t,0)})}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);ve(this.elementShape,t,"TensorList shape mismatch: ");const n=ke(this.elementShape,this.tensors,t);return 0===this.size()?(0,N.tensor)([],[0].concat(n)):(0,N.tidy)(()=>{const e=this.tensors.map(e=>(0,N.reshape)(e,n));return(0,N.concat)(e,0)})}}function Ie(e,t,n){const[s,r]=$("fusedOps",e,t,n),a="biasadd"===s,i=!a,o="prelu"===r,l="fusedbatchnorm"===s,u=$("numArgs",e,t,n);if(a){if(o&&2!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!o&&a&&1!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(l)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const c=$("strides",e,t,n),d=M(e,t,n),h=$("dataFormat",e,t,n).toUpperCase(),p=$("dilations",e,t,n);let[f,m]=$("args",e,t,n);return i&&(m=f,f=void 0),{stride:c,pad:d,dataFormat:h,dilations:p,biasArg:f,preluArg:m,activationFunc:r,leakyreluAlpha:$("leakyreluAlpha",e,t,n)}}function Ce(e,t,n){return{boxes:$("boxes",e,t,n),scores:$("scores",e,t,n),maxOutputSize:$("maxOutputSize",e,t,n),iouThreshold:$("iouThreshold",e,t,n),scoreThreshold:$("scoreThreshold",e,t,n),softNmsSigma:$("softNmsSigma",e,t,n)}}var Ae=n(5702);class Ee{get id(){return this.handle.id}constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=(0,N.scalar)(0),this.tensorMap=new Map,(0,N.keep)(this.handle)}clearAndClose(){this.tensorMap.forEach(e=>e.dispose()),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return Ae.d(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach(e=>e.dispose()),this.tensorMap.clear(),(0,N.tidy)(()=>{const e=(0,N.unstack)(t),s=n.length,r=e.length;N.util.assert(s===r,()=>`The number of elements doesn't match, keys has ${s} elements, the values has ${r} elements.`);for(let t=0;t<s;t++){const s=n[t],r=e[t];(0,N.keep)(r),this.tensorMap.set(s,r)}return this.handle})}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return(0,N.tidy)(()=>{const e=[];for(let s=0;s<n.length;s++){const r=n[s],a=this.findWithDefault(r,t);e.push(a)}return(0,N.stack)(e)})}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}function $e(e,t,n,s,r=N.tidy){const a=((e,t,n)=>{switch(e.category){case"arithmetic":return r(()=>((e,t,n,s=k)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[s.add($("a",e,t,n),$("b",e,t,n))];case"AddN":return[s.addN($("tensors",e,t,n))];case"FloorMod":case"Mod":return[s.mod($("a",e,t,n),$("b",e,t,n))];case"Mul":return[s.mul($("a",e,t,n),$("b",e,t,n))];case"RealDiv":case"Div":return[s.div($("a",e,t,n),$("b",e,t,n))];case"DivNoNan":return[s.divNoNan($("a",e,t,n),$("b",e,t,n))];case"FloorDiv":return[s.floorDiv($("a",e,t,n),$("b",e,t,n))];case"Sub":return[s.sub($("a",e,t,n),$("b",e,t,n))];case"Minimum":return[s.minimum($("a",e,t,n),$("b",e,t,n))];case"Maximum":return[s.maximum($("a",e,t,n),$("b",e,t,n))];case"Pow":return[s.pow($("a",e,t,n),$("b",e,t,n))];case"SquaredDifference":return[s.squaredDifference($("a",e,t,n),$("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"basic_math":return r(()=>((e,t,n,s=k)=>{switch(e.op){case"Abs":case"ComplexAbs":return[s.abs($("x",e,t,n))];case"Acos":return[s.acos($("x",e,t,n))];case"Acosh":return[s.acosh($("x",e,t,n))];case"Asin":return[s.asin($("x",e,t,n))];case"Asinh":return[s.asinh($("x",e,t,n))];case"Atan":return[s.atan($("x",e,t,n))];case"Atan2":return[s.atan2($("x",e,t,n),$("y",e,t,n))];case"Atanh":return[s.atanh($("x",e,t,n))];case"Ceil":return[s.ceil($("x",e,t,n))];case"Complex":return[s.complex($("real",e,t,n),$("imag",e,t,n))];case"Cos":return[s.cos($("x",e,t,n))];case"Cosh":return[s.cosh($("x",e,t,n))];case"Elu":return[s.elu($("x",e,t,n))];case"Erf":return[s.erf($("x",e,t,n))];case"Exp":return[s.exp($("x",e,t,n))];case"Expm1":return[s.expm1($("x",e,t,n))];case"Floor":return[s.floor($("x",e,t,n))];case"Log":return[s.log($("x",e,t,n))];case"Log1p":return[s.log1p($("x",e,t,n))];case"Imag":return[s.imag($("x",e,t,n))];case"Neg":return[s.neg($("x",e,t,n))];case"Reciprocal":return[s.reciprocal($("x",e,t,n))];case"Real":return[s.real($("x",e,t,n))];case"Relu":return[s.relu($("x",e,t,n))];case"Round":return[s.round($("x",e,t,n))];case"Selu":return[s.selu($("x",e,t,n))];case"Sigmoid":return[s.sigmoid($("x",e,t,n))];case"Sin":return[s.sin($("x",e,t,n))];case"Sign":return[s.sign($("x",e,t,n))];case"Sinh":return[s.sinh($("x",e,t,n))];case"Softplus":return[s.softplus($("x",e,t,n))];case"Sqrt":return[s.sqrt($("x",e,t,n))];case"Square":return[s.square($("x",e,t,n))];case"Tanh":return[s.tanh($("x",e,t,n))];case"Tan":return[s.tan($("x",e,t,n))];case"ClipByValue":return[s.clipByValue($("x",e,t,n),$("clipValueMin",e,t,n),$("clipValueMax",e,t,n))];case"Relu6":return[s.relu6($("x",e,t,n))];case"Rsqrt":return[s.rsqrt(R(e.inputNames[0],t,n))];case"LeakyRelu":return[s.leakyRelu($("x",e,t,n),$("alpha",e,t,n))];case"Prelu":return[s.prelu($("x",e,t,n),$("alpha",e,t,n))];case"IsNan":return[s.isNaN(R(e.inputNames[0],t,n))];case"IsInf":return[s.isInf(R(e.inputNames[0],t,n))];case"IsFinite":return[s.isFinite(R(e.inputNames[0],t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"control":return(async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const s=$("thenBranch",e,t,n),r=$("elseBranch",e,t,n),a=$("cond",e,t,n),i=$("args",e,t,n);return(await a.data())[0]?n.functionMap[s].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap):n.functionMap[r].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const s=$("body",e,t,n),r=$("cond",e,t,n),a=$("args",e,t,n),i=await n.functionMap[r].executeFunctionAsync(a,n.tensorArrayMap,n.tensorListMap),o=a.map(e=>e.id);let l=await i[0].data();i.forEach(e=>{e.kept||-1!==o.indexOf(e.id)||e.dispose()});let u=a;for(;l[0];){const e=u;u=await n.functionMap[s].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);const t=u.map(e=>e.id);e.forEach(e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()});const a=await n.functionMap[r].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);l=await a[0].data(),a.forEach(e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()})}return u}case"LoopCond":return[z($("pred",e,t,n))];case"Switch":{const s=$("pred",e,t,n);let r=$("data",e,t,n);return r.kept||(r=z(r)),(await s.data())[0]?[void 0,r]:[r,void 0]}case"Merge":{const s=e.inputNames.find(e=>void 0!==R(e,t,n));return s?[z(R(s,t,n))]:void 0}case"Enter":{const s=$("frameName",e,t,n),r=$("tensor",e,t,n);return n.enterFrame(s),[z(r)]}case"Exit":{const s=$("tensor",e,t,n);return n.exitFrame(),[z(s)]}case"NextIteration":{const s=$("tensor",e,t,n);return n.nextIteration(),[z(s)]}case"TensorArrayV3":{const s=$("size",e,t,n),r=$("dtype",e,t,n),a=$("elementShape",e,t,n),i=$("dynamicSize",e,t,n),o=$("clearAfterRead",e,t,n),l=$("identicalElementShapes",e,t,n),u=$("name",e,t,n),c=new Se(u,r,s,a,l,i,o);return n.addTensorArray(c),[c.idTensor,(0,N.scalar)(1)]}case"TensorArrayWriteV3":{const s=$("tensorArrayId",e,t,n),r=$("index",e,t,n),a=$("tensor",e,t,n),i=n.getTensorArray(s.id);return i.write(r,a),[i.idTensor]}case"TensorArrayReadV3":{const s=$("tensorArrayId",e,t,n),r=$("index",e,t,n);return[n.getTensorArray(s.id).read(r)]}case"TensorArrayGatherV3":{const s=$("tensorArrayId",e,t,n),r=$("indices",e,t,n),a=$("dtype",e,t,n);return[n.getTensorArray(s.id).gather(r,a)]}case"TensorArrayScatterV3":{const s=$("tensorArrayId",e,t,n),r=$("indices",e,t,n),a=$("tensor",e,t,n),i=n.getTensorArray(s.id);return i.scatter(r,a),[i.idTensor]}case"TensorArrayConcatV3":{const s=$("tensorArrayId",e,t,n),r=n.getTensorArray(s.id),a=$("dtype",e,t,n);return[r.concat(a)]}case"TensorArraySplitV3":{const s=$("tensorArrayId",e,t,n),r=$("tensor",e,t,n),a=$("lengths",e,t,n),i=n.getTensorArray(s.id);return i.split(a,r),[i.idTensor]}case"TensorArraySizeV3":{const s=$("tensorArrayId",e,t,n),r=n.getTensorArray(s.id);return[(0,N.scalar)(r.size(),"int32")]}case"TensorArrayCloseV3":{const s=$("tensorArrayId",e,t,n),r=n.getTensorArray(s.id);return r.clearAndClose(),[r.idTensor]}case"TensorListSetItem":{const s=$("tensorListId",e,t,n),r=$("index",e,t,n),a=$("tensor",e,t,n),i=n.getTensorList(s.id);return i.setItem(r,a),[i.idTensor]}case"TensorListGetItem":{const s=$("tensorListId",e,t,n),r=$("index",e,t,n),a=$("elementShape",e,t,n),i=$("elementDType",e,t,n);return[n.getTensorList(s.id).getItem(r,a,i)]}case"TensorListScatterV2":case"TensorListScatter":{const s=$("indices",e,t,n),r=function(e,t,n,s){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const r=Math.max(...t);if(null!=s&&-1!==s&&r>=s)throw new Error(`Max index must be < array size (${r}  vs. ${s})`);const a=new Ne([],n,e.dtype,s),i=(0,N.unstack)(e,0);return t.forEach((e,t)=>{a.setItem(e,i[t])}),a}($("tensor",e,t,n),s,$("elementShape",e,t,n),$("numElements",e,t,n));return n.addTensorList(r),[r.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const s=$("elementShape",e,t,n),r=$("elementDType",e,t,n);let a;a="TensorListReserve"===e.op?"numElements":"maxNumElements";const i=$(a,e,t,n),o=function(e,t,n,s){return new Ne([],e,t,s)}(s,r,0,"TensorListReserve"===e.op?-1:i);return n.addTensorList(o),[o.idTensor]}case"TensorListGather":{const s=$("tensorListId",e,t,n),r=$("indices",e,t,n),a=$("elementShape",e,t,n),i=$("elementDType",e,t,n);return[n.getTensorList(s.id).gather(r,i,a)]}case"TensorListStack":{const s=$("tensorListId",e,t,n),r=$("elementShape",e,t,n),a=$("elementDType",e,t,n),i=$("numElements",e,t,n);return[n.getTensorList(s.id).stack(r,a,i)]}case"TensorListFromTensor":{const s=function(e,t,n){const s=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);ve(e.shape.slice(1),t,"TensorList shape mismatch: ");const r=(0,N.unstack)(e);return new Ne(r,t,s)}($("tensor",e,t,n),$("elementShape",e,t,n),$("elementDType",e,t,n));return n.addTensorList(s),[s.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{const s=$("tensorListId",e,t,n),r=n.getTensorList(s.id),a=$("dtype",e,t,n),i=$("elementShape",e,t,n);return[r.concat(a,i)]}case"TensorListPushBack":{const s=$("tensorListId",e,t,n),r=$("tensor",e,t,n),a=n.getTensorList(s.id);return a.pushBack(r),[a.idTensor]}case"TensorListPopBack":{const s=$("tensorListId",e,t,n),r=$("elementShape",e,t,n),a=$("elementDType",e,t,n);return[n.getTensorList(s.id).popBack(r,a)]}case"TensorListSplit":{const s=$("tensor",e,t,n),r=$("elementShape",e,t,n),a=function(e,t,n){let s=0;const r=t.map(e=>(s+=e,s));if(s!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${s}, and tensor's shape is: ${e.shape}`);const a=Te(e.shape.slice(1),n),i=0===s?0:e.size/s,o=(0,N.tidy)(()=>{const n=[];e=(0,N.reshape)(e,[1,s,i]);for(let s=0;s<t.length;++s){const o=[0,0===s?0:r[s-1],0],l=[1,t[s],i];n[s]=(0,N.reshape)((0,N.slice)(e,o,l),a)}return e.dispose(),n}),l=new Ne([],n,e.dtype,t.length);for(let e=0;e<o.length;e++)l.setItem(e,o[e]);return l}(s,$("lengths",e,t,n),r);return n.addTensorList(a),[a.idTensor]}case"TensorListLength":{const s=$("tensorListId",e,t,n),r=n.getTensorList(s.id);return[(0,N.scalar)(r.size(),"int32")]}case"TensorListResize":{const s=$("tensorListId",e,t,n),r=$("size",e,t,n),a=n.getTensorList(s.id).resize(r);return n.addTensorList(a),[a.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"convolution":return r(()=>((e,t,n,s=k)=>{switch(e.op){case"Conv1D":{const r=$("stride",e,t,n),a=$("pad",e,t,n),i=$("dataFormat",e,t,n).toUpperCase(),o=$("dilation",e,t,n);return[s.conv1d($("x",e,t,n),$("filter",e,t,n),r,a,i,o)]}case"Conv2D":{const r=$("strides",e,t,n),a=M(e,t,n),i=$("dataFormat",e,t,n).toUpperCase(),o=$("dilations",e,t,n);return[s.conv2d($("x",e,t,n),$("filter",e,t,n),[r[1],r[2]],a,i,[o[1],o[2]])]}case"_FusedConv2D":{const{stride:r,pad:a,dataFormat:i,dilations:o,biasArg:l,preluArg:u,activationFunc:c,leakyreluAlpha:d}=Ie(e,t,n);return[s.fused.conv2d({x:$("x",e,t,n),filter:$("filter",e,t,n),strides:[r[1],r[2]],pad:a,dataFormat:i,dilations:[o[1],o[2]],bias:l,activation:c,preluActivationWeights:u,leakyreluAlpha:d})]}case"FusedDepthwiseConv2dNative":{const{stride:r,pad:a,dataFormat:i,dilations:o,biasArg:l,preluArg:u,activationFunc:c,leakyreluAlpha:d}=Ie(e,t,n);return[s.fused.depthwiseConv2d({x:$("x",e,t,n),filter:$("filter",e,t,n),strides:[r[1],r[2]],pad:a,dataFormat:i,dilations:[o[1],o[2]],bias:l,activation:c,preluActivationWeights:u,leakyreluAlpha:d})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const r=$("outputShape",e,t,n),a=$("strides",e,t,n),i=M(e,t,n);return[s.conv2dTranspose($("x",e,t,n),$("filter",e,t,n),r,[a[1],a[2]],i)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const r=$("strides",e,t,n),a=M(e,t,n),i=$("dilations",e,t,n),o=$("dataFormat",e,t,n).toUpperCase();return[s.depthwiseConv2d($("input",e,t,n),$("filter",e,t,n),[r[1],r[2]],a,o,[i[1],i[2]])]}case"Conv3D":{const r=$("strides",e,t,n),a=$("pad",e,t,n),i=$("dataFormat",e,t,n).toUpperCase(),o=$("dilations",e,t,n);return[s.conv3d($("x",e,t,n),$("filter",e,t,n),[r[1],r[2],r[3]],a,i,[o[1],o[2],o[3]])]}case"AvgPool":{const r=$("strides",e,t,n),a=$("pad",e,t,n),i=$("kernelSize",e,t,n);return[s.avgPool($("x",e,t,n),[i[1],i[2]],[r[1],r[2]],a)]}case"MaxPool":{const r=$("strides",e,t,n),a=$("pad",e,t,n),i=$("kernelSize",e,t,n);return[s.maxPool($("x",e,t,n),[i[1],i[2]],[r[1],r[2]],a)]}case"MaxPoolWithArgmax":{const r=$("strides",e,t,n),a=$("pad",e,t,n),i=$("kernelSize",e,t,n),o=$("includeBatchInIndex",e,t,n),{result:l,indexes:u}=s.maxPoolWithArgmax($("x",e,t,n),[i[1],i[2]],[r[1],r[2]],a,o);return[l,u]}case"AvgPool3D":{const r=$("strides",e,t,n),a=$("pad",e,t,n),i=$("kernelSize",e,t,n);return[s.avgPool3d($("x",e,t,n),[i[1],i[2],i[3]],[r[1],r[2],r[3]],a)]}case"MaxPool3D":{const r=$("strides",e,t,n),a=$("pad",e,t,n),i=$("kernelSize",e,t,n);return[s.maxPool3d($("x",e,t,n),[i[1],i[2],i[3]],[r[1],r[2],r[3]],a)]}case"Dilation2D":{const r=$("strides",e,t,n),a=$("pad",e,t,n),i=$("dilations",e,t,n),o=r[1],l=r[2],u=i[1],c=i[2];return[s.dilation2d($("x",e,t,n),$("filter",e,t,n),[o,l],a,[u,c],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"creation":return r(()=>((e,t,n,s=k)=>{switch(e.op){case"Fill":{const r=$("shape",e,t,n),a=$("dtype",e,t,n),i=$("value",e,t,n);return[s.fill(r,i,a)]}case"LinSpace":{const r=$("start",e,t,n),a=$("stop",e,t,n),i=$("num",e,t,n);return[s.linspace(r,a,i)]}case"Multinomial":{const r=$("logits",e,t,n),a=$("numSamples",e,t,n),i=$("seed",e,t,n);return[s.multinomial(r,a,i)]}case"OneHot":{const r=$("indices",e,t,n),a=$("depth",e,t,n),i=$("onValue",e,t,n),o=$("offValue",e,t,n),l=$("dtype",e,t,n);return[s.oneHot(r,a,i,o,l)]}case"Ones":return[s.ones($("shape",e,t,n),$("dtype",e,t,n))];case"OnesLike":return[s.onesLike($("x",e,t,n))];case"RandomStandardNormal":return[s.randomStandardNormal($("shape",e,t,n),$("dtype",e,t,n),$("seed",e,t,n))];case"RandomUniform":return[s.randomUniform($("shape",e,t,n),$("minval",e,t,n),$("maxval",e,t,n),$("dtype",e,t,n))];case"RandomUniformInt":return[s.randomUniformInt($("shape",e,t,n),$("minval",e,t,n),$("maxval",e,t,n),$("seed",e,t,n))];case"Range":{const r=$("start",e,t,n),a=$("stop",e,t,n),i=$("step",e,t,n);return[s.range(r,a,i,$("dtype",e,t,n))]}case"TruncatedNormal":{const r=$("shape",e,t,n),a=$("mean",e,t,n),i=$("stdDev",e,t,n),o=$("seed",e,t,n);return[s.truncatedNormal(r,a,i,$("dtype",e,t,n),o)]}case"Zeros":return[s.zeros($("shape",e,t,n),$("dtype",e,t,n))];case"ZerosLike":return[s.zerosLike($("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"dynamic":return(async(e,t,n,s,r=k)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:s,scores:a,maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=Ce(e,t,n),c=await r.image.nonMaxSuppressionWithScoreAsync(s,a,i,o,l,u);return[c.selectedIndices,c.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:s,scores:a,maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=Ce(e,t,n),u=$("padToMaxOutputSize",e,t,n),c=await r.image.nonMaxSuppressionPaddedAsync(s,a,i,o,l,u);return[c.selectedIndices,c.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:s,scores:a,maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=Ce(e,t,n);return[await r.image.nonMaxSuppressionAsync(s,a,i,o,l)]}case"Where":{const s=r.cast($("condition",e,t,n),"bool"),a=[await r.whereAsync(s)];return s.dispose(),a}case"ListDiff":return r.setdiff1dAsync($("x",e,t,n),$("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"evaluation":return r(()=>((e,t,n,s=k)=>{switch(e.op){case"LowerBound":{const r=$("sortedSequence",e,t,n),a=$("values",e,t,n);return[s.lowerBound(r,a)]}case"TopKV2":{const r=$("x",e,t,n),a=$("k",e,t,n),i=$("sorted",e,t,n),o=s.topk(r,a,i);return[o.values,o.indices]}case"UpperBound":{const r=$("sortedSequence",e,t,n),a=$("values",e,t,n);return[s.upperBound(r,a)]}case"Unique":{const r=$("x",e,t,n),a=s.unique(r);return[a.values,a.indices]}case"UniqueV2":{const r=$("x",e,t,n),a=$("axis",e,t,n),i=s.unique(r,a);return[i.values,i.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"image":return r(()=>((e,t,n,s=k)=>{switch(e.op){case"ResizeBilinear":{const r=$("images",e,t,n),a=$("size",e,t,n),i=$("alignCorners",e,t,n),o=$("halfPixelCenters",e,t,n);return[s.image.resizeBilinear(r,[a[0],a[1]],i,o)]}case"ResizeNearestNeighbor":{const r=$("images",e,t,n),a=$("size",e,t,n),i=$("alignCorners",e,t,n),o=$("halfPixelCenters",e,t,n);return[s.image.resizeNearestNeighbor(r,[a[0],a[1]],i,o)]}case"CropAndResize":{const r=$("image",e,t,n),a=$("boxes",e,t,n),i=$("boxInd",e,t,n),o=$("cropSize",e,t,n),l=$("method",e,t,n),u=$("extrapolationValue",e,t,n);return[s.image.cropAndResize(r,a,i,o,l,u)]}case"ImageProjectiveTransformV3":{const r=$("images",e,t,n),a=$("transforms",e,t,n),i=$("outputShape",e,t,n),o=$("fillValue",e,t,n),l=$("interpolation",e,t,n),u=$("fillMode",e,t,n);return[s.image.transform(r,a,l.toLowerCase(),u.toLowerCase(),o,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"graph":return r(()=>((e,t,n,s=k)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const r=$("default",e,t,n);return[R(e.name,t,n)||r];case"Placeholder":return[R(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[z($("x",e,t,n))];case"IdentityN":return $("x",e,t,n).map(e=>z(e));case"Shape":return[s.tensor1d($("x",e,t,n).shape,"int32")];case"ShapeN":return $("x",e,t,n).map(e=>s.tensor1d(e.shape));case"Size":return[s.scalar($("x",e,t,n).size,"int32")];case"Rank":return[s.scalar($("x",e,t,n).rank,"int32")];case"NoOp":return[s.scalar(1)];case"Print":const a=$("x",e,t,n),i=$("data",e,t,n),o=$("message",e,t,n),l=$("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(o);for(let e=0;e<i.length;e++)console.log(Array.prototype.slice.call(i[e].dataSync()).slice(0,l));return[a];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"logical":return r(()=>((e,t,n,s=k)=>{switch(e.op){case"Equal":return[s.equal($("a",e,t,n),$("b",e,t,n))];case"NotEqual":return[s.notEqual($("a",e,t,n),$("b",e,t,n))];case"Greater":return[s.greater($("a",e,t,n),$("b",e,t,n))];case"GreaterEqual":return[s.greaterEqual($("a",e,t,n),$("b",e,t,n))];case"Less":return[s.less($("a",e,t,n),$("b",e,t,n))];case"LessEqual":return[s.lessEqual($("a",e,t,n),$("b",e,t,n))];case"LogicalAnd":return[s.logicalAnd($("a",e,t,n),$("b",e,t,n))];case"LogicalNot":return[s.logicalNot($("a",e,t,n))];case"LogicalOr":return[s.logicalOr($("a",e,t,n),$("b",e,t,n))];case"Select":case"SelectV2":return[s.where($("condition",e,t,n),$("a",e,t,n),$("b",e,t,n))];case"BitwiseAnd":return[s.bitwiseAnd($("a",e,t,n),$("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"matrices":return r(()=>((e,t,n,s=k)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[s.matMul($("a",e,t,n),$("b",e,t,n),$("transposeA",e,t,n),$("transposeB",e,t,n))];case"Einsum":return[s.einsum($("equation",e,t,n),...$("tensors",e,t,n))];case"Transpose":return[s.transpose($("x",e,t,n),$("perm",e,t,n))];case"_FusedMatMul":const[r,a]=$("fusedOps",e,t,n),i="biasadd"===r,o="prelu"===a,l=$("numArgs",e,t,n),u=$("leakyreluAlpha",e,t,n);if(i){if(o&&2!==l)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!o&&1!==l)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[c,d]=$("args",e,t,n);return[s.fused.matMul({a:$("a",e,t,n),b:$("b",e,t,n),transposeA:$("transposeA",e,t,n),transposeB:$("transposeB",e,t,n),bias:c,activation:a,preluActivationWeights:d,leakyreluAlpha:u})];case"MatrixBandPart":return[s.linalg.bandPart($("a",e,t,n),$("numLower",e,t,n),$("numUpper",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"normalization":return r(()=>((e,t,n,s=k)=>{switch(e.op){case"EuclideanNorm":return[s.euclideanNorm($("x",e,t,n),$("axis",e,t,n),$("keepDims",e,t,n))];case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[s.batchNorm($("x",e,t,n),$("mean",e,t,n),$("variance",e,t,n),$("offset",e,t,n),$("scale",e,t,n),$("epsilon",e,t,n))];case"LRN":return[s.localResponseNormalization($("x",e,t,n),$("radius",e,t,n),$("bias",e,t,n),$("alpha",e,t,n),$("beta",e,t,n))];case"Softmax":return[s.softmax($("x",e,t,n))];case"LogSoftmax":return[s.logSoftmax($("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"ragged":return r(()=>((e,t,n,s=k)=>{switch(e.op){case"RaggedGather":{const{outputNestedSplits:r,outputDenseValues:a}=s.raggedGather($("paramsNestedSplits",e,t,n),$("paramsDenseValues",e,t,n),$("indices",e,t,n),$("outputRaggedRank",e,t,n));return r.concat(a)}case"RaggedRange":{const{rtNestedSplits:r,rtDenseValues:a}=s.raggedRange($("starts",e,t,n),$("limits",e,t,n),$("splits",e,t,n));return[r,a]}case"RaggedTensorToTensor":return[s.raggedTensorToTensor($("shape",e,t,n),$("values",e,t,n),$("defaultValue",e,t,n),$("rowPartitionTensors",e,t,n),$("rowPartitionTypes",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"reduction":return r(()=>((e,t,n,s=k)=>{switch(e.op){case"Max":{const r=$("axis",e,t,n),a=$("keepDims",e,t,n);return[s.max($("x",e,t,n),r,a)]}case"Mean":{const r=$("axis",e,t,n),a=$("keepDims",e,t,n);return[s.mean($("x",e,t,n),r,a)]}case"Min":{const r=$("axis",e,t,n),a=$("keepDims",e,t,n);return[s.min($("x",e,t,n),r,a)]}case"Sum":{const r=$("axis",e,t,n),a=$("keepDims",e,t,n);return[s.sum($("x",e,t,n),r,a)]}case"All":{const r=$("axis",e,t,n),a=$("keepDims",e,t,n);return[s.all($("x",e,t,n),r,a)]}case"Any":{const r=$("axis",e,t,n),a=$("keepDims",e,t,n);return[s.any($("x",e,t,n),r,a)]}case"ArgMax":{const r=$("axis",e,t,n);return[s.argMax($("x",e,t,n),r)]}case"ArgMin":{const r=$("axis",e,t,n);return[s.argMin($("x",e,t,n),r)]}case"Prod":{const r=$("axis",e,t,n),a=$("keepDims",e,t,n);return[s.prod($("x",e,t,n),r,a)]}case"Cumprod":{const r=$("axis",e,t,n),a=$("exclusive",e,t,n),i=$("reverse",e,t,n);return[s.cumprod($("x",e,t,n),r,a,i)]}case"Cumsum":{const r=$("axis",e,t,n),a=$("exclusive",e,t,n),i=$("reverse",e,t,n);return[s.cumsum($("x",e,t,n),r,a,i)]}case"Bincount":const r=$("x",e,t,n),a=$("weights",e,t,n),i=$("size",e,t,n);return[s.bincount(r,a,i)];case"DenseBincount":{const r=$("x",e,t,n),a=$("weights",e,t,n),i=$("size",e,t,n),o=$("binaryOutput",e,t,n);return[s.denseBincount(r,a,i,o)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"slice_join":return r(()=>((e,t,n,s=k)=>{switch(e.op){case"ConcatV2":case"Concat":{const r=$("n",e,t,n),a=$("axis",e,t,n);let i=$("tensors",e,t,n);return i=i.slice(0,r),[s.concat(i,a)]}case"Gather":{const r=$("x",e,t,n),a=$("indices",e,t,n);return[s.gather(r,s.cast(a,"int32"),0)]}case"GatherV2":{const r=$("axis",e,t,n),a=$("batchDims",e,t,n),i=$("x",e,t,n),o=$("indices",e,t,n);return[s.gather(i,s.cast(o,"int32"),r,a)]}case"Reverse":{const r=$("dims",e,t,n),a=[];for(let e=0;e<r.length;e++)r[e]&&a.push(e);const i=$("x",e,t,n);return[s.reverse(i,a)]}case"ReverseV2":{const r=$("axis",e,t,n),a=$("x",e,t,n);return[s.reverse(a,r)]}case"Slice":{const r=$("begin",e,t,n),a=$("size",e,t,n);return[s.slice($("x",e,t,n),r,a)]}case"StridedSlice":{const r=$("begin",e,t,n),a=$("end",e,t,n),i=$("strides",e,t,n),o=$("beginMask",e,t,n),l=$("endMask",e,t,n),u=$("ellipsisMask",e,t,n),c=$("newAxisMask",e,t,n),d=$("shrinkAxisMask",e,t,n),h=$("x",e,t,n);return[s.stridedSlice(h,r,a,i,o,l,u,c,d)]}case"Pack":return(0,N.tidy)(()=>{const r=$("axis",e,t,n),a=$("tensors",e,t,n),i=a[0].shape,o=s.squeeze(a[0]).shape,l=a.map(e=>{const t=N.util.arraysEqual(e.shape,i);if(!t&&!N.util.arraysEqual(s.squeeze(e).shape,o))throw new Error("the input tensors shape does not match");return t?e:s.reshape(e,i)});return[s.stack(l,r)]});case"Unpack":{const r=$("axis",e,t,n),a=$("tensor",e,t,n);return s.unstack(a,r)}case"Tile":{const r=$("reps",e,t,n);return[s.tile($("x",e,t,n),r)]}case"Split":case"SplitV":{const r=$("axis",e,t,n),a=$("numOrSizeSplits",e,t,n),i=$("x",e,t,n);return s.split(i,a,r)}case"ScatterNd":{const r=$("indices",e,t,n),a=$("values",e,t,n),i=$("shape",e,t,n);return[s.scatterND(r,a,i)]}case"GatherNd":{const r=$("x",e,t,n),a=$("indices",e,t,n);return[s.gatherND(r,a)]}case"SparseToDense":{const r=$("sparseIndices",e,t,n),a=$("outputShape",e,t,n),i=$("sparseValues",e,t,n),o=$("defaultValue",e,t,n);return[s.sparseToDense(r,i,a,i.dtype===o.dtype?o:s.cast(o,i.dtype))]}case"TensorScatterUpdate":{const r=$("indices",e,t,n),a=$("values",e,t,n),i=$("tensor",e,t,n);return[s.tensorScatterUpdate(i,r,a)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"sparse":return r(()=>((e,t,n,s=k)=>{switch(e.op){case"SparseFillEmptyRows":{const{outputIndices:r,outputValues:a,emptyRowIndicator:i,reverseIndexMap:o}=s.sparse.sparseFillEmptyRows($("indices",e,t,n),$("values",e,t,n),$("denseShape",e,t,n),$("defaultValue",e,t,n));return[r,a,i,o]}case"SparseReshape":{const{outputIndices:r,outputShape:a}=s.sparse.sparseReshape($("inputIndices",e,t,n),$("inputShape",e,t,n),$("newShape",e,t,n));return[r,a]}case"SparseSegmentMean":return[s.sparse.sparseSegmentMean($("data",e,t,n),$("indices",e,t,n),$("segmentIds",e,t,n))];case"SparseSegmentSum":return[s.sparse.sparseSegmentSum($("data",e,t,n),$("indices",e,t,n),$("segmentIds",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"spectral":return r(()=>((e,t,n,s=k)=>{switch(e.op){case"FFT":return[s.fft($("x",e,t,n))];case"IFFT":return[s.ifft($("x",e,t,n))];case"RFFT":return[s.rfft($("x",e,t,n))];case"IRFFT":return[s.irfft($("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"string":return r(()=>((e,t,n,s=k)=>{switch(e.op){case"StaticRegexReplace":return[s.string.staticRegexReplace($("input",e,t,n),$("pattern",e,t,n),$("rewrite",e,t,n),$("replaceGlobal",e,t,n))];case"StringNGrams":{const{nGrams:r,nGramsSplits:a}=s.string.stringNGrams($("data",e,t,n),$("dataSplits",e,t,n),$("separator",e,t,n),$("nGramWidths",e,t,n),$("leftPad",e,t,n),$("rightPad",e,t,n),$("padWidth",e,t,n),$("preserveShortSequences",e,t,n));return[r,a]}case"StringSplit":{const{indices:r,values:a,shape:i}=s.string.stringSplit($("input",e,t,n),$("delimiter",e,t,n),$("skipEmpty",e,t,n));return[r,a,i]}case"StringToHashBucketFast":return[s.string.stringToHashBucketFast($("input",e,t,n),$("numBuckets",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"transformation":return r(()=>((e,t,n,s=k)=>{switch(e.op){case"Cast":return[s.cast($("x",e,t,n),$("dtype",e,t,n))];case"ExpandDims":{const r=$("axis",e,t,n);return[s.expandDims($("x",e,t,n),r)]}case"Squeeze":{const r=$("axis",e,t,n);return[s.squeeze($("x",e,t,n),r)]}case"Reshape":return[s.reshape($("x",e,t,n),$("shape",e,t,n))];case"EnsureShape":return[s.ensureShape($("x",e,t,n),$("shape",e,t,n))];case"MirrorPad":return[s.mirrorPad($("x",e,t,n),$("padding",e,t,n),$("mode",e,t,n))];case"PadV2":case"Pad":return[s.pad($("x",e,t,n),$("padding",e,t,n),$("constantValue",e,t,n))];case"SpaceToBatchND":{const r=$("blockShape",e,t,n),a=$("paddings",e,t,n);return[s.spaceToBatchND($("x",e,t,n),r,a)]}case"BatchToSpaceND":{const r=$("blockShape",e,t,n),a=$("crops",e,t,n);return[s.batchToSpaceND($("x",e,t,n),r,a)]}case"DepthToSpace":{const r=$("blockSize",e,t,n),a=$("dataFormat",e,t,n).toUpperCase();return[s.depthToSpace($("x",e,t,n),r,a)]}case"BroadcastTo":return[s.broadcastTo($("x",e,t,n),$("shape",e,t,n))];case"BroadcastArgs":return[s.broadcastArgs($("s0",e,t,n),$("s1",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"hash_table":return(async(e,t,n,s)=>{switch(e.op){case"HashTable":case"HashTableV2":{const r=s.getHashTableHandleByName(e.name);if(null!=r)return[r];{const r=$("keyDType",e,t,n),a=$("valueDType",e,t,n),i=new Ee(r,a);return s.addHashTable(e.name,i),[i.handle]}}case"InitializeTable":case"InitializeTableV2":case"LookupTableImport":case"LookupTableImportV2":{const r=$("tableHandle",e,t,n,s),a=$("keys",e,t,n),i=$("values",e,t,n),o=s.getHashTableById(r.id);return[await o.import(a,i)]}case"LookupTableFind":case"LookupTableFindV2":{const r=$("tableHandle",e,t,n,s),a=$("keys",e,t,n),i=$("defaultValue",e,t,n),o=s.getHashTableById(r.id);return[await o.find(a,i)]}case"LookupTableSize":case"LookupTableSizeV2":{const r=$("tableHandle",e,t,n,s);return[s.getHashTableById(r.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n,s);case"custom":const a=A(e.op);if(a&&a.customExecutor)return a.customExecutor(new be(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return N.util.isPromise(a)?a.then(e=>[].concat(e)):[].concat(a)}class Re{constructor(e={},t={},n={},s={},r){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=s,this.parseNodeNameCache=r,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map(e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function _e(e,t,n,s){const r=new Set,a=[];let i=null,o=null;const l=new Set,u=new Set(Object.keys(e).map(e=>O(e)[0]));s=s||[];const c=new Set(s.map(e=>O(e.name)[0])),d=[...t];for(;d.length>0;){const e=d.pop();(ze(e)||Le(e)||Pe(e))&&null==i&&(i=e,o=i.children.map(e=>e.name).filter(e=>r.has(e))),r.add(e.name),null==n[e.name]&&(u.has(e.name)||c.has(e.name)||(0!==e.inputs.length?e.inputs.forEach(e=>{l.has(e.name)||(l.add(e.name),d.push(e))}):a.push(e.name)))}return{inputs:e,outputs:t,usedNodes:r,missingInputs:a,dynamicNode:i,syncInputs:o}}class De extends Error{constructor(e){super(`NodesExecutionOrderError: ${e}`)}}const Fe=new Set(["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"]),Oe=new Set(["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"]),Me=new Set(["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"]);function ze(e){return Fe.has(e.op)}function Le(e){return Oe.has(e.op)}function Pe(e){return Me.has(e.op)}class Be{get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map(t=>e[t].map(e=>e.id));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map(e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}))}get outputs(){return this._outputs.map(e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}))}get inputNodes(){return this._inputs.map(e=>e.signatureKey||e.name)}get outputNodes(){return this._outputs.map(e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t})}get functions(){return Object.keys(this._functions).reduce((e,t)=>(e[t]=this._functions[t].signature,e),{})}constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this.parseNodeNameCache=new Map,this._weightMap={},this.SEPARATOR=",",this._functions={},this._functionExecutorMap={},this.keepIntermediateTensors=!1,this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach(t=>{this._functionExecutorMap[t]=new Be(e.functions[t],this)})}getCompilationKey(e,t){const n=e.map(e=>e.name).sort(),s=t.map(e=>e.name).sort();return n.join(this.SEPARATOR)+"--"+s.join(this.SEPARATOR)}compile(e,t){const n=_e(e,t,this.weightMap,this._initNodes),{missingInputs:s,dynamicNode:r,syncInputs:a}=n;if(null!=r)throw new Error(`This execution contains the node '${r.name}', which has the dynamic op '${r.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(s.length>0){const n=t.map(e=>e.name),r=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${r}]. Missing the following inputs: [${s}]`)}const i=function(e,t){const{usedNodes:n,inputs:s}=t,r=Object.keys(s).map(e=>O(e)[0]).map(t=>e.nodes[t]),a=e.initNodes||[],i=e=>n.has("string"==typeof e?e:e.name);function o(e){return[...new Map(e.map(e=>[e.name,e])).values()]}const l=o([...r,...e.weights,...a]).filter(i),u=o([...l,...Object.values(e.nodes)]).filter(i),c=new Map(u.map(e=>[e.name,e])),d={};for(const e of u){d[e.name]=d[e.name]||0;for(const t of e.children)i(t)||(d[t.name]=Number.POSITIVE_INFINITY),d[t.name]=(d[t.name]||0)+1}const h=Object.entries(d).filter(([,e])=>0===e).map(([e])=>e),p=[...h];for(;h.length>0;){const e=h.pop(),t=c.get(e);for(const e of t.children.filter(i))0===--d[e.name]&&(p.push(e.name),h.push(e.name))}const f=function(e,t){const n=new Map(e.map(e=>[e.name,e])),s=t.map(e=>e.name),r=new Set(s);for(;s.length>0;){const e=s.pop(),t=n.get(e);for(const e of t.children)n.has(e.name)&&!r.has(e.name)&&(r.add(e.name),s.push(e.name))}return e.filter(e=>r.has(e.name))}(p.map(e=>c.get(e)),l);return function(e,t){const n=new Map(e.map((e,t)=>[e.name,t])),s=new Set(t.map(e=>e.name)),r=e=>s.has("string"==typeof e?e:e.name),a=new Set(e.map(e=>e.name)),i=e=>a.has("string"==typeof e?e:e.name);for(const t of e){for(const e of t.children.filter(i)){if(!n.has(e.name))throw new De(`Child ${e.name} of node ${t.name} is unreachable.`);if(n.get(t.name)>n.get(e.name))throw new De(`Node ${t.name} is scheduled to run after its child ${e.name}.`)}if(!r(t))for(const e of t.inputs){if(!n.has(e.name))throw new De(`Input ${e.name} of node ${t.name} is unreachable.`);if(n.get(e.name)>n.get(t.name))throw new De(`Node ${t.name} is scheduled to run before its input ${e.name}.`)}}}(f,l),f}(this.graph,n),o=function(e){const t=new Map(e.map((e,t)=>[e.name,t])),n=Number.MAX_SAFE_INTEGER,s=e.map((e,t)=>ze(e)?n:t),r=e=>{const n=s[t.get(e.name)];return null==n?-1:n},a=e.map((e,t)=>e.children.map(r).reduce((e,t)=>Math.max(e,t),s[t])),i=new Map;for(let t=0;t<e.length;++t){const s=a[t];if(s===n)continue;const r=e[t],o=e[s];i.has(o.name)||i.set(o.name,[]),i.get(o.name).push(r)}return i}(i);return{orderedNodes:i,nodeLiveUntilMap:o}}cloneAndKeepTensor(e){if(null==e)return null;const t=e.clone();return(0,N.keep)(t),t}cloneTensorList(e){return e?e.map(e=>this.cloneAndKeepTensor(e)):null}cloneTensorMap(e){return Object.fromEntries(Object.entries(e).map(([e,t])=>[e,this.cloneTensorList(t)]))}execute(e,t){this.disposeIntermediateTensors(),e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const s=n.map(e=>this.graph.nodes[O(e)[0]]),r=t.map(e=>O(e)[0]),a=new Set(r);let i=r.map(e=>this.graph.nodes[e]);0===i.length&&(i=this._outputs);const o=this.getCompilationKey(s,i);let l=this.compiledMap.get(o);null==l&&(l=this.compile(e,i),this.compiledMap.set(o,l));try{this.keepIntermediateTensors=(0,N.env)().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(e){this.keepIntermediateTensors=!1,console.warn(e.message)}const u={},c={};return(0,N.tidy)(()=>{const n=new Re(this.weightMap,u,c,this.functionExecutorMap,this.parseNodeNameCache),s=Object.assign({},this.weightMap);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap)),Object.keys(e).forEach(t=>{const[r,a]=O(t,n),i=[];i[a]=e[t],s[r]=i,this.keepIntermediateTensors&&(this.clonedTensorsMap[r]=this.cloneTensorList(i))});const r=this.getFrozenTensorIds(s),{orderedNodes:i,nodeLiveUntilMap:o}=l;for(const e of i){if(s[e.name])continue;const t=$e(e,s,n,this._resourceManager);if(N.util.isPromise(t))throw new Error(`The execution of the op '${e.op}' returned a promise. Please use model.executeAsync() instead.`);s[e.name]=t,this.keepIntermediateTensors&&(this.clonedTensorsMap[e.name]=this.cloneTensorList(t)),this.checkTensorForDisposalWithNodeLiveUntilInfo(e,s,n,r,a,o.get(e.name))}return null==this.parent&&n.dispose(r),t.map(e=>R(e,s,n))})}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map(t=>e[t]).map(e=>e.map(e=>e.id)));return new Set(t)}checkTensorForDisposal(e,t,n,s,r,a,i){if(!ze(t)&&!a.has(e)){for(const s of n[e])null!=s&&(i[s.id]=(i[s.id]||0)+t.children.length);for(const e of t.inputs){if(ze(e))continue;const t=_(e.name,n,s);if(null!=t)for(const e of t){if(!e||e.kept||r.has(e.id))continue;const t=i[e.id];1===t?(e.dispose(),delete i[e.id]):null!=t&&i[e.id]--}}}}checkTensorForDisposalWithNodeLiveUntilInfo(e,t,n,s,r,a){function i(e){return ze(e)||r.has(e.name)}if(!ze(e)&&null!=a)for(const e of a){if(i(e))continue;const r=_(e.name,t,n);for(const e of r)!e||e.kept||s.has(e.id)||e.dispose()}}async executeAsync(e,t){return this._executeAsync(e,t)}disposeIntermediateTensors(){this.clonedTensorsMap&&(Object.values(this.clonedTensorsMap).forEach(e=>{for(const t of e)t&&!t.isDisposed&&t.dispose()}),this.clonedTensorsMap=null)}getIntermediateTensors(){return this.clonedTensorsMap}async _executeAsync(e,t,n=!1,s={},r={}){this.disposeIntermediateTensors(),n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));try{this.keepIntermediateTensors=(0,N.env)().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(e){this.keepIntermediateTensors=!1,console.warn(e.message)}const a=new Re(this.weightMap,s,r,this.functionExecutorMap,this.parseNodeNameCache);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap));const i=await this.executeWithControlFlow(e,a,t,n),o=t.map(e=>R(e,i,a)),l=o.map(e=>e.id),u=Object.keys(e).map(t=>e[t].id),c=new Set([...l,...u,...this.weightIds]);return Object.values(i).forEach(e=>{e.forEach(e=>{!e||e.isDisposed||c.has(e.id)||e.dispose()})}),null==this.parent&&a.dispose(c),o}async executeFunctionAsync(e,t,n){const s=e.reduce((e,t,n)=>(e[this.inputs[n].name]=t,e),{});return this._executeAsync(s,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,s){const r=Object.keys(e),a=r.map(e=>this.graph.nodes[O(e)[0]]),i=n.map(e=>O(e)[0]),o=new Set(i);let l=i.map(e=>this.graph.nodes[e]);0===l.length&&(l=this._outputs);const{usedNodes:u,missingInputs:c,dynamicNode:d,syncInputs:h}=_e(e,l,this.weightMap,this._initNodes),p=[...a,...this.graph.weights,...this._initNodes||[]].map(e=>({node:e,contexts:t.currentContext})),f=Object.assign({},this.weightMap);Object.keys(e).forEach(t=>{const[n,s]=O(t),r=[];r[s]=e[t],f[n]=r});const m={},g=this.getFrozenTensorIds(f),y={};for(;p.length>0;){const e=this.processStack(a,p,t,f,y,g,o,m,u);await Promise.all(e)}null!=d||s||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const b=l.filter(e=>!ze(e)&&!R(e.name,f,t)).map(e=>e.name);if(b.length>0){let e="";throw null!=d&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${h}]`),new Error(`Cannot compute the outputs [${b}] from the provided inputs [${r}]. Consider providing the following inputs: [${c}]. ${e}`)}return f}processStack(e,t,n,s,r,a,i,o,l){const u=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let c="";if("Enter"===e.node.op&&$("isConstant",e.node,s,n)&&([c]=D(e.node.name,n)),null==s[e.node.name]){const d=$e(e.node,s,n,this._resourceManager);c||([c]=D(e.node.name,n));const h=n.currentContext;N.util.isPromise(d)?u.push(d.then(u=>(s[c]=u,this.keepIntermediateTensors&&(this.clonedTensorsMap[c]=this.cloneTensorList(u)),n.currentContext=h,this.checkTensorForDisposal(c,e.node,s,n,a,i,o),this.processChildNodes(e.node,t,n,s,r,l),u))):(s[c]=d,this.keepIntermediateTensors&&(this.clonedTensorsMap[c]=this.cloneTensorList(d)),this.checkTensorForDisposal(c,e.node,s,n,a,i,o),this.processChildNodes(e.node,t,n,s,r,l))}else this.processChildNodes(e.node,t,n,s,r,l)}return u}processChildNodes(e,t,n,s,r,a){e.children.forEach(e=>{const[i]=D(e.name,n);!r[i]&&a.has(e.name)&&("Merge"===e.op?e.inputNames.some(e=>!!R(e,s,n))&&(r[i]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every(e=>!!R(e,s,n))&&(r[i]=!0,t.push({contexts:n.currentContext,node:e})))})}dispose(){Object.keys(this.weightMap).forEach(e=>this.weightMap[e].forEach(e=>e.dispose()))}checkInputShapeAndType(e){Object.keys(e).forEach(t=>{const n=e[t],[s]=O(t),r=this.graph.nodes[s];if(r.attrParams.shape&&r.attrParams.shape.value){const e=r.attrParams.shape.value,t=e.length===n.shape.length&&n.shape.every((t,n)=>-1===e[n]||e[n]===t);N.util.assert(t,()=>`The shape of dict['${r.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`)}r.attrParams.dtype&&r.attrParams.dtype.value&&N.util.assert(n.dtype===r.attrParams.dtype.value,()=>`The dtype of dict['${r.name}'] provided in model.execute(dict) must be ${r.attrParams.dtype.value}, but was ${n.dtype}`)})}mapInputs(e){var t,n;const s={};for(const r in e){const a=null===(n=null===(t=this._signature)||void 0===t?void 0:t.inputs)||void 0===n?void 0:n[r];null!=a?s[a.name]=e[r]:s[r]=e[r]}return s}checkInputs(e){const t=Object.keys(e).filter(e=>{const[t]=O(e);return null==this.graph.nodes[t]});if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map(e=>{var t,n;const s=null===(n=null===(t=this._signature)||void 0===t?void 0:t.outputs)||void 0===n?void 0:n[e];return null!=s?s.name:e},{})}checkOutputs(e){e.forEach(e=>{const[t]=O(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)})}}class We{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}var Ve=n(7084);const Ue="?tfjs-format=file",Ge="model.json";class He{get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}constructor(e,t={},n=N.io){this.modelUrl=e,this.loadOptions=t,this.version="n/a",this.io=n,null==t&&(this.loadOptions={}),this.resourceManager=new We}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=this.io.browserHTTPRequest(e,this.loadOptions);else{const t=this.io.getLoadHandlers(e,this.loadOptions);if(0===t.length)t.push(this.io.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=this.handler.load();return N.util.isPromise(e)?e.then(e=>null==e.getWeightStream?this.loadSync(e):this.loadStreaming(e)):this.loadSync(e)}loadSync(e){const t=this.io.decodeWeights(e.weightData,e.weightSpecs);return this.loadWithWeightMap(e,t)}async loadStreaming(e){if(null==e.getWeightStream)throw new Error("Model artifacts missing streamWeights function");const t=await(0,Ve.s5)(e.getWeightStream(),e.weightSpecs);return this.loadWithWeightMap(e,t)}loadWithWeightMap(e,t){this.artifacts=e;const n=this.artifacts.modelTopology;let s=this.artifacts.signature;if(null!=this.artifacts.userDefinedMetadata){const e=this.artifacts.userDefinedMetadata;null!=e.signature&&(s=e.signature),null!=e.structuredOutputKeys&&(this.structuredOutputKeys=e.structuredOutputKeys)}if(this.signature=s,this.version=`${n.versions.producer}.${n.versions.minConsumer}`,this.executor=new Be(se.Instance.transformGraph(n,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(t),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=se.Instance.transformGraph(e.modelInitializer);this.initializer=new Be(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializerSignature=e.initializerSignature}return!0}async save(e,t){if("string"==typeof e){const t=this.io.getSaveHandlers(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}addStructuredOutputNames(e){if(this.structuredOutputKeys){const t=e instanceof N.Tensor?[e]:e,n={};return t.forEach((e,t)=>n[this.structuredOutputKeys[t]]=e),n}return e}predict(e,t){const n=this.execute(e,this.outputNodes);return this.addStructuredOutputNames(n)}async predictAsync(e,t){const n=await this.executeAsync(e,this.outputNodes);return this.addStructuredOutputNames(n)}normalizeInputs(e){var t;if(!(e instanceof N.Tensor||Array.isArray(e))){const n=null===(t=this.signature)||void 0===t?void 0:t.inputs;if(null!=n)for(const t in n){const s=n[t];null!=s.resourceId&&(e[t]=this.resourceIdToCapturedInput[s.resourceId])}return e}e=Array.isArray(e)?e:[e];const n=Object.keys(this.resourceIdToCapturedInput).length;if(e.length+n!==this.inputNodes.length)throw new Error(`Input tensor count mismatch, the graph model has ${this.inputNodes.length-n} non-resource placeholders, while there are ${e.length} input tensors provided.`);let s=0;return this.inputNodes.reduce((t,n)=>{var r,a,i;const o=null===(i=null===(a=null===(r=this.signature)||void 0===r?void 0:r.inputs)||void 0===a?void 0:a[n])||void 0===i?void 0:i.resourceId;return t[n]=null!=o?this.resourceIdToCapturedInput[o]:e[s++],t},{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}executeInitializerGraph(){return null==this.initializer?[]:null==this.initializerSignature?this.initializer.execute({},[]):this.initializer.execute({},Object.keys(this.initializerSignature.outputs))}async executeInitializerGraphAsync(){return null==this.initializer?[]:null==this.initializerSignature?this.initializer.executeAsync({},[]):this.initializer.executeAsync({},Object.keys(this.initializerSignature.outputs))}setResourceIdToCapturedInput(e){if(this.resourceIdToCapturedInput={},this.initializerSignature){const t=this.initializerSignature.outputs,n=Object.keys(t);for(let s=0;s<n.length;s++){const r=t[n[s]];this.resourceIdToCapturedInput[r.resourceId]=e[s]}}}execute(e,t){null==this.resourceIdToCapturedInput&&this.setResourceIdToCapturedInput(this.executeInitializerGraph()),e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){null==this.resourceIdToCapturedInput&&this.setResourceIdToCapturedInput(await this.executeInitializerGraphAsync()),e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce((t,n)=>(t[n]=[e[n]],t),{})}dispose(){this.executor.dispose(),this.initializer&&(this.initializer.dispose(),this.resourceIdToCapturedInput&&(0,N.dispose)(this.resourceIdToCapturedInput)),this.resourceManager.dispose()}}async function je(e,t={},n=N.io){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&"string"==typeof e&&(e=function(e){return e.endsWith("/")||(e+="/"),`${e}${Ge}${Ue}`}(e));const s=new He(e,t,n);return await s.load(),s}function qe(e){if(null==e)throw new Error("modelUrl in loadGraphModelSync() cannot be null. Please provide model artifacts or an IOHandler that loads the model");let t;if(e instanceof Array){const[n,s]=e;if(!n)throw new Error("modelJSON must be the first element of the array");if(!(s&&s instanceof ArrayBuffer))throw new Error("An ArrayBuffer of weights must be the second element of the array");if(!("modelTopology"in n))throw new Error("Model JSON is missing 'modelTopology'");if(!("weightsManifest"in n))throw new Error("Model JSON is missing 'weightsManifest'");const r=N.io.getWeightSpecs(n.weightsManifest),a=N.io.getModelArtifactsForJSONSync(n,r,s);t=N.io.fromMemorySync(a)}else if("load"in e)t=e;else{if(!("modelTopology"in e&&"weightSpecs"in e&&"weightData"in e))throw new Error("Unknown model format");t=N.io.fromMemorySync(e)}const n=new He(t);return n.load(),n}const Ye="4.22.0"},5119:(e,t,n)=>{"use strict";function s(e){let t=e.length,n=0;for(;t>0;)n=Math.random()*t|0,t--,o(e,t,n)}function r(e,t){if(e.length!==t.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${e.length}Second array length was ${t.length}`);let n=e.length,s=0;for(;n>0;)s=Math.random()*n|0,n--,o(e,n,s),o(t,n,s)}function a(e,t,n){return Math.max(e,Math.min(t,n))}function i(e){return e%2==0?e:e+1}function o(e,t,n){const s=e[t];e[t]=e[n],e[n]=s}function l(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function u(e,t){const n=Math.random();return t*n+(1-n)*e}function c(e,t){let n=0;for(let s=0;s<e.length;s++){const r=Number(e[s])-Number(t[s]);n+=r*r}return n}function d(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function h(e,t,n=""){d(y(e,t),()=>n+` Shapes ${e} and ${t} must match`)}function p(e){d(null!=e,()=>"The input to the tensor constructor must be a non-null value.")}function f(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function m(e){return 0===e.length}function g(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(null!==e[n]&&null!==t[n]&&e[n]!==t[n])return!1;return!0}function y(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function b(e){return e%1==0}function x(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}}function v(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function w(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return s(t),t}function k(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function T(e,t=e=>0,n,s){return new Promise((r,a)=>{let i=0;const o=()=>{if(e())return void r();i++;const l=t(i);null!=n&&i>=n?a():null!=s?s(o,l):setTimeout(o,l)};o()})}function S(e,t){let n=1,s=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==s)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${t}`);s=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===s){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!==0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const r=e.slice();return r[s]=t/n,r}function N(e,t){const n=t.length;return d((e=null==e?t.map((e,t)=>t):[].concat(e)).every(e=>e>=-n&&e<n),()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`),d(e.every(e=>b(e)),()=>`All values in axis param must be integers but got axis ${e}`),e.map(e=>e<0?n+e:e)}function I(e,t){const n=[],s=[],r=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||r?null:N(t,e).sort();let i=0;for(let t=0;t<e.length;++t){if(null!=a){if(a[i]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==a[i]||a[i]>t)&&1===e[t]&&(n.push(e[t]),s.push(t)),a[i]<=t&&i++}1!==e[t]&&(n.push(e[t]),s.push(t))}return{newShape:n,keptDims:s}}function C(e,t){return A(e,t)}function A(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function E(e,t){for(let n=0;n<e.length;n++){const s=e[n];if(isNaN(s)||!isFinite(s))throw Error(`A tensor of type ${t} being uploaded contains ${s}.`)}}function $(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function R(e,t){return!("complex64"===t||"float32"===t&&"complex64"!==e||"int32"===t&&"float32"!==e&&"complex64"!==e||"bool"===t&&"bool"===e)}function _(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function D(e){if(null==e)return 0;let t=0;return e.forEach(e=>t+=e.length),t}function F(e){return"string"==typeof e||e instanceof String}function O(e){return"boolean"==typeof e}function M(e){return"number"==typeof e}function z(e){return Array.isArray(e)?z(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray?"int32":M(e)?"float32":F(e)?"string":O(e)?"bool":"float32"}function L(e){return!!(e&&e.constructor&&e.call&&e.apply)}function P(e,t){for(let n=t;n<e;++n)if(e%n===0)return n;return e}function B(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let s=t-3;s>=0;--s)n[s]=n[s+1]*e[s+1];return n}function W(e,t,n,s=!1){const r=new Array;if(1===t.length){const a=t[0]*(s?2:1);for(let t=0;t<a;t++)r[t]=n[e+t]}else{const a=t[0],i=t.slice(1),o=i.reduce((e,t)=>e*t)*(s?2:1);for(let t=0;t<a;t++)r[t]=W(e+t*o,i,n,s)}return r}function V(e,t,n=!1){if(0===e.length)return t[0];const s=e.reduce((e,t)=>e*t)*(n?2:1);if(0===s)return[];if(s!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return W(0,e,t,n)}function U(e,t){if(Array.isArray(e))return e;if("float32"===t)return e instanceof Float32Array?e:new Float32Array(e);if("int32"===t)return e instanceof Int32Array?e:new Int32Array(e);if("bool"===t||"string"===t)return Uint8Array.from(new Int32Array(e));throw new Error(`Unknown dtype ${t}`)}function G(e,t){const n=H(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function H(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function j(e,t){const n=e.reduce((e,t)=>e*t,1);if(null==t||"float32"===t)return V(e,new Float32Array(n));if("int32"===t)return V(e,new Int32Array(n));if("bool"===t)return V(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function q(e){e.forEach(t=>{d(Number.isInteger(t)&&t>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`)})}function Y(e,t,n){if(0===t)return 0;if(1===t)return e[0];let s=e[e.length-1];for(let t=0;t<e.length-1;++t)s+=n[t]*e[t];return s}function K(e,t,n){if(0===t)return[];if(1===t)return[e];const s=new Array(t);for(let t=0;t<s.length-1;++t)s[t]=Math.floor(e/n[t]),e-=s[t]*n[t];return s[s.length-1]=e,s}function X(e){return e&&e.then&&"function"==typeof e.then}n.d(t,{Ab:()=>A,BE:()=>R,E6:()=>b,Et:()=>M,FZ:()=>G,HO:()=>p,Kg:()=>F,Lm:()=>O,O3:()=>h,P8:()=>w,SA:()=>q,SL:()=>D,Sf:()=>m,Tn:()=>L,Ty:()=>H,Ur:()=>B,X$:()=>z,XT:()=>S,Y6:()=>N,Ze:()=>f,_k:()=>K,_q:()=>T,a0:()=>r,av:()=>k,c7:()=>j,ce:()=>C,cz:()=>l,eV:()=>i,e_:()=>g,gS:()=>v,gx:()=>I,jv:()=>_,k4:()=>s,lK:()=>P,nd:()=>E,o2:()=>U,oO:()=>c,qE:()=>a,r1:()=>y,sX:()=>Y,so:()=>u,vA:()=>d,wg:()=>o,xn:()=>$,yL:()=>X,ym:()=>x,yw:()=>V})},5149:(e,t,n)=>{"use strict";n.d(t,{GJ:()=>s,uI:()=>r});class s{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class r{refCount(e){return a("refCount")}incRef(e){return a("incRef")}timerAvailable(){return!0}time(e){return a("time")}read(e){return a("read")}readSync(e){return a("readSync")}readToGPU(e,t){return a("readToGPU")}numDataIds(){return a("numDataIds")}disposeData(e,t){return a("disposeData")}write(e,t,n){return a("write")}move(e,t,n,s,r){return a("move")}createTensorFromGPUData(e,t,n){return a("createTensorFromGPUData")}memory(){return a("memory")}floatPrecision(){return a("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return a("dispose")}}function a(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}},5207:(e,t,n)=>{"use strict";n.d(t,{Y:()=>l});var s=n(1585),r=n(5441),a=n(8189),i=n(5119),o=n(9809);const l=(0,n(929).op)({erf_:function(e){let t=(0,a.YT)(e,"x","erf");i.vA("int32"===t.dtype||"float32"===t.dtype,()=>"Input dtype must be `int32` or `float32`."),"int32"===t.dtype&&(t=(0,o.w)(t,"float32"));const n={x:t};return s.T2.runKernel(r._s9,n)}})},5248:(e,t,n)=>{"use strict";n.d(t,{H:()=>u});var s=n(1585),r=n(5441),a=n(5119),i=n(7195),o=n(929),l=n(2302);const u=(0,o.op)({conv2DBackpropFilter_:function(e,t,n,o,u,c="NHWC",d){let h=e;3===e.rank&&(h=(0,l.t)(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let p=t;3===p.rank&&(p=(0,l.t)(t,[1,t.shape[0],t.shape[1],t.shape[2]])),a.vA(4===h.rank,()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${h.shape}.`),a.vA(4===p.rank,()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${p.shape}.`),a.vA(4===n.length,()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`);const f="NHWC"===c?h.shape[3]:h.shape[1],m="NHWC"===c?p.shape[3]:p.shape[1];a.vA(f===n[2],()=>`Error in conv2dDerFilter: depth of input ${f}) must match input depth in filter (${n[2]}.`),a.vA(m===n[3],()=>`Error in conv2dDerFilter: depth of dy (${m}) must match output depth for filter (${n[3]}).`),i.s_("conv2dDerFilter",u,d);const g={x:h,dy:p},y={strides:o,pad:u,dataFormat:c,dimRoundingMode:d,filterShape:n};return s.T2.runKernel(r.rFm,g,y)}})},5287:(e,t,n)=>{"use strict";n.d(t,{AS:()=>g,DZ:()=>m,Gc:()=>v,Hi:()=>h,Hs:()=>I,IS:()=>u,ME:()=>f,Ok:()=>C,Sm:()=>o,W4:()=>S,aC:()=>y,fL:()=>c,gJ:()=>N,gY:()=>l,go:()=>T,jh:()=>x,jz:()=>w,kB:()=>b,m1:()=>p,rE:()=>k,rm:()=>d});var s=n(1585),r=n(6574),a=n(259),i=n(565);function o(){(0,r._K)().set("PROD",!0)}function l(){(0,r._K)().set("DEBUG",!0)}function u(){(0,r._K)().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function c(e){(0,r._K)().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function d(){s.T2.disposeVariables()}function h(){return s.T2}function p(){return s.T2.memory()}function f(e){return s.T2.profile(e)}function m(e,t){return s.T2.tidy(e,t)}function g(e){(0,i.getTensorsInContainer)(e).forEach(e=>e.dispose())}function y(e){return s.T2.keep(e)}function b(e){return s.T2.time(e)}function x(e){return s.T2.setBackend(e)}function v(){return s.T2.ready()}function w(){return s.T2.backendName}function k(e){s.T2.removeBackend(e)}function T(e){return s.T2.findBackend(e)}function S(e){return s.T2.findBackendFactory(e)}function N(e,t,n=1){return s.T2.registerBackend(e,t,n)}function I(){return s.T2.backend}function C(e,t){(0,r._K)().setPlatform(e,t)}(0,a.B4)(c)},5295:(e,t,n)=>{"use strict";function s(e,t=!1){console.log(e.toString(t))}n.d(t,{y:()=>s})},5441:(e,t,n)=>{"use strict";n.d(t,{$dB:()=>_,$jE:()=>nn,$zE:()=>R,A1h:()=>M,A8B:()=>Vt,BK4:()=>bn,BLA:()=>Ze,BRl:()=>ae,Blb:()=>Ut,BoJ:()=>jt,BxF:()=>de,C8s:()=>Ht,CQC:()=>ft,Cg$:()=>$e,CwD:()=>Ce,D7i:()=>It,Ddj:()=>Xt,Dr:()=>xn,DvZ:()=>Yt,E3$:()=>Te,EkD:()=>o,ElG:()=>pe,EwU:()=>dn,FAs:()=>on,FCQ:()=>St,FSt:()=>u,Fin:()=>Pt,GZp:()=>Qt,HNs:()=>S,Ik2:()=>k,J3C:()=>Mt,JiE:()=>Ft,Jp_:()=>c,KXH:()=>C,L6G:()=>qt,LB5:()=>N,LDN:()=>We,LG0:()=>Ke,LRy:()=>yt,LWX:()=>at,LXA:()=>De,M6A:()=>Zt,MRQ:()=>U,Mn0:()=>P,MnK:()=>B,N4F:()=>T,Ncv:()=>dt,O4G:()=>ge,OAQ:()=>ve,ODT:()=>lt,OMN:()=>i,ORI:()=>K,PH8:()=>a,P_L:()=>Nt,Pah:()=>ne,PbM:()=>sn,Q6t:()=>gt,QDP:()=>A,QKF:()=>h,Qgm:()=>te,R23:()=>vt,RMm:()=>fn,RUm:()=>Re,RW8:()=>Fe,RXX:()=>Ue,SDM:()=>nt,SQl:()=>ce,T7M:()=>wn,TBb:()=>ln,TL8:()=>je,TMz:()=>H,TOR:()=>At,ToN:()=>Le,TyE:()=>f,UcO:()=>Jt,VAI:()=>Be,VCH:()=>b,Vvy:()=>r,WRv:()=>Pe,WT3:()=>Qe,WuN:()=>Wt,X$8:()=>q,X0$:()=>Ne,X4r:()=>$t,XQy:()=>kt,XhZ:()=>ye,XmO:()=>J,YAb:()=>en,YVe:()=>zt,ZgB:()=>he,Zl4:()=>st,_s9:()=>re,aAr:()=>vn,awo:()=>yn,bCz:()=>ut,bP9:()=>Z,cHb:()=>He,cS:()=>x,dFH:()=>Bt,dLy:()=>un,dXR:()=>hn,dv8:()=>we,e0f:()=>rt,epO:()=>p,fUj:()=>xt,g5A:()=>qe,gC7:()=>L,gIW:()=>ke,hVg:()=>Ct,hgw:()=>Tt,ho8:()=>y,hql:()=>Ot,huO:()=>bt,i5R:()=>fe,iGz:()=>z,iPs:()=>Se,iW0:()=>tn,iuW:()=>an,jAQ:()=>w,jM4:()=>ze,jOE:()=>wt,jfg:()=>O,jgd:()=>Kt,jj_:()=>W,jxD:()=>X,kdj:()=>ht,l0G:()=>et,l6P:()=>_t,lLS:()=>be,lNG:()=>Ye,ljI:()=>s,lxb:()=>g,lzr:()=>xe,mH5:()=>mt,mIA:()=>Ie,mM$:()=>ot,mnI:()=>Ae,mxL:()=>me,nVu:()=>Y,nY8:()=>V,nZd:()=>_e,oFs:()=>rn,oJ2:()=>pt,ox3:()=>ie,p2J:()=>D,pJc:()=>Et,pPe:()=>pn,p_m:()=>d,pk0:()=>Q,pnw:()=>gn,pr3:()=>$,pyJ:()=>ct,rFG:()=>Gt,rFm:()=>F,rGP:()=>ue,rsH:()=>se,sDr:()=>ee,t3d:()=>Ve,tG8:()=>Ee,tGH:()=>j,u$b:()=>Dt,u8Z:()=>l,uWl:()=>Rt,urI:()=>it,vI1:()=>Lt,vaV:()=>E,vj7:()=>I,wNW:()=>G,wwC:()=>v,wx0:()=>cn,x7F:()=>Xe,xJ3:()=>mn,xu7:()=>Je,yPW:()=>Me,ySp:()=>Ge,ybN:()=>oe,ybj:()=>le,ylV:()=>tt,zP9:()=>m,zfU:()=>Oe});const s="Abs",r="Acos",a="Acosh",i="Add",o="AddN",l="All",u="Any",c="ArgMax",d="ArgMin",h="Asin",p="Asinh",f="Atan",m="Atanh",g="Atan2",y="AvgPool",b="AvgPoolGrad",x="AvgPool3D",v="AvgPool3DGrad",w="BatchMatMul",k="BatchToSpaceND",T="Bincount",S="BitwiseAnd",N="BroadcastTo",I="BroadcastArgs",C="Cast",A="Ceil",E="ClipByValue",$="Complex",R="ComplexAbs",_="Concat",D="Conv2D",F="Conv2DBackpropFilter",O="Conv2DBackpropInput",M="Conv3D",z="Conv3DBackpropFilterV2",L="Conv3DBackpropInputV2",P="Cos",B="Cosh",W="Cumprod",V="Cumsum",U="CropAndResize",G="DenseBincount",H="DepthToSpace",j="DepthwiseConv2dNative",q="DepthwiseConv2dNativeBackpropFilter",Y="DepthwiseConv2dNativeBackpropInput",K="Diag",X="Dilation2D",Z="Dilation2DBackpropInput",Q="Dilation2DBackpropFilter",J="Draw",ee="RealDiv",te="Einsum",ne="Elu",se="EluGrad",re="Erf",ae="Equal",ie="Exp",oe="ExpandDims",le="Expm1",ue="FFT",ce="Fill",de="FlipLeftRight",he="Floor",pe="FloorDiv",fe="FusedBatchNorm",me="GatherV2",ge="GatherNd",ye="Greater",be="GreaterEqual",xe="Identity",ve="IFFT",we="Imag",ke="IsFinite",Te="IsInf",Se="IsNan",Ne="LeakyRelu",Ie="Less",Ce="LessEqual",Ae="LinSpace",Ee="Log",$e="Log1p",Re="LogicalAnd",_e="LogicalNot",De="LogicalOr",Fe="LogicalXor",Oe="LogSoftmax",Me="LowerBound",ze="LRN",Le="LRNGrad",Pe="MatrixBandPart",Be="Max",We="Maximum",Ve="MaxPool",Ue="MaxPoolGrad",Ge="MaxPool3D",He="MaxPool3DGrad",je="MaxPoolWithArgmax",qe="Mean",Ye="Min",Ke="Minimum",Xe="MirrorPad",Ze="Mod",Qe="Multinomial",Je="Multiply",et="Neg",tt="NotEqual",nt="NonMaxSuppressionV3",st="NonMaxSuppressionV4",rt="NonMaxSuppressionV5",at="OnesLike",it="OneHot",ot="Pack",lt="PadV2",ut="Pool",ct="Pow",dt="Prelu",ht="Prod",pt="RaggedGather",ft="RaggedRange",mt="RaggedTensorToTensor",gt="Range",yt="Real",bt="Reciprocal",xt="Relu",vt="Reshape",wt="ResizeNearestNeighbor",kt="ResizeNearestNeighborGrad",Tt="ResizeBilinear",St="ResizeBilinearGrad",Nt="Relu6",It="Reverse",Ct="Round",At="Rsqrt",Et="ScatterNd",$t="TensorScatterUpdate",Rt="SearchSorted",_t="Select",Dt="Selu",Ft="Slice",Ot="Sin",Mt="Sinh",zt="Sign",Lt="Sigmoid",Pt="Softplus",Bt="Sqrt",Wt="Sum",Vt="SpaceToBatchND",Ut="SplitV",Gt="Softmax",Ht="SparseFillEmptyRows",jt="SparseReshape",qt="SparseSegmentMean",Yt="SparseSegmentSum",Kt="SparseToDense",Xt="SquaredDifference",Zt="Square",Qt="StaticRegexReplace",Jt="StridedSlice",en="StringNGrams",tn="StringSplit",nn="StringToHashBucketFast",sn="Sub",rn="Tan",an="Tanh",on="Tile",ln="TopK",un="Transform",cn="Transpose",dn="Unique",hn="Unpack",pn="UnsortedSegmentSum",fn="UpperBound",mn="ZerosLike",gn="Step",yn="FromPixels",bn="RotateWithOffset",xn="_FusedMatMul",vn="FusedConv2D",wn="FusedDepthwiseConv2D"},5537:(e,t,n)=>{"use strict";n.d(t,{P:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({zerosLike_:function(e){const t={x:(0,a.YT)(e,"x","zerosLike")};return s.T2.runKernel(r.xJ3,t)}})},5606:(e,t,n)=>{"use strict";n.d(t,{R:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({floor_:function(e){const t={x:(0,a.YT)(e,"x","floor","float32")};return s.T2.runKernel(r.ZgB,t)}})},5645:(e,t,n)=>{"use strict";n.d(t,{n:()=>c});var s=n(1830),r=n(8189),a=n(9258),i=n(6522),o=n(929),l=n(8968),u=n(6030);const c=(0,o.op)({logSigmoid_:function(e){const t=(0,r.YT)(e,"x","logSigmoid");return(0,s._X)(e=>({value:(0,i.H)((0,u.l)((0,i.H)(e))),gradFunc:t=>(0,a.l)(t,(0,l.r)((0,i.H)(e)))}))(t)}})},5661:(e,t,n)=>{"use strict";n.d(t,{e:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({pad_:function(e,t,n=0){const i=(0,a.YT)(e,"x","pad");if(0===i.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const o={paddings:t,constantValue:n},l={x:i};return s.T2.runKernel(r.ODT,l,o)}})},5685:(e,t,n)=>{"use strict";n.d(t,{i:()=>s});const s={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8}},5702:(e,t,n)=>{"use strict";n.d(t,{d:()=>a});var s=n(3879),r=n(9171);function a(e,t){if(((0,s.isTypedArray)(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&(0,s.isTypedArray)(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return(0,r.Q)(e,[],[],t)}},5703:(e,t,n)=>{"use strict";n.d(t,{N:()=>o});var s=n(1585),r=n(5441),a=n(565),i=n(8189);const o=(0,n(929).op)({matMul_:function(e,t,n=!1,o=!1){let l=(0,i.YT)(e,"a","matMul"),u=(0,i.YT)(t,"b","matMul");[l,u]=(0,a.makeTypesMatch)(l,u);const c={a:l,b:u},d={transposeA:n,transposeB:o};return s.T2.runKernel(r.jAQ,c,d)}})},5793:(e,t,n)=>{"use strict";n.d(t,{E:()=>a});var s=n(1585),r=n(8189);const a=(0,n(929).op)({square_:function(e){const t=(0,r.YT)(e,"x","square");return s.T2.runKernel("Square",{x:t},{})}})},5817:()=>{},5838:(e,t,n)=>{"use strict";n.r(t),n.d(t,{Abs:()=>mt.ljI,Acos:()=>mt.Vvy,Acosh:()=>mt.PH8,AdadeltaOptimizer:()=>Ae,AdagradOptimizer:()=>$e,AdamOptimizer:()=>De,AdamaxOptimizer:()=>Me,Add:()=>mt.OMN,AddN:()=>mt.EkD,All:()=>mt.u8Z,Any:()=>mt.FSt,ArgMax:()=>mt.Jp_,ArgMin:()=>mt.p_m,Asin:()=>mt.QKF,Asinh:()=>mt.epO,Atan:()=>mt.TyE,Atan2:()=>mt.lxb,Atanh:()=>mt.zP9,AvgPool:()=>mt.ho8,AvgPool3D:()=>mt.cS,AvgPool3DGrad:()=>mt.wwC,AvgPoolGrad:()=>mt.VCH,BatchMatMul:()=>mt.jAQ,BatchToSpaceND:()=>mt.Ik2,Bincount:()=>mt.N4F,BitwiseAnd:()=>mt.HNs,BroadcastArgs:()=>mt.vj7,BroadcastTo:()=>mt.LB5,Cast:()=>mt.KXH,Ceil:()=>mt.QDP,ClipByValue:()=>mt.vaV,Complex:()=>mt.pr3,ComplexAbs:()=>mt.$zE,Concat:()=>mt.$dB,Conv2D:()=>mt.p2J,Conv2DBackpropFilter:()=>mt.rFm,Conv2DBackpropInput:()=>mt.jfg,Conv3D:()=>mt.A1h,Conv3DBackpropFilterV2:()=>mt.iGz,Conv3DBackpropInputV2:()=>mt.gC7,Cos:()=>mt.Mn0,Cosh:()=>mt.MnK,CropAndResize:()=>mt.MRQ,Cumprod:()=>mt.jj_,Cumsum:()=>mt.nY8,DataStorage:()=>cs.GJ,DenseBincount:()=>mt.wNW,DepthToSpace:()=>mt.TMz,DepthwiseConv2dNative:()=>mt.tGH,DepthwiseConv2dNativeBackpropFilter:()=>mt.X$8,DepthwiseConv2dNativeBackpropInput:()=>mt.nVu,Diag:()=>mt.ORI,Dilation2D:()=>mt.jxD,Dilation2DBackpropFilter:()=>mt.pk0,Dilation2DBackpropInput:()=>mt.bP9,Draw:()=>mt.XmO,ENV:()=>b.Km,Einsum:()=>mt.Qgm,Elu:()=>mt.Pah,EluGrad:()=>mt.rsH,Environment:()=>b.OH,Equal:()=>mt.BRl,Erf:()=>mt._s9,Exp:()=>mt.ox3,ExpandDims:()=>mt.ybN,Expm1:()=>mt.ybj,FFT:()=>mt.rGP,Fill:()=>mt.SQl,FlipLeftRight:()=>mt.BxF,Floor:()=>mt.ZgB,FloorDiv:()=>mt.ElG,FromPixels:()=>mt.awo,FusedBatchNorm:()=>mt.i5R,FusedConv2D:()=>mt.aAr,FusedDepthwiseConv2D:()=>mt.T7M,GatherNd:()=>mt.O4G,GatherV2:()=>mt.mxL,Greater:()=>mt.XhZ,GreaterEqual:()=>mt.lLS,IFFT:()=>mt.OAQ,Identity:()=>mt.lzr,Imag:()=>mt.dv8,IsFinite:()=>mt.gIW,IsInf:()=>mt.E3$,IsNan:()=>mt.iPs,KernelBackend:()=>cs.uI,LRN:()=>mt.jM4,LRNGrad:()=>mt.ToN,LeakyRelu:()=>mt.X0$,Less:()=>mt.mIA,LessEqual:()=>mt.CwD,LinSpace:()=>mt.mnI,Log:()=>mt.tG8,Log1p:()=>mt.Cg$,LogSoftmax:()=>mt.zfU,LogicalAnd:()=>mt.RUm,LogicalNot:()=>mt.nZd,LogicalOr:()=>mt.LXA,LogicalXor:()=>mt.RW8,LowerBound:()=>mt.yPW,MatrixBandPart:()=>mt.WRv,Max:()=>mt.VAI,MaxPool:()=>mt.t3d,MaxPool3D:()=>mt.ySp,MaxPool3DGrad:()=>mt.cHb,MaxPoolGrad:()=>mt.RXX,MaxPoolWithArgmax:()=>mt.TL8,Maximum:()=>mt.LDN,Mean:()=>mt.g5A,Min:()=>mt.lNG,Minimum:()=>mt.LG0,MirrorPad:()=>mt.x7F,Mod:()=>mt.BLA,MomentumOptimizer:()=>Le,Multinomial:()=>mt.WT3,Multiply:()=>mt.xu7,Neg:()=>mt.l0G,NonMaxSuppressionV3:()=>mt.SDM,NonMaxSuppressionV4:()=>mt.Zl4,NonMaxSuppressionV5:()=>mt.e0f,NotEqual:()=>mt.ylV,OP_SCOPE_SUFFIX:()=>Yt.BTT,OneHot:()=>mt.urI,OnesLike:()=>mt.LWX,Optimizer:()=>Ce,OptimizerConstructors:()=>jt,Pack:()=>mt.mM$,PadV2:()=>mt.ODT,Pool:()=>mt.bCz,Pow:()=>mt.pyJ,Prelu:()=>mt.Ncv,Prod:()=>mt.kdj,RMSPropOptimizer:()=>Pe,RaggedGather:()=>mt.oJ2,RaggedRange:()=>mt.CQC,RaggedTensorToTensor:()=>mt.mH5,Range:()=>mt.Q6t,Rank:()=>qt.rg,Real:()=>mt.LRy,RealDiv:()=>mt.sDr,Reciprocal:()=>mt.huO,Reduction:()=>Kt.i,Relu:()=>mt.fUj,Relu6:()=>mt.P_L,Reshape:()=>mt.R23,ResizeBilinear:()=>mt.hgw,ResizeBilinearGrad:()=>mt.FCQ,ResizeNearestNeighbor:()=>mt.jOE,ResizeNearestNeighborGrad:()=>mt.XQy,Reverse:()=>mt.D7i,RotateWithOffset:()=>mt.BK4,Round:()=>mt.hVg,Rsqrt:()=>mt.TOR,SGDOptimizer:()=>ze,ScatterNd:()=>mt.pJc,SearchSorted:()=>mt.uWl,Select:()=>mt.l6P,Selu:()=>mt.u$b,Sigmoid:()=>mt.vI1,Sign:()=>mt.YVe,Sin:()=>mt.hql,Sinh:()=>mt.J3C,Slice:()=>mt.JiE,Softmax:()=>mt.rFG,Softplus:()=>mt.Fin,SpaceToBatchND:()=>mt.A8B,SparseFillEmptyRows:()=>mt.C8s,SparseReshape:()=>mt.BoJ,SparseSegmentMean:()=>mt.L6G,SparseSegmentSum:()=>mt.DvZ,SparseToDense:()=>mt.jgd,SplitV:()=>mt.Blb,Sqrt:()=>mt.dFH,Square:()=>mt.M6A,SquaredDifference:()=>mt.Ddj,StaticRegexReplace:()=>mt.GZp,Step:()=>mt.pnw,StridedSlice:()=>mt.UcO,StringNGrams:()=>mt.YAb,StringSplit:()=>mt.iW0,StringToHashBucketFast:()=>mt.$jE,Sub:()=>mt.PbM,Sum:()=>mt.WuN,Tan:()=>mt.oFs,Tanh:()=>mt.iuW,Tensor:()=>ce.qY,TensorBuffer:()=>ce.yl,TensorScatterUpdate:()=>mt.X4r,Tile:()=>mt.FAs,TopK:()=>mt.TBb,Transform:()=>mt.dLy,Transpose:()=>mt.wx0,Unique:()=>mt.EwU,Unpack:()=>mt.dXR,UnsortedSegmentSum:()=>mt.pPe,UpperBound:()=>mt.RMm,Variable:()=>ce.rT,ZerosLike:()=>mt.xJ3,_FusedMatMul:()=>mt.Dr,abs:()=>Yt.tnl,acos:()=>Yt.HQu,acosh:()=>Yt.FqL,add:()=>Yt.WQq,addN:()=>Yt.QiD,all:()=>Yt.Q7R,any:()=>Yt.bzn,argMax:()=>Yt.FLi,argMin:()=>Yt.XRg,asin:()=>Yt.qRo,asinh:()=>Yt.yHs,atan:()=>Yt.rYl,atan2:()=>Yt.FPz,atanh:()=>Yt.rfv,avgPool:()=>Yt.$jT,avgPool3d:()=>Yt.sub,backend:()=>he.Hs,backend_util:()=>d,basicLSTMCell:()=>Yt.lZX,batchNorm:()=>Yt.$v7,batchNorm2d:()=>Yt.BFc,batchNorm3d:()=>Yt.kSi,batchNorm4d:()=>Yt.T5N,batchToSpaceND:()=>Yt.GTe,bincount:()=>Yt.HbZ,bitwiseAnd:()=>Yt.vjT,booleanMaskAsync:()=>Yt.ftb,broadcastArgs:()=>Yt.ROE,broadcastTo:()=>Yt.hOW,broadcast_util:()=>ft,browser:()=>o,buffer:()=>Yt.ra8,cast:()=>Yt.wgE,ceil:()=>Yt.mkO,clipByValue:()=>Yt.zQh,clone:()=>Yt.o8B,complex:()=>Yt.faB,concat:()=>Yt.xWs,concat1d:()=>Yt.I1m,concat2d:()=>Yt.RPU,concat3d:()=>Yt.O5O,concat4d:()=>Yt.P1l,conv1d:()=>Yt.kA9,conv2d:()=>Yt.Xtf,conv2dTranspose:()=>Yt.wX9,conv3d:()=>Yt.IPL,conv3dTranspose:()=>Yt.jIJ,copyRegisteredKernels:()=>gt.Cf,cos:()=>Yt.gnS,cosh:()=>Yt.yIG,cosineWindow:()=>Yt._jP,cumprod:()=>Yt.Lp0,cumsum:()=>Yt.rCv,customGrad:()=>xe._X,denseBincount:()=>Yt.aOp,deprecationWarn:()=>he.fL,depthToSpace:()=>Yt.Rj8,depthwiseConv2d:()=>Yt.Gl3,device_util:()=>s,diag:()=>Yt.smy,dilation2d:()=>Yt.X7t,disableDeprecationWarnings:()=>he.IS,dispose:()=>he.AS,disposeVariables:()=>he.rm,div:()=>Yt.y4m,divNoNan:()=>Yt.ek5,dot:()=>Yt.Omf,dropout:()=>Yt.EZY,einsum:()=>Yt._3C,elu:()=>Yt.Pqc,enableDebugMode:()=>he.gY,enableProdMode:()=>he.Sm,enclosingPowerOfTwo:()=>Yt.FJY,engine:()=>he.Hi,ensureShape:()=>Yt.QP2,env:()=>b._K,equal:()=>Yt.LCg,erf:()=>Yt.Y12,euclideanNorm:()=>Yt.p4S,exp:()=>Yt.oNF,expandDims:()=>Yt.UG6,expm1:()=>Yt.IYd,eye:()=>Yt.y5U,fft:()=>Yt.hVP,fill:()=>Yt.GSj,findBackend:()=>he.go,findBackendFactory:()=>he.W4,floor:()=>Yt.RIf,floorDiv:()=>Yt.wh_,fused:()=>Yt.cZk,gather:()=>Yt.kgh,gatherND:()=>Yt.SY9,gather_util:()=>l,getBackend:()=>he.jz,getGradient:()=>gt.vQ,getKernel:()=>gt._5,getKernelsForBackend:()=>gt.Op,grad:()=>xe.Dv,grads:()=>xe.ok,greater:()=>Yt.rhj,greaterEqual:()=>Yt.DQN,ifft:()=>Yt.KGM,imag:()=>Yt.ngS,image:()=>Yt.Slp,inTopKAsync:()=>Yt.U4u,io:()=>a,irfft:()=>Yt.ggX,isFinite:()=>Yt.MIs,isInf:()=>Yt.EN4,isNaN:()=>Yt.yrW,keep:()=>he.aC,kernel_impls:()=>h,leakyRelu:()=>Yt.H8d,less:()=>Yt.M7h,lessEqual:()=>Yt.InN,linalg:()=>Yt.mPL,linspace:()=>Yt.mT8,localResponseNormalization:()=>Yt.Kgs,log:()=>Yt.Rm2,log1p:()=>Yt.Kko,logSigmoid:()=>Yt.nqI,logSoftmax:()=>Yt.HPB,logSumExp:()=>Yt.VZ,logicalAnd:()=>Yt.n76,logicalNot:()=>Yt.NSZ,logicalOr:()=>Yt.ztW,logicalXor:()=>Yt.rxB,losses:()=>Yt.YYh,lowerBound:()=>Yt.yzS,matMul:()=>Yt.NoW,math:()=>i,max:()=>Yt.T9B,maxPool:()=>Yt.jgi,maxPool3d:()=>Yt.NYV,maxPoolWithArgmax:()=>Yt.RO,maximum:()=>Yt.PhQ,mean:()=>Yt.i2o,memory:()=>he.m1,meshgrid:()=>Yt.OYQ,min:()=>Yt.jkA,minimum:()=>Yt.BpO,mirrorPad:()=>Yt.FFZ,mod:()=>Yt.ziu,moments:()=>Yt.Clk,movingAverage:()=>Yt.CRk,mul:()=>Yt.lKK,multiRNNCell:()=>Yt.YDF,multinomial:()=>Yt.OjQ,neg:()=>Yt.HZy,nextFrame:()=>Qt,norm:()=>Yt.xbf,notEqual:()=>Yt.Ec,oneHot:()=>Yt.Mw0,ones:()=>Yt.SaS,onesLike:()=>Yt.P61,op:()=>Yt.op,outerProduct:()=>Yt.X4o,pad:()=>Yt.eVF,pad1d:()=>Yt.BZs,pad2d:()=>Yt.grY,pad3d:()=>Yt.XHu,pad4d:()=>Yt.WLX,pool:()=>Yt.dzn,pow:()=>Yt.n7C,prelu:()=>Yt.NsG,print:()=>Yt.yyV,prod:()=>Yt._eU,profile:()=>he.ME,raggedGather:()=>Yt.whe,raggedRange:()=>Yt.iyU,raggedTensorToTensor:()=>Yt.Q0_,rand:()=>Yt._9M,randomGamma:()=>Yt.pR9,randomNormal:()=>Yt.FE$,randomStandardNormal:()=>Yt.m0H,randomUniform:()=>Yt.YeY,randomUniformInt:()=>Yt.HYA,range:()=>Yt.y17,ready:()=>he.Gc,real:()=>Yt.xav,reciprocal:()=>Yt.VOZ,registerBackend:()=>he.gJ,registerGradient:()=>gt.kr,registerKernel:()=>gt.tA,relu:()=>Yt.VVh,relu6:()=>Yt.j__,removeBackend:()=>he.rE,reshape:()=>Yt.tQQ,reverse:()=>Yt.BEg,reverse1d:()=>Yt.QD2,reverse2d:()=>Yt.LMr,reverse3d:()=>Yt.I2l,reverse4d:()=>Yt.JYU,rfft:()=>Yt.z8$,round:()=>Yt.LIG,rsqrt:()=>Yt.Z$r,scalar:()=>Yt.d_2,scatterND:()=>Yt.NFr,scatter_util:()=>Ct,searchSorted:()=>Yt.sZg,selu:()=>Yt.WfX,separableConv2d:()=>Yt.wdz,serialization:()=>r,setBackend:()=>he.jh,setPlatform:()=>he.Ok,setdiff1dAsync:()=>Yt.F12,sigmoid:()=>Yt.ry7,sign:()=>Yt._SZ,signal:()=>Yt.vPA,sin:()=>Yt.F8e,sinh:()=>Yt.L0l,slice:()=>Yt.dik,slice1d:()=>Yt.Q$M,slice2d:()=>Yt.zAd,slice3d:()=>Yt.wck,slice4d:()=>Yt.R0O,slice_util:()=>At,softmax:()=>Yt.Vs9,softplus:()=>Yt.lw0,spaceToBatchND:()=>Yt.eDJ,sparse:()=>Yt.lMo,sparseToDense:()=>Yt.Zhr,spectral:()=>Yt.lOn,split:()=>Yt.lDo,sqrt:()=>Yt.RZD,square:()=>Yt.EwI,squaredDifference:()=>Yt.Pbu,squeeze:()=>Yt.r2V,stack:()=>Yt.t$z,step:()=>Yt.PMw,stridedSlice:()=>Yt.Ym9,string:()=>Yt.YjP,sub:()=>Yt.jbE,sum:()=>Yt.czq,sumOutType:()=>qt.ch,tan:()=>Yt.Mlm,tanh:()=>Yt.ymU,tensor:()=>Yt.OEK,tensor1d:()=>Yt.tGX,tensor2d:()=>Yt.KtR,tensor3d:()=>Yt.$_$,tensor4d:()=>Yt.g9W,tensor5d:()=>Yt.Lpo,tensor6d:()=>Yt.yxw,tensorScatterUpdate:()=>Yt.NNh,tensor_util:()=>Et,test_util:()=>u,tidy:()=>he.DZ,tile:()=>Yt.Vsq,time:()=>he.kB,topk:()=>Yt.rfw,train:()=>Xt,transpose:()=>Yt.mgz,truncatedNormal:()=>Yt.efE,unique:()=>Yt.AmM,unregisterGradient:()=>gt.rY,unregisterKernel:()=>gt.iP,unsortedSegmentSum:()=>Yt.zAU,unstack:()=>Yt.K$i,upcastType:()=>qt.Tu,upperBound:()=>Yt.rni,util:()=>$t,valueAndGrad:()=>xe.jY,valueAndGrads:()=>xe.mu,variable:()=>Yt.bvq,variableGrads:()=>xe.y7,version_core:()=>Ht,where:()=>Yt._M9,whereAsync:()=>Yt.YJN,zeros:()=>Yt.Ul9,zerosLike:()=>Yt.POl});var s={};n.r(s),n.d(s,{isBrowser:()=>y,isMobile:()=>g,mockIsMobile:()=>m});var r={};n.r(r),n.d(r,{Serializable:()=>Te,SerializationMap:()=>Se,getRegisteredName:()=>Ie,registerClass:()=>Ne});var a={};n.r(a),n.d(a,{CompositeArrayBuffer:()=>I.D,browserFiles:()=>Ge,browserHTTPRequest:()=>et,concatenateArrayBuffers:()=>v.AQ,copyModel:()=>te,decodeWeights:()=>v.CY,decodeWeightsStream:()=>v.s5,encodeWeights:()=>v.aG,fromMemory:()=>rt,fromMemorySync:()=>at,getLoadHandlers:()=>N,getModelArtifactsForJSON:()=>v.Ej,getModelArtifactsForJSONSync:()=>v.Rl,getModelArtifactsInfoForJSON:()=>v.oR,getSaveHandlers:()=>S,getWeightSpecs:()=>v.Xf,http:()=>Je,isHTTPScheme:()=>Ze,listModels:()=>J,loadWeights:()=>Ye,moveModel:()=>ne,registerLoadRouter:()=>T,registerSaveRouter:()=>k,removeModel:()=>ee,weightsLoaderFactory:()=>Ke,withSaveHandler:()=>it,withSaveHandlerSync:()=>ot});var i={};n.r(i),n.d(i,{confusionMatrix:()=>pt});var o={};n.r(o),n.d(o,{draw:()=>St,fromPixels:()=>Nt,fromPixelsAsync:()=>wt,toPixels:()=>Tt});var l={};n.r(l),n.d(l,{prepareAndValidate:()=>It});var u={};n.r(u),n.d(u,{TEST_EPSILON_FLOAT16:()=>_t,createVideoElement:()=>Ut,encodeStrings:()=>Vt,expectArrayBuffersEqual:()=>Wt,expectArraysClose:()=>Dt,expectArraysEqual:()=>zt,expectNumbersClose:()=>Lt,expectPromiseToFail:()=>Mt,expectValuesInRange:()=>Bt,play:()=>Gt,testEpsilon:()=>Ft});var c={};n.r(c),n.d(c,{collectGatherOpShapeInfo:()=>as,computeOutShape:()=>rs,segOpComputeOptimalWindowSize:()=>ss});var d={};n.r(d),n.d(d,{ERF_A1:()=>vn,ERF_A2:()=>wn,ERF_A3:()=>kn,ERF_A4:()=>Tn,ERF_A5:()=>Sn,ERF_P:()=>xn,PARALLELIZE_THRESHOLD:()=>cn,RowPartitionType:()=>nn,SELU_SCALE:()=>bn.X,SELU_SCALEALPHA:()=>bn.j,applyActivation:()=>rn.f2,assertAndGetBroadcastShape:()=>ft.assertAndGetBroadcastShape,assertAxesAreInnerMostDims:()=>Jt.WC,assertParamsConsistent:()=>en,assignToTypedArray:()=>Rn,axesAreInnerMostDims:()=>Jt.WH,calculateShapes:()=>Ct.calculateShapes,checkEinsumDimSizes:()=>Bn,checkPadOnDimRoundingMode:()=>sn.s_,combineLocations:()=>Jt.aF,combineRaggedTensorToTensorShapes:()=>an,complexWithEvenIndex:()=>An,complexWithOddIndex:()=>En,computeConv2DInfo:()=>sn.uf,computeConv3DInfo:()=>sn.p$,computeDefaultPad:()=>sn.G8,computeDilation2DInfo:()=>sn.YQ,computeOptimalWindowSize:()=>dn,computeOutAndReduceShapes:()=>Jt.lb,computeOutShape:()=>tn,computePool2DInfo:()=>sn.E6,computePool3DInfo:()=>sn.l5,convertConv2DDataFormat:()=>sn.$Q,decodeEinsumEquation:()=>Ln,eitherStridesOrDilationsAreOne:()=>sn.G0,expandShapeToKeepDim:()=>Jt.SM,exponent:()=>Dn,exponents:()=>_n,fromStringArrayToUint8:()=>os,fromUint8ToStringArray:()=>is,getAxesPermutation:()=>Jt.Em,getBroadcastDims:()=>ft.getBroadcastDims,getComplexWithIndex:()=>$n,getEinsumComputePath:()=>Wn,getEinsumPermutation:()=>Pn,getFusedBiasGradient:()=>rn.Do,getFusedDyActivation:()=>rn.XB,getImageCenter:()=>hn,getInnerMostAxes:()=>Jt.fK,getPermuted:()=>fn,getRaggedRank:()=>ln,getReductionAxes:()=>ft.getReductionAxes,getReshaped:()=>pn,getReshapedPermuted:()=>mn,getRowPartitionTypesHelper:()=>on,getSliceBeginCoords:()=>gn,getSliceSize:()=>yn,getSparseFillEmptyRowsIndicesDenseShapeMismatch:()=>Hn,getSparseFillEmptyRowsNegativeIndexErrorMessage:()=>jn,getSparseFillEmptyRowsOutOfRangeIndexErrorMessage:()=>qn,getSparseReshapeEmptyTensorZeroOutputDimErrorMessage:()=>Xn,getSparseReshapeInputOutputMismatchErrorMessage:()=>Qn,getSparseReshapeInputOutputMultipleErrorMessage:()=>Zn,getSparseReshapeMultipleNegativeOneOutputDimErrorMessage:()=>Yn,getSparseReshapeNegativeOutputDimErrorMessage:()=>Kn,getSparseSegmentReductionIndicesOutOfRangeErrorMessage:()=>ns,getSparseSegmentReductionNegativeSegmentIdsErrorMessage:()=>Jn,getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage:()=>es,getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage:()=>ts,getUndoAxesPermutation:()=>Jt.gx,isIdentityPermutation:()=>Vn,log:()=>Nn.R,mergeRealAndImagArrays:()=>In,prepareAndValidate:()=>It,prepareSplitSize:()=>Gn,segment_util:()=>c,shouldFuse:()=>rn.zE,slice_util:()=>At,splitRealAndImagArrays:()=>Cn,stridesOrDilationsArePositive:()=>sn.qk,tupleValuesAreOne:()=>sn.Dh,upcastType:()=>qt.Tu,validateDefaultValueShape:()=>un,validateInput:()=>Ct.validateInput,validateUpdateShape:()=>Ct.validateUpdateShape,warn:()=>Nn.i});var h={};n.r(h),n.d(h,{nonMaxSuppressionV3Impl:()=>ls.c7,nonMaxSuppressionV4Impl:()=>ls.ZS,nonMaxSuppressionV5Impl:()=>ls.ut,whereImpl:()=>us.Y});var p=n(1585);let f;function m(e){f=e}function g(e){if(void 0!==f)return f;if(e||"undefined"!=typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;const t=e.userAgent||e.vendor||("undefined"!=typeof window?window.opera:"");if(!t){const t=e;return t.userAgentData&&t.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function y(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}var b=n(6574);const x=(0,b._K)();x.registerFlag("DEBUG",()=>!1,e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),x.registerFlag("IS_BROWSER",()=>y()),x.registerFlag("IS_NODE",()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node),x.registerFlag("IS_CHROME",()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),x.registerFlag("IS_SAFARI",()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Safari/.test(navigator.userAgent)&&/Apple/.test(navigator.vendor)),x.registerFlag("PROD",()=>!1),x.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>x.getBool("DEBUG")),x.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),x.registerFlag("IS_TEST",()=>!1),x.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",()=>x.getBool("DEBUG")),x.registerFlag("WRAP_TO_IMAGEBITMAP",()=>!1),x.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",()=>!1),x.registerFlag("USE_SETTIMEOUTCUSTOM",()=>!1);var v=n(7084);class w{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==w.instance&&(w.instance=new w),w.instance}static registerSaveRouter(e){w.getInstance().saveRouters.push(e)}static registerLoadRouter(e){w.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return w.getHandlers(e,"save")}static getLoadHandlers(e,t){return w.getHandlers(e,"load",t)}static getHandlers(e,t,n){const s=[];return("load"===t?w.getInstance().loadRouters:w.getInstance().saveRouters).forEach(t=>{const r=t(e,n);null!==r&&s.push(r)}),s}}const k=e=>w.registerSaveRouter(e),T=e=>w.registerLoadRouter(e),S=e=>w.getSaveHandlers(e),N=(e,t)=>w.getLoadHandlers(e,t);var I=n(6734);const C="tensorflowjs",A="models_store",E="model_info_store";function $(){if(!(0,b._K)().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function R(e){const t=e.result;t.createObjectStore(A,{keyPath:"modelPath"}),t.createObjectStore(E,{keyPath:"modelPath"})}class _{constructor(e){if(this.indexedDB=$(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise((e,n)=>{const s=this.indexedDB.open(C,1);s.onupgradeneeded=()=>R(s),s.onsuccess=()=>{const r=s.result;if(null==t){const t=r.transaction(A,"readonly"),s=t.objectStore(A).get(this.modelPath);s.onsuccess=()=>{if(null==s.result)return r.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(s.result.modelArtifacts)},s.onerror=e=>(r.close(),n(s.error)),t.oncomplete=()=>r.close()}else{t.weightData=I.D.join(t.weightData);const s=(0,v.oR)(t),a=r.transaction(E,"readwrite");let i,o,l=a.objectStore(E);try{i=l.put({modelPath:this.modelPath,modelArtifactsInfo:s})}catch(e){return n(e)}i.onsuccess=()=>{o=r.transaction(A,"readwrite");const i=o.objectStore(A);let u;try{u=i.put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:s})}catch(e){return n(e)}u.onsuccess=()=>e({modelArtifactsInfo:s}),u.onerror=e=>{l=a.objectStore(E);const t=l.delete(this.modelPath);t.onsuccess=()=>(r.close(),n(u.error)),t.onerror=e=>(r.close(),n(u.error))}},i.onerror=e=>(r.close(),n(i.error)),a.oncomplete=()=>{null==o?r.close():o.oncomplete=()=>r.close()}}},s.onerror=e=>n(s.error)})}}_.URL_SCHEME="indexeddb://";const D=e=>{return(0,b._K)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(_.URL_SCHEME)?(t=e.slice(_.URL_SCHEME.length),new _(t)):null;var t};w.registerSaveRouter(D),w.registerLoadRouter(D);class F{constructor(){this.indexedDB=$()}async listModels(){return new Promise((e,t)=>{const n=this.indexedDB.open(C,1);n.onupgradeneeded=()=>R(n),n.onsuccess=()=>{const s=n.result,r=s.transaction(E,"readonly"),a=r.objectStore(E).getAll();a.onsuccess=()=>{const t={};for(const e of a.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},a.onerror=e=>(s.close(),t(a.error)),r.oncomplete=()=>s.close()},n.onerror=e=>t(n.error)})}async removeModel(e){var t;return e=(t=e).startsWith(_.URL_SCHEME)?t.slice(_.URL_SCHEME.length):t,new Promise((t,n)=>{const s=this.indexedDB.open(C,1);s.onupgradeneeded=()=>R(s),s.onsuccess=()=>{const r=s.result,a=r.transaction(E,"readwrite"),i=a.objectStore(E),o=i.get(e);let l;o.onsuccess=()=>{if(null==o.result)return r.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const s=i.delete(e),a=()=>{l=r.transaction(A,"readwrite");const s=l.objectStore(A).delete(e);s.onsuccess=()=>t(o.result.modelArtifactsInfo),s.onerror=e=>n(o.error)};s.onsuccess=a,s.onerror=e=>(a(),r.close(),n(o.error))}},o.onerror=e=>(r.close(),n(o.error)),a.oncomplete=()=>{null==l?r.close():l.oncomplete=()=>r.close()}},s.onerror=e=>n(s.error)})}}var O=n(5119);const M="/",z="tensorflowjs_models",L="info",P="model_topology",B="weight_specs",W="weight_data",V="model_metadata";function U(e){return{info:[z,e,L].join(M),topology:[z,e,P].join(M),weightSpecs:[z,e,B].join(M),weightData:[z,e,W].join(M),modelMetadata:[z,e,V].join(M)}}function G(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function H(e){const t=e.split(M);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(M)}class j{constructor(e){if(!(0,b._K)().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=U(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),s=(0,v.oR)(e),r=I.D.join(e.weightData);try{this.LS.setItem(this.keys.info,JSON.stringify(s)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,(0,v.l3)(r));const a={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,initializerSignature:null!=e.initializerSignature?e.initializerSignature:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(a)),{modelArtifactsInfo:s}}catch(e){throw G(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${s.modelTopologyBytes}, weightSpecsBytes=${s.weightSpecsBytes}, weightDataBytes=${s.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const s=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==s)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=s;const r=this.LS.getItem(this.keys.modelMetadata);if(null!=r){const e=JSON.parse(r);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(t.initializerSignature=e.initializerSignature),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=(0,v.jf)(a),t}}j.URL_SCHEME="localstorage://";const q=e=>{return(0,b._K)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(j.URL_SCHEME)?(t=e.slice(j.URL_SCHEME.length),new j(t)):null;var t};w.registerSaveRouter(q),w.registerLoadRouter(q);class Y{constructor(){(0,O.vA)((0,b._K)().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),(0,O.vA)("undefined"==typeof window||void 0!==window.localStorage,()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){const e={},t=z+M,n=M+L;for(let s=0;s<this.LS.length;++s){const r=this.LS.key(s);r.startsWith(t)&&r.endsWith(n)&&(e[H(r)]=JSON.parse(this.LS.getItem(r)))}return e}async removeModel(e){var t;const n=U(e=(t=e).startsWith(j.URL_SCHEME)?t.slice(j.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const s=JSON.parse(this.LS.getItem(n.info));return G(n),s}}const K="://";class X{constructor(){this.managers={}}static getInstance(){return null==X.instance&&(X.instance=new X),X.instance}static registerManager(e,t){(0,O.vA)(null!=e,()=>"scheme must not be undefined or null."),e.endsWith(K)&&(e=e.slice(0,e.indexOf(K))),(0,O.vA)(e.length>0,()=>"scheme must not be an empty string.");const n=X.getInstance();(0,O.vA)(null==n.managers[e],()=>`A model store manager is already registered for scheme '${e}'.`),n.managers[e]=t}static getManager(e){const t=X.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(X.getInstance().managers)}}function Z(e){if(-1===e.indexOf(K))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${X.getSchemes().join(",")}`);return{scheme:e.split(K)[0],path:e.split(K)[1]}}async function Q(e,t,n=!1){(0,O.vA)(e!==t,()=>`Old path and new path are the same: '${e}'`);const s=w.getLoadHandlers(e);(0,O.vA)(s.length>0,()=>`Copying failed because no load handler is found for source URL ${e}.`),(0,O.vA)(s.length<2,()=>`Copying failed because more than one (${s.length}) load handlers for source URL ${e}.`);const r=s[0],a=w.getSaveHandlers(t);(0,O.vA)(a.length>0,()=>`Copying failed because no save handler is found for destination URL ${t}.`),(0,O.vA)(a.length<2,()=>`Copying failed because more than one (${s.length}) save handlers for destination URL ${t}.`);const i=a[0],o=Z(e).scheme,l=Z(e).path,u=o===Z(e).scheme,c=await r.load();n&&u&&await X.getManager(o).removeModel(l);const d=await i.save(c);return n&&!u&&await X.getManager(o).removeModel(l),d.modelArtifactsInfo}async function J(){const e=X.getSchemes(),t={};for(const n of e){const e=await X.getManager(n).listModels();for(const s in e)t[n+K+s]=e[s]}return t}async function ee(e){const t=Z(e);return X.getManager(t.scheme).removeModel(t.path)}async function te(e,t){return Q(e,t,!1)}async function ne(e,t){return Q(e,t,!0)}var se=n(6448);class re{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}setTimeoutCustom(e,t){"undefined"!=typeof window&&(0,b._K)().getBool("USE_SETTIMEOUTCUSTOM")?(this.functionRefs.push(e),setTimeout(()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")},t),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",e=>{e.source===window&&e.data.name===this.messageName&&(e.stopPropagation(),(0,this.functionRefs[e.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0))},!0))):setTimeout(e,t)}isTypedArray(e){return(0,se.Y)(e)}}if((0,b._K)().get("IS_BROWSER")){(0,b._K)().setPlatform("browser",new re);try{X.registerManager(j.URL_SCHEME,new Y)}catch(e){}try{X.registerManager(_.URL_SCHEME,new F)}catch(e){}}let ae;(0,b._K)().get("IS_NODE")&&!(0,b._K)().get("IS_BROWSER")&&(0,b._K)().setPlatform("node",new class{constructor(){this.util=n(8590),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=(0,b._K)().global.fetch?(0,b._K)().global.fetch(e,t):(null==ae&&(ae=n(5817)),ae(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}isTypedArray(e){return this.util.types.isFloat32Array(e)||this.util.types.isInt32Array(e)||this.util.types.isUint8Array(e)||this.util.types.isUint8ClampedArray(e)}});var ie=n(448),oe=n(9809),le=n(125),ue=n(5295),ce=n(259);(0,p.Ye)();const de={buffer:ie.r,cast:oe.w,clone:le.o,print:ue.y};(0,ce.Q5)(de);var he=n(5287),pe=n(7523),fe=n(9359),me=n(9258),ge=n(9348),ye=n(5793),be=n(5537),xe=n(1830),ve=n(5702);const we=new Map,ke=new Map;class Te{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class Se{constructor(){this.classNameMap={}}static getMap(){return null==Se.instance&&(Se.instance=new Se),Se.instance}static register(e){Se.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function Ne(e,t,n){(0,O.vA)(null!=e.className,()=>"Class being registered does not have the static className property defined."),(0,O.vA)("string"==typeof e.className,()=>"className is required to be a string, but got type "+typeof e.className),(0,O.vA)(e.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),void 0===t&&(t="Custom"),void 0===n&&(n=e.className);const s=t+">"+n;return Se.register(e),we.set(s,e),ke.set(e,s),e}function Ie(e){return ke.has(e)?ke.get(e):e.className}class Ce extends Te{minimize(e,t=!1,n){const{value:s,grads:r}=this.computeGradients(e,n);if(null!=n){const e=n.map(e=>({name:e.name,tensor:r[e.name]}));this.applyGradients(e)}else this.applyGradients(r);return(0,he.AS)(r),t?s:(s.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return(0,xe.y7)(e,t)}dispose(){null!=this.iterations_&&(0,he.AS)(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:(0,ve.d)(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(Ce,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class Ae extends Ce{static get className(){return"Adadelta"}constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=p.T2.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const s=p.T2.registeredVariables[t],r=!1;null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:(0,he.DZ)(()=>(0,be.P)(s).variable(r))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:(0,he.DZ)(()=>(0,be.P)(s).variable(r))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const i=this.accumulatedGrads[n].variable,o=this.accumulatedUpdates[n].variable;(0,he.DZ)(()=>{const e=(0,pe.W)((0,me.l)(i,this.rho),(0,me.l)((0,ye.E)(a),1-this.rho)),t=(0,me.l)((0,fe.y)((0,ge.R)((0,pe.W)(o,this.epsilon)),(0,ge.R)((0,pe.W)(i,this.epsilon))),a),n=(0,pe.W)((0,me.l)(o,this.rho),(0,me.l)((0,ye.E)(t),1-this.rho));i.assign(e),o.assign(n);const r=(0,pe.W)((0,me.l)(t,-this.learningRate),s);s.assign(r)})}),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&((0,he.AS)(this.accumulatedGrads.map(e=>e.variable)),(0,he.AS)(this.accumulatedUpdates.map(e=>e.variable)))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2,n=!1;this.accumulatedGrads=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(n)})),this.accumulatedUpdates=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(n)}))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}var Ee=n(6111);class $e extends Ce{static get className(){return"Adagrad"}constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const s=p.T2.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:(0,he.DZ)(()=>(0,Ee.G)(s.shape,this.initialAccumulatorValue).variable(e))}}const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const a=this.accumulatedGrads[n].variable;(0,he.DZ)(()=>{const e=(0,pe.W)(a,(0,ye.E)(r));a.assign(e);const t=(0,pe.W)((0,me.l)((0,fe.y)(r,(0,ge.R)((0,pe.W)(e,p.T2.backend.epsilon()))),-this.learningRate),s);s.assign(t)})}),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&(0,he.AS)(this.accumulatedGrads.map(e=>e.variable))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),this.accumulatedGrads=e.map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}var Re=n(8990),_e=n(7126);class De extends Ce{static get className(){return"Adam"}constructor(e,t,n,s=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],(0,he.DZ)(()=>{this.accBeta1=(0,ve.d)(t).variable(),this.accBeta2=(0,ve.d)(n).variable()}),null==s&&(this.epsilon=p.T2.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);(0,he.DZ)(()=>{const n=(0,_e.j)(1,this.accBeta1),s=(0,_e.j)(1,this.accBeta2);t.forEach((t,r)=>{const a=p.T2.registeredVariables[t],i=!1;null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:`${t}/m`,variable:(0,he.DZ)(()=>(0,be.P)(a).variable(i))}),null==this.accumulatedSecondMoment[r]&&(this.accumulatedSecondMoment[r]={originalName:`${t}/v`,variable:(0,he.DZ)(()=>(0,be.P)(a).variable(i))});const o=Array.isArray(e)?e[r].tensor:e[t];if(null==o)return;const l=this.accumulatedFirstMoment[r].variable,u=this.accumulatedSecondMoment[r].variable,c=(0,pe.W)((0,me.l)(l,this.beta1),(0,me.l)(o,1-this.beta1)),d=(0,pe.W)((0,me.l)(u,this.beta2),(0,me.l)((0,ye.E)(o),1-this.beta2)),h=(0,fe.y)(c,n),f=(0,fe.y)(d,s);l.assign(c),u.assign(d);const m=(0,pe.W)((0,me.l)((0,fe.y)(h,(0,pe.W)((0,ge.R)(f),this.epsilon)),-this.learningRate),a);a.assign(m)}),this.accBeta1.assign((0,me.l)(this.accBeta1,this.beta1)),this.accBeta2.assign((0,me.l)(this.accBeta2,this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&(0,he.AS)(this.accumulatedFirstMoment.map(e=>e.variable)),null!=this.accumulatedSecondMoment&&(0,he.AS)(this.accumulatedSecondMoment.map(e=>e.variable))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),(0,he.DZ)(()=>{this.accBeta1.assign((0,Re.n)(this.beta1,this.iterations_+1)),this.accBeta2.assign((0,Re.n)(this.beta2,this.iterations_+1))});const t=e.length/2,n=!1;this.accumulatedFirstMoment=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(n)})),this.accumulatedSecondMoment=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(n)}))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}var Fe=n(4888),Oe=n(178);class Me extends Ce{static get className(){return"Adamax"}constructor(e,t,n,s=null,r=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.decay=r,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],(0,he.DZ)(()=>{this.iteration=(0,ve.d)(0).variable(),this.accBeta1=(0,ve.d)(t).variable()}),null==s&&(this.epsilon=p.T2.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);(0,he.DZ)(()=>{const n=(0,_e.j)(1,this.accBeta1),s=(0,fe.y)(-this.learningRate,(0,pe.W)((0,me.l)(this.iteration,this.decay),1));t.forEach((t,r)=>{const a=p.T2.registeredVariables[t],i=!1;null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:`${t}/m`,variable:(0,be.P)(a).variable(i)}),null==this.accumulatedWeightedInfNorm[r]&&(this.accumulatedWeightedInfNorm[r]={originalName:`${t}/v`,variable:(0,be.P)(a).variable(i)});const o=Array.isArray(e)?e[r].tensor:e[t];if(null==o)return;const l=this.accumulatedFirstMoment[r].variable,u=this.accumulatedWeightedInfNorm[r].variable,c=(0,pe.W)((0,me.l)(l,this.beta1),(0,me.l)(o,1-this.beta1)),d=(0,me.l)(u,this.beta2),h=(0,Fe.t)(o),f=(0,Oe.P)(d,h);l.assign(c),u.assign(f);const m=(0,pe.W)((0,me.l)((0,fe.y)(s,n),(0,fe.y)(c,(0,pe.W)(f,this.epsilon))),a);a.assign(m)}),this.iteration.assign((0,pe.W)(this.iteration,1)),this.accBeta1.assign((0,me.l)(this.accBeta1,this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&(0,he.AS)(this.accumulatedFirstMoment.map(e=>e.variable)),null!=this.accumulatedWeightedInfNorm&&(0,he.AS)(this.accumulatedWeightedInfNorm.map(e=>e.variable))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}class ze extends Ce{static get className(){return"SGD"}constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const r=p.T2.registeredVariables[t];(0,he.DZ)(()=>{const e=(0,pe.W)((0,me.l)(this.c,s),r);r.assign(e)})}),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=(0,he.aC)((0,ve.d)(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}class Le extends ze{static get className(){return"Momentum"}constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=(0,ve.d)(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const s=p.T2.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:`${t}/momentum`,variable:(0,he.DZ)(()=>(0,be.P)(s).variable(e))}}const r=this.accumulations[n].variable,a=Array.isArray(e)?e[n].tensor:e[t];null!=a&&(0,he.DZ)(()=>{let e;const t=(0,pe.W)((0,me.l)(this.m,r),a);e=this.useNesterov?(0,pe.W)((0,me.l)(this.c,(0,pe.W)(a,(0,me.l)(t,this.m))),s):(0,pe.W)((0,me.l)(this.c,t),s),r.assign(t),s.assign(e)})}),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&(0,he.AS)(this.accumulations.map(e=>e.variable))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),this.accumulations=e.map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}class Pe extends Ce{static get className(){return"RMSProp"}constructor(e,t=.9,n=0,s=null,r=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=s,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=r,null==s&&(this.epsilon=p.T2.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const s=p.T2.registeredVariables[t],r=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:(0,he.DZ)(()=>(0,be.P)(s).variable(r))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:(0,he.DZ)(()=>(0,be.P)(s).variable(r))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:(0,he.DZ)(()=>(0,be.P)(s).variable(r))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const i=this.accumulatedMeanSquares[n].variable,o=this.accumulatedMoments[n].variable;(0,he.DZ)(()=>{const e=(0,pe.W)((0,me.l)(i,this.decay),(0,me.l)((0,ye.E)(a),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,r=(0,pe.W)((0,me.l)(t,this.decay),(0,me.l)(a,1-this.decay)),l=(0,fe.y)((0,me.l)(a,this.learningRate),(0,ge.R)((0,_e.j)(e,(0,pe.W)((0,ye.E)(r),this.epsilon)))),u=(0,pe.W)((0,me.l)(o,this.momentum),l);i.assign(e),t.assign(r),o.assign(u);const c=(0,_e.j)(s,u);s.assign(c)}else{const e=(0,pe.W)((0,me.l)(i,this.decay),(0,me.l)((0,ye.E)(a),1-this.decay)),t=(0,pe.W)((0,me.l)(o,this.momentum),(0,fe.y)((0,me.l)(a,this.learningRate),(0,ge.R)((0,pe.W)(e,this.epsilon))));i.assign(e),o.assign(t);const n=(0,_e.j)(s,t);s.assign(n)}})}),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&(0,he.AS)(this.accumulatedMeanSquares.map(e=>e.variable)),null!=this.accumulatedMeanGrads&&this.centered&&(0,he.AS)(this.accumulatedMeanGrads.map(e=>e.variable)),null!=this.accumulatedMoments&&(0,he.AS)(this.accumulatedMoments.map(e=>e.variable))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(n)})),this.accumulatedMoments=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(n)})),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map(e=>({originalName:e.name,variable:e.tensor.variable(n)})))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}const Be=[Ae,$e,De,Me,Le,Pe,ze];function We(e){return new Promise(e=>setTimeout(e)).then(e)}class Ve{constructor(e){if(!(0,b._K)().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(Ve.URL_SCHEME)&&(e=e.slice(Ve.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=I.D.join(e.weightData),n=window.URL.createObjectURL(new Blob([t],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const t=[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}],s=(0,v.zV)(e,t),r=window.URL.createObjectURL(new Blob([JSON.stringify(s)],{type:"application/json"})),a=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(a.download=this.modelJsonFileName,a.href=r,await We(()=>a.dispatchEvent(new MouseEvent("click"))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=n,await We(()=>e.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:(0,v.oR)(e)}}}}Ve.URL_SCHEME="downloads://";class Ue{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise((e,t)=>{const n=new FileReader;n.onload=n=>{const s=JSON.parse(n.target.result),r=s.modelTopology;if(null==r)return void t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));if(null==s.weightsManifest)return void t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));if(0===this.weightsFiles.length)return void e({modelTopology:r});const a=(0,v.Ej)(s,e=>this.loadWeights(e));e(a)},n.onerror=e=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),n.readAsText(this.jsonFile)})}loadWeights(e){const t=[],n=[];for(const s of e)t.push(...s.weights),n.push(...s.paths);const s=this.checkManifestAndWeightFiles(e),r=n.map(e=>this.loadWeightsFile(e,s[e]));return Promise.all(r).then(e=>[t,e])}loadWeightsFile(e,t){return new Promise((n,s)=>{const r=new FileReader;r.onload=e=>{const t=e.target.result;n(t)},r.onerror=t=>s(`Failed to weights data from file of path '${e}'.`),r.readAsArrayBuffer(t)})}checkManifestAndWeightFiles(e){const t=[],n=this.weightsFiles.map(e=>(0,v.P8)(e.name)),s={};for(const r of e)r.paths.forEach(e=>{const r=(0,v.P8)(e);if(-1!==t.indexOf(r))throw new Error(`Duplicate file basename found in weights manifest: '${r}'`);if(t.push(r),-1===n.indexOf(r))throw new Error(`Weight file with basename '${r}' is not provided.`);s[e]=this.weightsFiles[n.indexOf(r)]});if(t.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return s}}function Ge(e){return new Ue(e)}function He(e,t,n,s){!function(e){(0,O.vA)(null!=e&&Array.isArray(e)&&e.length>0,()=>"promises must be a none empty array")}(e),function(e,t){(0,O.vA)(e>=0&&e<=1,()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`),(0,O.vA)(t>=0&&t<=1,()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`),(0,O.vA)(t>=e,()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`)}(n=null==n?0:n,s=null==s?1:s);let r=0;return Promise.all(e.map(a=>(a.then(a=>{const i=n+ ++r/e.length*(s-n);return t(i),a}),a)))}w.registerSaveRouter(e=>(0,b._K)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Ve.URL_SCHEME)?function(e="model"){return new Ve(e)}(e.slice(Ve.URL_SCHEME.length)):null);var je=n(5685);async function qe(e,t){null==t&&(t={});const n=null==t.fetchFunc?(0,b._K)().platform.fetch:t.fetchFunc,s=e.map(e=>n(e,t.requestInit,{isBinary:!0})),r=(null==t.onProgress?await Promise.all(s):await He(s,t.onProgress,0,.5)).map(e=>e.arrayBuffer());return null==t.onProgress?await Promise.all(r):await He(r,t.onProgress,.5,1)}async function Ye(e,t="",n,s){return Ke(e=>qe(e,{requestInit:s}))(e,t,n)}function Ke(e){return async(t,n="",s)=>{const r=t.map(()=>!1),a={},i=null!=s?s.map(()=>!1):[],o=[];if(t.forEach((e,t)=>{let n=0;e.weights.forEach(e=>{const l="quantization"in e?e.quantization.dtype:e.dtype,u=je.i[l]*O.Ze(e.shape),c=()=>{r[t]=!0,null==a[t]&&(a[t]=[]),a[t].push({manifestEntry:e,groupOffset:n,sizeBytes:u})};null!=s?s.forEach((t,n)=>{t===e.name&&(c(),i[n]=!0)}):c(),o.push(e.name),n+=u})}),!i.every(e=>e)){const e=s.filter((e,t)=>!i[t]);throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${o.join(", ")}.`)}const l=r.reduce((e,t,n)=>(t&&e.push(n),e),[]),u=[];l.forEach(e=>{t[e].paths.forEach(e=>{const t=n+(n.endsWith("/")?"":"/")+e;u.push(t)})});const c=await e(u),d={};let h=0;return l.forEach(e=>{const n=t[e].paths.length,s=new I.D(c.slice(h,h+n));a[e].forEach(e=>{const t=s.slice(e.groupOffset,e.groupOffset+e.sizeBytes),n=(0,v.CY)(t,[e.manifestEntry]);for(const e in n)d[e]=n[e]}),h+=n}),d}}class Xe{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?((0,O.vA)("function"==typeof t.fetchFunc,()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=t.fetchFunc):this.fetch=(0,b._K)().platform.fetch,(0,O.vA)(null!=e&&e.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(e)&&(0,O.vA)(2===e.length,()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{},this.loadOptions=t}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=[{paths:["./model.weights.bin"],weights:e.weightSpecs}],s=(0,v.zV)(e,n);if(t.body.append("model.json",new Blob([JSON.stringify(s)],{type:"application/json"}),"model.json"),null!=e.weightData){const n=I.D.join(e.weightData);t.body.append("model.weights.bin",new Blob([n],{type:"application/octet-stream"}),"model.weights.bin")}const r=await this.fetch(this.path,t);if(r.ok)return{modelArtifactsInfo:(0,v.oR)(e),responses:[r]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${r.status}.`)}async loadModelJSON(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,s=t.weightsManifest;if(null==n&&null==s)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return t}async load(){if(this.loadOptions.streamWeights)return this.loadStream();const e=await this.loadModelJSON();return(0,v.Ej)(e,e=>this.loadWeights(e))}async loadStream(){const e=await this.loadModelJSON(),t=await this.getWeightUrls(e.weightsManifest),n=(0,v.Xf)(e.weightsManifest);return Object.assign(Object.assign({},e),{weightSpecs:n,getWeightStream:()=>function(e,t){var n;const s=null==t.fetchFunc?(0,b._K)().platform.fetch:t.fetchFunc;let r,a=0;return null===(n=t.onProgress)||void 0===n||n.call(t,0),new ReadableStream({pull:async n=>{for(var i;a<e.length;){if(!r){const n=(await s(e[a],t.requestInit,{isBinary:!0})).body;r=n.getReader()}const{done:o,value:l}=await r.read();if(!o)return void n.enqueue(l);a++,r=void 0,null===(i=t.onProgress)||void 0===i||i.call(t,a/e.length)}n.close()}})}(t,this.loadOptions)})}async getWeightUrls(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,s]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?");return[e.substring(0,t)+"/",n>t?e.substring(n):""]}(t),r=this.weightPathPrefix||n,a=[],i=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?i.push(this.weightUrlConverter(e)):a.push(r+e+s);return this.weightUrlConverter&&a.push(...await Promise.all(i)),a}async loadWeights(e){const t=await this.getWeightUrls(e);return[(0,v.Xf)(e),await qe(t,this.loadOptions)]}}function Ze(e){return null!=e.match(Xe.URL_SCHEME_REGEX)}Xe.URL_SCHEME_REGEX=/^https?:\/\//;const Qe=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every(e=>Ze(e)):Ze(e),n)return Je(e,t)}return null};function Je(e,t){return new Xe(e,t)}function et(e,t){return Je(e,t)}w.registerSaveRouter(Qe),w.registerLoadRouter(Qe);class tt{constructor(e){this.modelArtifacts=e}load(){return this.modelArtifacts}}class nt{constructor(e){this.saveHandler=e}save(e){return this.saveHandler(e)}}class st{constructor(e){e.load&&(this.load=()=>Promise.resolve(e.load())),e.save&&(this.save=t=>Promise.resolve(e.save(t)))}}function rt(e,t,n,s){return new st(at(...arguments))}function at(e,t,n,s){return 1===arguments.length?null!=e.modelTopology||null!=e.weightSpecs?new tt(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new tt({modelTopology:e})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new tt({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:s}))}function it(e){return new nt(e)}function ot(e){return new nt(e)}var lt=n(8189),ut=n(5703),ct=n(1760),dt=n(929),ht=n(7703);const pt=(0,dt.op)({confusionMatrix_:function(e,t,n){const s=(0,lt.YT)(e,"labels","confusionMatrix"),r=(0,lt.YT)(t,"predictions","confusionMatrix");O.vA(null==n||n>0&&Number.isInteger(n),()=>`If provided, numClasses must be a positive integer, but got ${n}`),O.vA(1===s.rank,()=>`Expected the rank of labels to be 1, but got ${s.rank}`),O.vA(1===r.rank,()=>`Expected the rank of predictions to be 1, but got ${r.rank}`),O.vA(s.shape[0]===r.shape[0],()=>`Mismatch in the number of examples: ${s.shape[0]} vs. ${r.shape[0]}. Labels and predictions should have the same number of elements.`),O.vA(n>0&&Number.isInteger(n),()=>`numClasses is required to be a positive integer, but got ${n}`);const a=(0,ct.M)((0,oe.w)(s,"int32"),n),i=(0,ct.M)((0,oe.w)(r,"int32"),n),o=(0,ht.m)(a),l=(0,ut.N)(o,i);return(0,oe.w)(l,"int32")}});var ft=n(2198),mt=n(5441),gt=n(7074),yt=n(2768);let bt,xt=!1;function vt(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,s=!1,r=!1,a=!1,i=!1,o=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)s=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)r=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)a=!0;else if(null!=e.getContext)i=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);o=!0}if(null!=(0,gt._5)(mt.awo,p.T2.backendName)){const n={pixels:e},s={numChannels:t};return p.T2.runKernel(mt.awo,n,s)}const[l,u]=r?[e.videoWidth,e.videoHeight]:[e.width,e.height];let c,d;if(i)c=e.getContext("2d").getImageData(0,0,l,u).data;else if(s||n)c=e.data;else if(a||r||o){if(null==bt)if("undefined"==typeof document){if("undefined"==typeof OffscreenCanvas||"undefined"==typeof OffscreenCanvasRenderingContext2D)throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");bt=new OffscreenCanvas(1,1).getContext("2d")}else bt=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});bt.canvas.width=l,bt.canvas.height=u,bt.drawImage(e,0,0,l,u),c=bt.getImageData(0,0,l,u).data}if(4===t)d=new Int32Array(c);else{const e=l*u;d=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)d[n*t+e]=c[4*n+e]}const h=[u,l,t];return(0,yt.$)(d,h,"int32")}async function wt(e,t=3){let n=null;if((0,b._K)().getBool("WRAP_TO_IMAGEBITMAP")&&function(e){return"undefined"!=typeof window&&"undefined"!=typeof ImageBitmap&&window.hasOwnProperty("createImageBitmap")&&!(e instanceof ImageBitmap)&&function(e){return null!=e&&0!==e.width&&0!==e.height}(e)&&!function(e){return null!=e&&e.data instanceof Uint8Array}(e)}(e)){let t;try{t=await createImageBitmap(e,{premultiplyAlpha:"none"})}catch(e){t=null}n=null!=t&&t.width===e.width&&t.height===e.height?t:e}else n=e;return vt(n,t)}function kt(e){if(2!==e.rank&&3!==e.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${e.rank}.`);const t=2===e.rank?1:e.shape[2];if(t>4||2===t)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${t}`);if("float32"!==e.dtype&&"int32"!==e.dtype)throw new Error(`Unsupported type for toPixels: ${e.dtype}. Please use float32 or int32 tensors.`)}async function Tt(e,t){let n=(0,lt.YT)(e,"img","toPixels");if(!(e instanceof ce.qY)){const e=n;n=(0,oe.w)(e,"int32"),e.dispose()}kt(n);const[s,r]=n.shape.slice(0,2),a=2===n.rank?1:n.shape[2],i=await n.data(),o="float32"===n.dtype?255:1,l=new Uint8ClampedArray(r*s*4);for(let e=0;e<s*r;++e){const t=[0,0,0,255];for(let s=0;s<a;s++){const r=i[e*a+s];if("float32"===n.dtype){if(r<0||r>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${r}.`)}else if("int32"===n.dtype&&(r<0||r>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${r}.`);1===a?(t[0]=r*o,t[1]=r*o,t[2]=r*o):t[s]=r*o}const s=4*e;l[s+0]=Math.round(t[0]),l[s+1]=Math.round(t[1]),l[s+2]=Math.round(t[2]),l[s+3]=Math.round(t[3])}if(null!=t){xt||null!=(0,gt._5)(mt.XmO,p.T2.backendName)&&(console.warn("tf.browser.toPixels is not efficient to draw tensor on canvas. Please try tf.browser.draw instead."),xt=!0),t.width=r,t.height=s;const e=t.getContext("2d"),n=new ImageData(l,r,s);e.putImageData(n,0,0)}return n!==e&&n.dispose(),l}function St(e,t,n){let s=(0,lt.YT)(e,"img","draw");if(!(e instanceof ce.qY)){const e=s;s=(0,oe.w)(e,"int32"),e.dispose()}kt(s),function(e){const t=(null==e?void 0:e.alpha)||1;if(t>1||t<0)throw new Error(`Alpha value ${t} is suppoed to be in range [0 - 1].`)}(null==n?void 0:n.imageOptions);const r={image:s},a={canvas:t,options:n};p.T2.runKernel(mt.XmO,r,a)}const Nt=(0,dt.op)({fromPixels_:vt});function It(e,t){const n=e.shape.length,s=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(s<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[s-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[s-1]} vs. ${n}`);if(0===(0,O.Ze)(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const r=t.shape,a=r[r.length-1];let i=1;for(let e=0;e<r.length-1;++e)i*=r[e];const o=e.shape,l=r.slice();l.pop();let u=1;for(let e=a;e<n;++e)u*=o[e],l.push(o[e]);const c=[...(0,O.Ur)(e.shape).map(e=>e/u),1].slice(0,a);return[l,i,u,c]}var Ct=n(6170),At=n(4969),Et=n(565),$t=n(3879);const Rt=.001,_t=.1;function Dt(e,t,n){return null==n&&(n=Ft()),Ot(e,t,(e,t)=>Pt(e,t,n))}function Ft(){return 32===p.T2.backend.floatPrecision()?Rt:_t}function Ot(e,t,n){let s=!0;if(((0,$t.isTypedArray)(e)||(0,$t.isTypedArray)(t))&&(s=!1),(0,$t.isTypedArray)(e)&&(0,$t.isTypedArray)(t)&&(s=!0),s){const n=e.constructor.name,s=t.constructor.name;if(n!==s)throw new Error(`Arrays are of different type. Actual: ${n}. Expected: ${s}`)}if(Array.isArray(e)&&Array.isArray(t)){const n=(0,lt.MZ)(e),s=(0,lt.MZ)(t);if(!(0,O.r1)(n,s))throw new Error(`Arrays have different shapes. Actual: [${n}]. Expected: [${s}]`)}const r=(0,$t.isTypedArray)(e)?e:(0,$t.flatten)(e),a=(0,$t.isTypedArray)(t)?t:(0,$t.flatten)(t);if(r.length!==a.length)throw new Error(`Arrays have different lengths actual: ${r.length} vs expected: ${a.length}.\nActual:   ${r}.\nExpected: ${a}.`);for(let e=0;e<a.length;++e){const t=r[e],s=a[e];if(!n(t,s))throw new Error(`Arrays differ: actual[${e}] = ${t}, expected[${e}] = ${s}.\nActual:   ${r}.\nExpected: ${a}.`)}"undefined"!=typeof expect&&expect().nothing()}function Mt(e,t){e().then(()=>t.fail(),()=>t()),"undefined"!=typeof expect&&expect().nothing()}function zt(e,t){const n="string"==typeof t||"number"==typeof t||"boolean"==typeof t?[t]:t;return(0,O.Kg)(e)||(0,O.Kg)(e[0])||(0,O.Kg)(t)||(0,O.Kg)(t[0])?Ot(e,n,(e,t)=>e==t):Ot(e,t,(e,t)=>Pt(e,t,0))}function Lt(e,t,n){if(null==n&&(n=Ft()),!Pt(e,t,n))throw new Error(`Numbers differ: actual === ${e}, expected === ${t}`);"undefined"!=typeof expect&&expect().nothing()}function Pt(e,t,n){return!isFinite(e)&&!isFinite(t)||!(isNaN(e)||isNaN(t)||Math.abs(e-t)>n)}function Bt(e,t,n){for(let s=0;s<e.length;s++)if(e[s]<t||e[s]>n)throw new Error(`Value out of range:${e[s]} low: ${t}, high: ${n}`)}function Wt(e,t){const n=new Float32Array(e),s=new Float32Array(t);if(n.length!==s.length)throw new Error(`Expected ArrayBuffer to be of length ${s.length}, but it was ${n.length}`);for(let e=0;e<s.length;e++)if(n[e]!==s[e])throw new Error(`Expected ArrayBuffer value at ${e} to be ${s[e]} but got ${n[e]} instead`)}function Vt(e){for(let t=0;t<e.length;t++){const n=e[t];Array.isArray(n)?Vt(n):e[t]=(0,$t.encodeString)(n)}return e}function Ut(e){const t=document.createElement("video");return"playsInline"in t&&(t.playsInline=!0),t.muted=!0,t.loop=!0,t.style.position="fixed",t.style.left="0px",t.style.top="0px",t.preload="auto",t.appendChild(e),new Promise(e=>{t.addEventListener("loadeddata",n=>e(t)),t.load()})}async function Gt(e){await e.play(),"requestVideoFrameCallback"in e&&await new Promise(t=>{e.requestVideoFrameCallback(t)})}const Ht="4.22.0";class jt{static sgd(e){return new ze(e)}static momentum(e,t,n=!1){return new Le(e,t,n)}static rmsprop(e,t=.9,n=0,s=null,r=!1){return new Pe(e,t,n,s,r)}static adam(e=.001,t=.9,n=.999,s=null){return new De(e,t,n,s)}static adadelta(e=.001,t=.95,n=null){return new Ae(e,t,n)}static adamax(e=.002,t=.9,n=.999,s=null,r=0){return new Me(e,t,n,s,r)}static adagrad(e,t=.1){return new $e(e,t)}}var qt=n(2046),Yt=n(7270),Kt=n(4703);const Xt=jt,Zt="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();function Qt(){return new Promise(e=>Zt(()=>e()))}var Jt=n(1078);function en(e,t){const n=e[0].length;e.forEach((e,t)=>{O.vA(e.length===n,()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`)}),O.vA(t>=0&&t<n,()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`);const s=e[0];e.forEach((e,r)=>{for(let a=0;a<n;a++)O.vA(a===t||e[a]===s[a],()=>`Error in concat${n}D: Shape of tensors[${r}] (${e}) does not match the shape of the rest (${s}) along the non-concatenated axis ${r}.`)})}function tn(e,t){const n=e[0].slice();for(let s=1;s<e.length;s++)n[t]+=e[s][t];return n}var nn,sn=n(7195),rn=n(8646);function an(e,t,n){let s=new Array;if(null==n&&null==t)return s;if(null==t)for(;s.length<e+n.length;)s.push(-1);else s=t.slice();if(null==n)return s;if(e+n.length!==s.length)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${e+n.length}, but shape.rank = ${s.length}`);for(let r=1;r<n.length;++r){const a=n[r],i=s[s.length-n.length+r],o=s[i];if(a>=0)if(o>=0){if(o!==a)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${r+e}] = ${a} but shape[${r+e}] = ${o}`)}else s[i]=a}return s}function on(e){const t={FIRST_DIM_SIZE:nn.FIRST_DIM_SIZE,VALUE_ROWIDS:nn.VALUE_ROWIDS,ROW_LENGTHS:nn.ROW_LENGTHS,ROW_SPLITS:nn.ROW_SPLITS,ROW_LIMITS:nn.ROW_LIMITS,ROW_STARTS:nn.ROW_STARTS},n=[];for(const s of e){if(!(s in t))break;n.push(t[s])}return n}function ln(e){return 0===e.length?0:e[0]===nn.FIRST_DIM_SIZE?e.length-1:e.length}function un(e,t){if(null==e||null==t)return;const n=e.length,s=t.length;if(n>=s)throw new Error(`defaultValue.shape=${e} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${n} must be less than ragged tensor input flatValues.rank = ${s})`);for(let r=0;r<Math.min(n,s-1);++r){const n=e[r],s=t[r+1];if(n>=0&&s>=0&&1!==n&&n!==s)throw new Error(`defaultValue.shape=${e}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${r-e.length}] = ${n} but ragged tensor input.flatValues.shape[${r-e.length}] = ${s}`)}}!function(e){e[e.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",e[e.VALUE_ROWIDS=1]="VALUE_ROWIDS",e[e.ROW_LENGTHS=2]="ROW_LENGTHS",e[e.ROW_SPLITS=3]="ROW_SPLITS",e[e.ROW_LIMITS=4]="ROW_LIMITS",e[e.ROW_STARTS=5]="ROW_STARTS"}(nn||(nn={}));const cn=30;function dn(e){return e<=cn?e:(0,O.lK)(e,Math.floor(Math.sqrt(e)))}function hn(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}function pn(e,t,n,s=!0){let r=[];if(s)r=r.concat(t.slice(0)),r.push(e[0]/n),r=r.concat(e.slice(1));else{r=r.concat(e[0]);const n=t.length;for(let s=0;s<n;++s)r=r.concat([e[s+1]/t[s],t[s]]);r=r.concat(e.slice(n+1))}return r}function fn(e,t,n=!0){const s=[];if(n){s.push(t);for(let n=t+1;n<e;++n)n<=2*t?(s.push(n),s.push(n-(t+1))):s.push(n)}else{const n=[],r=[];for(let s=1;s<e;++s)s>=2*t+1||s%2==1?r.push(s):n.push(s);s.push(...n),s.push(0),s.push(...r)}return s}function mn(e,t,n,s=!0){const r=[];s?r.push(e[0]/n):r.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?s?r.push(t[n-1]*e[n]):r.push(e[n]/t[n-1]):r.push(e[n]);return r}function gn(e,t){const n=[0];for(let s=0;s<t;++s)n.push(e[s][0]);return n}function yn(e,t,n){const s=e.slice(0,1);for(let r=0;r<n;++r)s.push(e[r+1]-t[r][0]-t[r][1]);return s}var bn=n(8576);const xn=.3275911,vn=.254829592,wn=-.284496736,kn=1.421413741,Tn=-1.453152027,Sn=1.061405429;var Nn=n(3673);function In(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let s=0;s<n.length;s+=2)n[s]=e[s/2],n[s+1]=t[s/2];return n}function Cn(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let s=0;s<e.length;s+=2)t[s/2]=e[s],n[s/2]=e[s+1];return{real:t,imag:n}}function An(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],s[Math.floor(t/4)]=e[t+1];return{real:n,imag:s}}function En(e){const t=Math.floor(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],s[Math.floor(t/4)]=e[t+1];return{real:n,imag:s}}function $n(e,t){return{real:e[2*t],imag:e[2*t+1]}}function Rn(e,t,n,s){e[2*s]=t,e[2*s+1]=n}function _n(e,t){const n=new Float32Array(e/2),s=new Float32Array(e/2);for(let r=0;r<Math.ceil(e/2);r++){const a=(t?2:-2)*Math.PI*(r/e);n[r]=Math.cos(a),s[r]=Math.sin(a)}return{real:n,imag:s}}function Dn(e,t,n){const s=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(s),imag:Math.sin(s)}}const Fn="->",On=/->/g,Mn=",",zn="...";function Ln(e,t){const n=((e=e.replace(/\s/g,"")).length-e.replace(On,"").length)/Fn.length;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error(`Equation must contain exactly one arrow ("${Fn}").`);const[s,r]=e.split(Fn);(0,O.vA)(-1===s.indexOf(zn),()=>`The ellipsis notation ("${zn}") is not supported yet.`);const a=s.split(Mn),i=a.length;if(t!==i)throw new Error(`Expected ${i} input tensors, received ${t}`);if(i>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const o=[];for(let e=0;e<r.length;++e){const t=r[e];if(!a.some(e=>-1!==e.indexOf(t)))throw new Error(`Output subscripts contain the label ${t} not present in the input subscripts.`);-1===o.indexOf(t)&&o.push(t)}for(let e=0;e<s.length;++e){const t=s[e];-1===o.indexOf(t)&&t!==Mn&&o.push(t)}const l=new Array(a.length);for(let e=0;e<i;++e){if(new Set(a[e].split("")).size!==a[e].length)throw new Error(`Found duplicate axes in input component ${a[e]}. Support for duplicate axes in input is not implemented yet.`);l[e]=[];for(let t=0;t<a[e].length;++t)l[e].push(o.indexOf(a[e][t]))}const u=o.length,c=[];for(let e=r.length;e<u;++e)c.push(e);return{allDims:o,summedDims:c,idDims:l}}function Pn(e,t){let n=new Array(e);n.fill(-1);for(let e=0;e<t.length;++e)n[t[e]]=e;const s=[];for(let t=0;t<e;++t)-1===n[t]&&s.push(t);return n=n.filter(e=>-1!==e),{permutationIndices:n,expandDims:s}}function Bn(e,t,n){const s=new Array(e);for(let e=0;e<n.length;++e){const r=n[e].shape;for(let n=0;n<t[e].length;++n)void 0===s[t[e][n]]?s[t[e][n]]=r[n]:(0,O.vA)(s[t[e][n]]===r[n],()=>`Expected dimension ${s[t[e][n]]} at axis ${n} of input shaped ${JSON.stringify(r)}, but got dimension ${r[n]}`)}}function Wn(e,t){const n=e,s=[];let r=0;0===e.length&&n.push(-1),r=e.length+1;for(let e=0;e<r;++e)s.push([]);const a=[];for(let e=0;e<n.length;++e){const r=Un(t,n[e]);for(const t of r)-1===a.indexOf(t)&&(s[e].push(t),a.push(t))}return{path:n,steps:s}}function Vn(e){return e.every((e,t)=>e===t)}function Un(e,t){const n=[];for(let s=0;s<e.length;++s)0!==e[s].length&&-1===e[s].indexOf(t)&&-1!==t||n.push(s);return n}function Gn(e,t,n=0){let s=[];if("number"==typeof t)(0,O.vA)(e.shape[n]%t===0,()=>"Number of splits must evenly divide the axis."),s=new Array(t).fill(e.shape[n]/t);else{const r=t.reduce((e,t)=>(-1===t&&(e+=1),e),0);(0,O.vA)(r<=1,()=>"There should be only one negative value in split array.");const a=t.indexOf(-1);if(-1!==a){const s=t.reduce((e,t)=>t>0?e+t:e);t[a]=e.shape[n]-s}(0,O.vA)(e.shape[n]===t.reduce((e,t)=>e+t),()=>"The sum of sizes must match the size of the axis dimension."),s=t}return s}function Hn(e){return`Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${e}`}function jn(e,t){return`indices(${e}, 0) is invalid: ${t} < 0`}function qn(e,t,n){return`indices(${e}, 0) is invalid: ${t} >= ${n}`}function Yn(e,t){return`only one output dimension may be -1, not both ${e} and ${t}`}function Kn(e,t){return`size ${e} must be non-negative, not ${t}`}function Xn(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function Zn(e,t){return`Input to reshape is a SparseTensor with ${(0,O.Ze)(e)}\n  dense values, but the requested shape requires a multiple of ${(0,O.Ze)(t)}. inputShape=${e} outputShape= ${t}`}function Qn(e,t){return`Input to reshape is a tensor with ${(0,O.Ze)(e)} dense values, but the requested shape has ${(0,O.Ze)(t)}. inputShape=${e} outputShape=${t}`}function Jn(){return"segment ids must be >= 0"}function es(){return"segment ids are not increasing"}function ts(e,t){return`Segment id ${e} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function ns(e,t,n){return`Bad: indices[${e}] == ${t} out of range [0, ${n})`}function ss(e,t){let n,s=!1;for(e<=cn?(n=e,s=!0):n=(0,O.lK)(e,Math.floor(Math.sqrt(e)));!s;)n>t||n===e?s=!0:n=(0,O.lK)(e,n+1);return n}function rs(e,t,n){const s=[],r=e.length;for(let a=0;a<r;a++)a!==t?s.push(e[a]):s.push(n);return s}function as(e,t,n,s){const r=t.shape.length,a=e.shape.length;if(0!==s&&(s<-r||s>r))throw new Error(`Expect batchDims in the range of [-${r}, ${r}], but got ${s}`);if(s<0&&(s+=r),s>a)throw new Error(`batchDims (${s}) must be less than rank(x) (\n    ${a}).`);if(n<s)throw new Error(`batchDims (${s}) must be less than or equal to axis (${n}).`);for(let n=0;n<s;++n)if(e.shape[n]!==t.shape[n])throw new Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);const i=e.shape[n],o=[];let l=1,u=1,c=1;for(let t=0;t<s;++t)o.push(e.shape[t]),l*=e.shape[t];for(let t=s;t<n;t++)o.push(e.shape[t]),u*=e.shape[t];for(let e=s;e<r;e++)o.push(t.shape[e]);for(let t=n+1;t<a;t++)o.push(e.shape[t]),c*=e.shape[t];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:i,outputShape:o}}function is(e){try{return e.map(e=>(0,$t.decodeString)(e))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function os(e){return e.map(e=>(0,$t.encodeString)(e))}var ls=n(8360),us=n(4411),cs=n(5149);!function(){for(const e of Be)Ne(e)}()},5894:(e,t,n)=>{"use strict";n.d(t,{Y:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({stridedSlice_:function(e,t,n,i,o=0,l=0,u=0,c=0,d=0){const h={x:(0,a.YT)(e,"x","stridedSlice","string_or_numeric")},p={begin:t,end:n,strides:i,beginMask:o,endMask:l,ellipsisMask:u,newAxisMask:c,shrinkAxisMask:d};return s.T2.runKernel(r.UcO,h,p)}})},5912:(e,t,n)=>{"use strict";n.d(t,{L:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({round_:function(e){const t={x:(0,a.YT)(e,"x","round")};return s.T2.runKernel(r.hVg,t)}})},5932:(e,t,n)=>{"use strict";n.d(t,{r:()=>o});var s=n(8189),r=n(5119),a=n(929),i=n(2302);const o=(0,a.op)({squeeze_:function(e,t){const n=(0,s.YT)(e,"x","squeeze","string_or_numeric");return(0,i.t)(n,(0,r.gx)(n.shape,t).newShape)}})},6030:(e,t,n)=>{"use strict";n.d(t,{l:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({softplus_:function(e){const t={x:(0,a.YT)(e,"x","softplus")};return s.T2.runKernel(r.Fin,t)}})},6111:(e,t,n)=>{"use strict";n.d(t,{G:()=>i});var s=n(1585),r=n(5441),a=n(5119);function i(e,t,n){(0,a.SA)(e);const i={shape:e,value:t,dtype:n=n||(0,a.X$)(t)};return s.T2.runKernel(r.SQl,{},i)}},6170:(e,t,n)=>{"use strict";n.r(t),n.d(t,{calculateShapes:()=>i,validateInput:()=>a,validateUpdateShape:()=>r});var s=n(5119);function r(e,t,n){const s=t.rank>1?t.shape[t.rank-1]:1,r=t.rank>1?t.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${s}, and batchDim: ${r}.`;if(n.rank<r)throw new Error(a+` update.rank < ${r}. `);if(e.length<s+(n.rank-r))throw new Error(a+` Output shape length < ${s+(n.rank-r)}`);if(n.rank!==r+e.length-s)throw new Error(a+" update.rank != "+(r+e.length-s));for(let e=0;e<r;++e)if(n.shape[e]!==t.shape[e])throw new Error(a+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-r;++t)if(n.shape[t+r]!==e[t+s])throw new Error(a+` updates.shape[${t+r}] (${n.shape[t+r]}) != shape[${t+r}] (${e[t+r]})`)}function a(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}r(n,t,e)}function i(e,t,n){const r=t.shape.length,a=r>1?t.shape[r-1]:1,i=n.length;let o=1;for(let e=a;e<i;++e)o*=n[e];const l=a<1?1:a;return{sliceRank:a,numUpdates:(0,s.Ze)(t.shape)/l,sliceSize:o,strides:[...(0,s.Ur)(n.slice(0,a)),1],outputSize:(0,s.Ze)(n)}}},6300:(e,t,n)=>{"use strict";n.d(t,{y:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({isNaN_:function(e){const t={x:(0,a.YT)(e,"x","isNaN")};return s.T2.runKernel(r.iPs,t)}})},6325:(e,t,n)=>{"use strict";n.d(t,{W:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({selu_:function(e){const t={x:(0,a.YT)(e,"x","selu")};return s.T2.runKernel(r.u$b,t)}})},6346:(e,t,n)=>{"use strict";n.d(t,{V:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({softmax_:function(e,t=-1){const n=(0,a.YT)(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const i={logits:n},o={dim:t};return s.T2.runKernel(r.rFG,i,o)}})},6448:(e,t,n)=>{"use strict";function s(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}n.d(t,{Y:()=>s})},6508:(e,t,n)=>{"use strict";n.d(t,{I:()=>l});var s=n(1585),r=n(5441),a=n(565),i=n(8189),o=n(2198);const l=(0,n(929).op)({lessEqual_:function(e,t){let n=(0,i.YT)(e,"a","lessEqual","string_or_numeric"),l=(0,i.YT)(t,"b","lessEqual","string_or_numeric");[n,l]=(0,a.makeTypesMatch)(n,l),(0,o.assertAndGetBroadcastShape)(n.shape,l.shape);const u={a:n,b:l};return s.T2.runKernel(r.CwD,u)}})},6512:(e,t,n)=>{"use strict";n.d(t,{l:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({split_:function(e,t,n=0){const i={x:(0,a.YT)(e,"x","split")},o={numOrSizeSplits:t,axis:n};return s.T2.runKernel(r.Blb,i,o)}})},6522:(e,t,n)=>{"use strict";n.d(t,{H:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({neg_:function(e){const t={x:(0,a.YT)(e,"x","neg")};return s.T2.runKernel(r.l0G,t)}})},6567:(e,t,n)=>{"use strict";n.d(t,{F:()=>o});var s=n(1585),r=n(5441),a=n(8189),i=n(5119);const o=(0,n(929).op)({mirrorPad_:function(e,t,n){i.vA("reflect"===n||"symmetric"===n,()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`);const o=(0,a.YT)(e,"x","mirrorPad");if(0===o.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");i.vA(t.length===o.rank,()=>`Padding doesn't match input. Must be ${o.rank}. Got ${t.length}.`);const l="reflect"===n?1:0;for(let e=0;e<o.rank;e++)i.vA(2===t[e].length,()=>"Invalid number of paddings. Must be length of 2 each."),i.vA(t[e][0]>=0&&t[e][0]<=o.shape[e]-l&&t[e][1]>=0&&t[e][1]<=o.shape[e]-l,()=>`Padding in dimension ${e} cannot be greater than or equal to ${o.shape[e]-l} or less than 0 for input of shape ${o.shape}`);const u={paddings:t,mode:n},c={x:o};return s.T2.runKernel(r.x7F,c,u)}})},6574:(e,t,n)=>{"use strict";n.d(t,{Km:()=>l,OH:()=>a,_K:()=>o,tj:()=>u});var s=n(5119);const r="tfjsflags";class a{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=i,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&(o().getBool("IS_TEST")||o().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];o().getBool("IS_TEST")||o().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if((0,s.yL)(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getString(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);r in e&&e[r].split(",").forEach(e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){const n=t.toLowerCase();return"true"===n||"false"===n?"true"===n:""+ +n===n?+n:t}(0,n)})}}function i(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("="))),t}function o(){return l}let l=null;function u(e){l=e}},6734:(e,t,n)=>{"use strict";n.d(t,{D:()=>r});var s=n(3879);class r{static join(e){return new r(e).slice()}constructor(e){if(this.shards=[],this.previousShardIndex=0,null==e)return;if(e instanceof Array||(e=[e]),0===(e=e.map(e=>s.isTypedArray(e)?e.buffer:e)).length)return;this.bufferUniformSize=e[0].byteLength;let t=0;for(let n=0;n<e.length;n++){const s=e[n];n!==e.length-1&&s.byteLength!==this.bufferUniformSize&&(this.bufferUniformSize=void 0);const r=t+s.byteLength;this.shards.push({buffer:s,start:t,end:r}),t=r}0===this.shards.length&&(this.byteLength=0),this.byteLength=this.shards[this.shards.length-1].end}slice(e=0,t=this.byteLength){if(0===this.shards.length)return new ArrayBuffer(0);if(e=isNaN(Number(e))?0:e,t=isNaN(Number(t))?0:t,e=Math.max(0,e),(t=Math.min(this.byteLength,t))<=e)return new ArrayBuffer(0);const n=this.findShardForByte(e);if(-1===n)throw new Error(`Could not find start shard for byte ${e}`);const s=new ArrayBuffer(t-e),r=new Uint8Array(s);let a=0;for(let s=n;s<this.shards.length;s++){const n=this.shards[s],i=e+a-n.start,o=a,l=Math.min(t,n.end)-n.start,u=new Uint8Array(n.buffer,i,l-i);if(r.set(u,o),a+=u.length,t<n.end)break}return s}findShardForByte(e){if(0===this.shards.length||e<0||e>=this.byteLength)return-1;if(null!=this.bufferUniformSize)return this.previousShardIndex=Math.floor(e/this.bufferUniformSize),this.previousShardIndex;function t(t){return e<t.start?-1:e>=t.end?1:0}if(0===t(this.shards[this.previousShardIndex]))return this.previousShardIndex;const n=function(e,t){let n=0,s=e.length;for(;n<=s;){const r=Math.floor((s-n)/2)+n,a=t(e[r]);if(0===a)return r;a<0?s=r:n=r+1}return-1}(this.shards,t);return-1===n?-1:(this.previousShardIndex=n,this.previousShardIndex)}}},6808:(e,t,n)=>{"use strict";n.d(t,{r:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({cumsum_:function(e,t=0,n=!1,i=!1){const o={x:(0,a.YT)(e,"x","cumsum")},l={axis:t,exclusive:n,reverse:i};return s.T2.runKernel(r.nY8,o,l)}})},6833:function(e,t,n){var s;!function(e,r){function a(e){var t=this;t.next=function(){var e,n,s=t.w,r=t.X,a=t.i;return t.w=s=s+1640531527|0,n=r[a+34&127],e=r[a=a+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=r[a]=n^e,t.i=a,n+(s^s>>>16)|0},function(e,t){var n,s,r,a,i,o=[],l=128;for(t===(0|t)?(s=t,t=null):(t+="\0",s=0,l=Math.max(l,t.length)),r=0,a=-32;a<l;++a)t&&(s^=t.charCodeAt((a+32)%t.length)),0===a&&(i=s),s^=s<<10,s^=s>>>15,s^=s<<4,s^=s>>>13,a>=0&&(i=i+1640531527|0,r=0==(n=o[127&a]^=s+i)?r+1:0);for(r>=128&&(o[127&(t&&t.length||0)]=-1),r=127,a=512;a>0;--a)s=o[r+34&127],n=o[r=r+1&127],s^=s<<13,n^=n<<17,s^=s>>>15,n^=n>>>12,o[r]=s^n;e.w=i,e.X=o,e.i=r}(t,e)}function i(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function o(e,t){null==e&&(e=+new Date);var n=new a(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&(s.X&&i(s,n),r.state=function(){return i(n,{})}),r}r&&r.exports?r.exports=o:n.amdD&&n.amdO?void 0===(s=function(){return o}.call(t,n,t,r))||(r.exports=s):this.xor4096=o}(0,e=n.nmd(e),n.amdD)},6841:(e,t,n)=>{"use strict";n.d(t,{q:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({asin_:function(e){const t={x:(0,a.YT)(e,"x","asin")};return s.T2.runKernel(r.QKF,t)}})},6919:(e,t,n)=>{"use strict";n.d(t,{H:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({leakyRelu_:function(e,t=.2){const n={x:(0,a.YT)(e,"x","leakyRelu")},i={alpha:t};return s.T2.runKernel(r.X0$,n,i)}})},6928:(e,t,n)=>{"use strict";n.d(t,{z:()=>l});var s=n(1585),r=n(5441),a=n(8189),i=n(5119),o=n(6111);const l=(0,n(929).op)({clipByValue_:function(e,t,n){const l=(0,a.YT)(e,"x","clipByValue");if(i.vA(t<=n,()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`),t===n)return(0,o.G)(l.shape,t,l.dtype);const u={x:l},c={clipValueMin:t,clipValueMax:n};return s.T2.runKernel(r.vaV,u,c)}})},6999:(e,t,n)=>{"use strict";n.d(t,{j:()=>c});var s=n(1585),r=n(5441),a=n(8189),i=n(5119),o=n(7195),l=n(929),u=n(2302);const c=(0,l.op)({maxPool_:function(e,t,n,l,c){const d=(0,a.YT)(e,"x","maxPool");let h=d,p=!1;3===d.rank&&(p=!0,h=(0,u.t)(d,[1,d.shape[0],d.shape[1],d.shape[2]])),i.vA(4===h.rank,()=>`Error in maxPool: input must be rank 4 but got rank ${h.rank}.`),i.vA(o.G0(n,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`),o.s_("maxPool",l,c);const f={x:h},m={filterSize:t,strides:n,pad:l,dimRoundingMode:c},g=s.T2.runKernel(r.t3d,f,m);return p?(0,u.t)(g,[g.shape[1],g.shape[2],g.shape[3]]):g}})},7074:(e,t,n)=>{"use strict";n.d(t,{Cf:()=>m,Op:()=>c,_5:()=>l,iP:()=>p,kr:()=>h,rY:()=>f,tA:()=>d,vQ:()=>u});var s=n(6574),r=n(1743),a=n(3673);const i=(0,r.m)("kernelRegistry",()=>new Map),o=(0,r.m)("gradRegistry",()=>new Map);function l(e,t){const n=g(e,t);return i.get(n)}function u(e){return o.get(e)}function c(e){const t=i.entries(),n=[];for(;;){const{done:s,value:r}=t.next();if(s)break;const[a,i]=r,[o]=a.split("_");o===e&&n.push(i)}return n}function d(e){const{kernelName:t,backendName:n}=e,s=g(t,n);i.has(s)&&a.i(`The kernel '${t}' for backend '${n}' is already registered`),i.set(s,e)}function h(e){const{kernelName:t}=e;o.has(t)&&(0,s._K)().getBool("DEBUG")&&a.i(`Overriding the gradient for '${t}'`),o.set(t,e)}function p(e,t){const n=g(e,t);if(!i.has(n))throw new Error(`The kernel '${e}' for backend '${t}' is not registered`);i.delete(n)}function f(e){if(!o.has(e))throw new Error(`The gradient '${e}' for backend is not registered`);o.delete(e)}function m(e,t){c(e).forEach(e=>{d(Object.assign({},e,{backendName:t}))})}function g(e,t){return`${t}_${e}`}},7084:(e,t,n)=>{"use strict";n.d(t,{AQ:()=>T,CY:()=>h,Ej:()=>C,P8:()=>S,Rl:()=>I,Xf:()=>E,aG:()=>d,jf:()=>k,l3:()=>w,oR:()=>A,s5:()=>y,zV:()=>N});var s=n(7148),r=n(4027),a=n(5119),i=n(5685),o=n(6734),l=n(5287),u=n(6574);const c=4;async function d(e,t){const n=[],s=[],r=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);for(let a=0;a<r.length;++a){const i=r[a],o=Array.isArray(e)?e[a].tensor:e[i];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${o.dtype}`);const l={name:i,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){const e=new Promise(async e=>{const t=await o.bytes(),n=t.reduce((e,t)=>e+t.length,0)+c*t.length,s=new Uint8Array(n);let r=0;for(let e=0;e<t.length;e++){const n=t[e],a=new Uint8Array(new Uint32Array([n.length]).buffer);s.set(a,r),r+=c,s.set(n,r),r+=n.length}e(s)});s.push(e)}else s.push(o.data());null!=t&&(l.group=t),n.push(l)}return{data:b(await Promise.all(s)),specs:n}}function h(e,t){const n=new o.D(e),s={};let r=0;for(const e of t){const t=p(e,(e,t)=>n.slice(r+e,r+t));s[e.name]=m(e,n.slice(r,r+t)),r+=t}return s}function p(e,t){const n=(0,a.Ze)(e.shape);let s;if("quantization"in e){const t=e.quantization;s=i.i[t.dtype]}else{if("string"===e.dtype){let e=0;for(let s=0;s<n;s++)e+=c+new Uint32Array(t(e,e+c))[0];return e}s=i.i[e.dtype]}return n*s}async function f(e,t){const n=(0,a.Ze)(e.shape);let s;if("quantization"in e){const t=e.quantization;s=i.i[t.dtype]}else{if("string"===e.dtype){let e=0;for(let s=0;s<n;s++)e+=c+new Uint32Array(await t(e,e+c))[0];return e}s=i.i[e.dtype]}return n*s}function m(e,t){const n=e.name,o=e.dtype,l=e.shape,u=(0,a.Ze)(l);let d,h=0;if("quantization"in e){const s=e.quantization;if("uint8"===s.dtype||"uint16"===s.dtype){if(!("min"in s)||!("scale"in s))throw new Error(`Weight ${e.name} with quantization ${s.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==s.dtype)throw new Error(`Weight ${e.name} has unknown quantization dtype ${s.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==o)throw new Error(`Weight ${e.name} is quantized with ${s.dtype} which only supports weights of type float32 not ${o}.`)}const r=i.i[s.dtype],a="uint8"===s.dtype?new Uint8Array(t):new Uint16Array(t);if("float32"===o)if("uint8"===s.dtype||"uint16"===s.dtype){d=new Float32Array(a.length);for(let e=0;e<a.length;e++){const t=a[e];d[e]=t*s.scale+s.min}}else{if("float16"!==s.dtype)throw new Error(`Unsupported quantization type ${s.dtype} for weight type float32.`);{const e=function(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;!(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return s=>{const r=new ArrayBuffer(4*s.length),a=new Uint32Array(r);for(let r=0;r<s.length;r++){const i=s[r],o=e[n[i>>10]+(1023&i)]+t[i>>10];a[r]=o}return new Float32Array(r)}}();d=e(a)}}else{if("int32"!==o)throw new Error(`Unsupported dtype in weight '${n}': ${o}`);if("uint8"!==s.dtype&&"uint16"!==s.dtype)throw new Error(`Unsupported quantization type ${s.dtype} for weight type int32.`);d=new Int32Array(a.length);for(let e=0;e<a.length;e++){const t=a[e];d[e]=Math.round(t*s.scale+s.min)}}h+=u*r}else if("string"===o){const n=(0,a.Ze)(e.shape);d=[];for(let e=0;e<n;e++){const e=new Uint32Array(t.slice(h,h+c))[0];h+=c;const n=new Uint8Array(t.slice(h,h+e));d.push(n),h+=e}}else{const e=i.i[o];if("float32"===o)d=new Float32Array(t);else if("int32"===o)d=new Int32Array(t);else{if("bool"!==o){if("complex64"===o){d=new Float32Array(t);const e=new Float32Array(d.length/2),n=new Float32Array(d.length/2);for(let t=0;t<e.length;t++)e[t]=d[2*t],n[t]=d[2*t+1];const a=(0,r.O)(e,l,"float32"),i=(0,r.O)(n,l,"float32"),o=(0,s.f)(a,i);return a.dispose(),i.dispose(),o}throw new Error(`Unsupported dtype in weight '${n}': ${o}`)}d=new Uint8Array(t)}h+=u*e}return(0,r.O)(d,l,o)}async function g(e,t,n){let s=new Uint8Array(t);for(;s.byteLength<n;){const{done:t,value:r}=await e.read();if(t&&null==r){const e=n-s.byteLength;throw new Error(`Reader is done but ${e} bytes are still expected`)}const a=new Uint8Array(s.length+r.byteLength);a.set(s,0),a.set(new Uint8Array(r),s.length),s=a}return s.buffer}async function y(e,t){const n={},s=e.getReader();let r=new ArrayBuffer(0);for(const e of t){const t=await f(e,async(e,t)=>(r=await g(s,r,t),r.slice(e,t)));r=await g(s,r,t);const i=r.slice(0,t);r=r.slice(t);const o=m(e,i);if(n[e.name]=o,"webgpu"===(0,l.jz)()){const e=(0,l.Hs)();"uploadToGPU"in e&&(0,a.Ze)(o.shape)>=(0,u._K)().get("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD")&&e.uploadToGPU(o.dataId)}}return n}function b(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach(e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)});const s=new Uint8Array(t);let r=0;return n.forEach(e=>{s.set(new Uint8Array(e.buffer),r),r+=e.byteLength}),s.buffer}const x="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function v(e){return x?Buffer.byteLength(e,"utf8"):new Blob([e]).size}function w(e){if(x)return Buffer.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,s=t.length;e<s;e++)n+=String.fromCharCode(t[e]);return btoa(n)}function k(e){if(x){const t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}function T(e){return o.D.join(e)}function S(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function N(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(n.initializerSignature=e.initializerSignature),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}function I(e,t,n){const s={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(s.trainingConfig=e.trainingConfig),null!=e.weightsManifest){if(!t)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!n)throw new Error("modelJSON has weightsManifest but weightData is null");s.weightSpecs=t,s.weightData=n}return null!=e.signature&&(s.signature=e.signature),null!=e.userDefinedMetadata&&(s.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(s.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(s.initializerSignature=e.initializerSignature),s}async function C(e,t){let n,s;return null!=e.weightsManifest&&([n,s]=await t(e.weightsManifest)),I(e,n,s)}function A(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:v(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:v(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:new o.D(e.weightData).byteLength}}function E(e){const t=[];for(const n of e)t.push(...n.weights);return t}},7126:(e,t,n)=>{"use strict";n.d(t,{j:()=>o});var s=n(1585),r=n(5441),a=n(565),i=n(8189);const o=(0,n(929).op)({sub_:function(e,t){let n=(0,i.YT)(e,"a","sub"),o=(0,i.YT)(t,"b","sub");[n,o]=(0,a.makeTypesMatch)(n,o);const l={a:n,b:o};return s.T2.runKernel(r.PbM,l)}})},7148:(e,t,n)=>{"use strict";n.d(t,{f:()=>o});var s=n(1585),r=n(5441),a=n(8189),i=n(5119);const o=(0,n(929).op)({complex_:function(e,t){const n=(0,a.YT)(e,"real","complex"),o=(0,a.YT)(t,"imag","complex");i.O3(n.shape,o.shape,`real and imag shapes, ${n.shape} and ${o.shape}, must match in call to tf.complex().`);const l={real:n,imag:o};return s.T2.runKernel(r.pr3,l)}})},7180:function(e,t,n){var s;!function(e,r){function a(e){var t,n=this,s=(t=4022871197,function(e){e=String(e);for(var n=0;n<e.length;n++){var s=.02519603282416938*(t+=e.charCodeAt(n));s-=t=s>>>0,t=(s*=t)>>>0,t+=4294967296*(s-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=s(" "),n.s1=s(" "),n.s2=s(" "),n.s0-=s(e),n.s0<0&&(n.s0+=1),n.s1-=s(e),n.s1<0&&(n.s1+=1),n.s2-=s(e),n.s2<0&&(n.s2+=1),s=null}function i(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function o(e,t){var n=new a(e),s=t&&t.state,r=n.next;return r.int32=function(){return 4294967296*n.next()|0},r.double=function(){return r()+11102230246251565e-32*(2097152*r()|0)},r.quick=r,s&&("object"==typeof s&&i(s,n),r.state=function(){return i(n,{})}),r}r&&r.exports?r.exports=o:n.amdD&&n.amdO?void 0===(s=function(){return o}.call(t,n,t,r))||(r.exports=s):this.alea=o}(0,e=n.nmd(e),n.amdD)},7195:(e,t,n)=>{"use strict";n.d(t,{$Q:()=>y,Dh:()=>f,E6:()=>a,G0:()=>m,G8:()=>u,YQ:()=>r,l5:()=>i,p$:()=>l,qk:()=>g,s_:()=>b,uf:()=>o});var s=n(5119);function r(e,t,n,s,r="NHWC",a){return o(e,[...t,e[3]],n,a,s,null,null,y(r))}function a(e,t,n,s,r,a,i="channelsLast"){const[l,u]=c(t);let d;if("channelsLast"===i)d=[l,u,e[3],e[3]];else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);d=[l,u,e[1],e[1]]}return o(e,d,n,s,r,a,!1,i)}function i(e,t,n,s,r,a,i="NDHWC"){const[o,u,c]=d(t);let h,p;if("NDHWC"===i)p="channelsLast",h=[o,u,c,e[4],e[4]];else{if("NCDHW"!==i)throw new Error(`Unknown dataFormat ${i}`);p="channelsFirst",h=[o,u,c,e[1],e[1]]}return l(e,h,n,s,r,!1,p,a)}function o(e,t,n,s,r,a,i=!1,o="channelsLast"){let[l,d,f,m]=[-1,-1,-1,-1];if("channelsLast"===o)[l,d,f,m]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[l,m,d,f]=e}const[g,y,,b]=t,[x,v]=c(n),[w,k]=c(s),T=h(g,w),S=h(y,k),{padInfo:N,outHeight:I,outWidth:C}=function(e,t,n,s,r,a,i,o,l){let c,d,h;if("number"==typeof e){c={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const r=function(e,t,n,s,r){null==s&&(s=u(e,t,n));const a=e[1];return[p((e[0]-t+2*s)/n+1,r),p((a-t+2*s)/n+1,r)]}([t,n],a,s,e,o);d=r[0],h=r[1]}else if("same"===e){d=Math.ceil(t/s),h=Math.ceil(n/r);const e=Math.max(0,(d-1)*s+a-t),o=Math.max(0,(h-1)*r+i-n),l=Math.floor(e/2),u=e-l,p=Math.floor(o/2);c={top:l,bottom:u,left:p,right:o-p,type:"SAME"}}else if("valid"===e)c={top:0,bottom:0,left:0,right:0,type:"VALID"},d=Math.ceil((t-a+1)/s),h=Math.ceil((n-i+1)/r);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const u="channelsLast"===l?e[1][0]:e[2][0],f="channelsLast"===l?e[1][1]:e[2][1],m="channelsLast"===l?e[2][0]:e[3][0],g="channelsLast"===l?e[2][1]:e[3][1];c={top:u,bottom:f,left:m,right:g,type:0===u&&0===f&&0===m&&0===g?"VALID":"EXPLICIT"},d=p((t-a+u+f)/s+1,o),h=p((n-i+m+g)/r+1,o)}}return{padInfo:c,outHeight:d,outWidth:h}}(r,d,f,x,v,T,S,a,o),A=i?b*m:b;let E;return"channelsFirst"===o?E=[l,A,I,C]:"channelsLast"===o&&(E=[l,I,C,A]),{batchSize:l,dataFormat:o,inHeight:d,inWidth:f,inChannels:m,outHeight:I,outWidth:C,outChannels:A,padInfo:N,strideHeight:x,strideWidth:v,filterHeight:g,filterWidth:y,effectiveFilterHeight:T,effectiveFilterWidth:S,dilationHeight:w,dilationWidth:k,inShape:e,outShape:E,filterShape:t}}function l(e,t,n,s,r,a=!1,i="channelsLast",o){let[l,c,f,m,g]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[l,c,f,m,g]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[l,g,c,f,m]=e}const[y,b,x,,v]=t,[w,k,T]=d(n),[S,N,I]=d(s),C=h(y,S),A=h(b,N),E=h(x,I),{padInfo:$,outDepth:R,outHeight:_,outWidth:D}=function(e,t,n,s,r,a,i,o,l,c,d){let h,f,m,g;if("valid"===e&&(e=0),"number"==typeof e){h={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const y=function(e,t,n,s,r,a){null==r&&(r=u(e,t[0],s[0]));const i=[0,0,0,1];for(let n=0;n<3;n++)e[n]+2*r>=t[n]&&(i[n]=p((e[n]-t[n]+2*r)/s[n]+1,a));return i}([t,n,s,1],[o,l,c],0,[r,a,i],e,d);f=y[0],m=y[1],g=y[2]}else{if("same"!==e)throw Error(`Unknown padding parameter: ${e}`);{f=Math.ceil(t/r),m=Math.ceil(n/a),g=Math.ceil(s/i);const e=(f-1)*r+o-t,u=(m-1)*a+l-n,d=(g-1)*i+c-s,p=Math.floor(e/2),y=e-p,b=Math.floor(u/2),x=u-b,v=Math.floor(d/2);h={top:b,bottom:x,left:v,right:d-v,front:p,back:y,type:"SAME"}}}return{padInfo:h,outDepth:f,outHeight:m,outWidth:g}}(r,c,f,m,w,k,T,C,A,E,o),F=a?v*g:v;let O;return"channelsFirst"===i?O=[l,F,R,_,D]:"channelsLast"===i&&(O=[l,R,_,D,F]),{batchSize:l,dataFormat:i,inDepth:c,inHeight:f,inWidth:m,inChannels:g,outDepth:R,outHeight:_,outWidth:D,outChannels:F,padInfo:$,strideDepth:w,strideHeight:k,strideWidth:T,filterDepth:y,filterHeight:b,filterWidth:x,effectiveFilterDepth:C,effectiveFilterHeight:A,effectiveFilterWidth:E,dilationDepth:S,dilationHeight:N,dilationWidth:I,inShape:e,outShape:O,filterShape:t}}function u(e,t,n,s=1){const r=h(t,s);return Math.floor((e[0]*(n-1)-n+r)/2)}function c(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function d(e){return"number"==typeof e?[e,e,e]:e}function h(e,t){return t<=1?e:e+(e-1)*(t-1)}function p(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function f(e){const[t,n,s]=c(e);return 1===t&&1===n&&1===s}function m(e,t){return f(e)||f(t)}function g(e){return c(e).every(e=>e>0)}function y(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}function b(e,t,n){if(null!=n){if("string"==typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);if("number"==typeof t)s.vA(s.E6(t),()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);else{if("object"!=typeof t)throw Error(`Error in ${e}: Unknown padding parameter: ${t}`);t.forEach(t=>{t.forEach(t=>{s.vA(s.E6(t),()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`)})})}}}},7261:(e,t,n)=>{"use strict";n.d(t,{K:()=>o});var s=n(1585),r=n(5441),a=n(8189),i=n(5119);const o=(0,n(929).op)({unstack_:function(e,t=0){const n=(0,a.YT)(e,"x","unstack","string_or_numeric");i.vA(t>=-n.shape.length&&t<n.shape.length,()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`);const o={value:n},l={axis:t};return s.T2.runKernel(r.dXR,o,l)}})},7270:(e,t,n)=>{"use strict";n.d(t,{BTT:()=>h.B,tnl:()=>r.t,HQu:()=>a.H,FqL:()=>i.F,WQq:()=>o.W,QiD:()=>p,Q7R:()=>f.Q,bzn:()=>m.b,FLi:()=>g.F,XRg:()=>y.X,qRo:()=>b.q,yHs:()=>x.y,rYl:()=>v.r,FPz:()=>w.F,rfv:()=>k.r,$jT:()=>T.$,sub:()=>C,lZX:()=>F,$v7:()=>M.$,BFc:()=>z,kSi:()=>L,T5N:()=>P,GTe:()=>O.G,HbZ:()=>B,vjT:()=>W,ftb:()=>ns,ROE:()=>V,hOW:()=>U.h,ra8:()=>G.r,wgE:()=>S.w,mkO:()=>H.m,zQh:()=>j.z,o8B:()=>q.o,faB:()=>Y.f,xWs:()=>A.x,I1m:()=>K,RPU:()=>X,O5O:()=>Z,P1l:()=>Q,kA9:()=>J.k,Xtf:()=>ee.X,wX9:()=>te.w,IPL:()=>ne,jIJ:()=>re,gnS:()=>ae.g,yIG:()=>ie.y,_jP:()=>hs,Lp0:()=>oe.L,rCv:()=>le.r,aOp:()=>ue,Rj8:()=>ce.R,Gl3:()=>de.G,smy:()=>he,X7t:()=>pe.X,y4m:()=>fe.y,ek5:()=>me.e,Omf:()=>ge.O,EZY:()=>cs,_3C:()=>ye,Pqc:()=>be.P,FJY:()=>ds,QP2:()=>xe,LCg:()=>ve.L,Y12:()=>we.Y,p4S:()=>ke.p,oNF:()=>Te.o,UG6:()=>Se.U,IYd:()=>Ne.I,y5U:()=>Ce,hVP:()=>wn.h,GSj:()=>Ae.G,RIf:()=>Ee.R,wh_:()=>$e.w,cZk:()=>s,kgh:()=>Re.k,SY9:()=>us,rhj:()=>_e.r,DQN:()=>De.D,KGM:()=>kn.K,ngS:()=>Fe.n,Slp:()=>pr,U4u:()=>ps,ggX:()=>Tn.g,MIs:()=>Oe.M,EN4:()=>Me.E,yrW:()=>ze.y,H8d:()=>Le.H,M7h:()=>Pe.M,InN:()=>Be.I,mPL:()=>fr,mT8:()=>We,Kgs:()=>Ve.K,Rm2:()=>Ue.R,Kko:()=>Ge.K,nqI:()=>He.n,HPB:()=>je.H,VZ:()=>qe.V,n76:()=>Ye.n,NSZ:()=>Ke.N,ztW:()=>Xe.z,rxB:()=>Ze.r,YYh:()=>mr,yzS:()=>et,NoW:()=>E.N,T9B:()=>tt.T,jgi:()=>nt.j,NYV:()=>st,RO:()=>rt,PhQ:()=>at.P,i2o:()=>it.i,OYQ:()=>ut,jkA:()=>ct.j,BpO:()=>dt.B,FFZ:()=>ht.F,ziu:()=>pt.z,Clk:()=>yt,CRk:()=>is,lKK:()=>$.l,YDF:()=>bt,OjQ:()=>xt,HZy:()=>vt.H,xbf:()=>rs.x,Ec:()=>wt.E,Mw0:()=>kt.M,SaS:()=>ot.S,P61:()=>Tt.P,op:()=>h.op,X4o:()=>St,eVF:()=>Nt.e,BZs:()=>It,grY:()=>Ct,XHu:()=>At,WLX:()=>Et,dzn:()=>$t.d,n7C:()=>Rt.n,NsG:()=>_t.N,yyV:()=>Dt.y,_eU:()=>Ft._,whe:()=>Ot,iyU:()=>Mt,Q0_:()=>zt,_9M:()=>Lt,pR9:()=>Ut,FE$:()=>Gt,m0H:()=>Ht,YeY:()=>jt,HYA:()=>qt,y17:()=>Yt,xav:()=>Kt.x,VOZ:()=>Xt.V,VVh:()=>Zt.V,j__:()=>Qt.j,tQQ:()=>I.t,BEg:()=>Jt.B,QD2:()=>en,LMr:()=>tn,I2l:()=>nn,JYU:()=>sn,z8$:()=>Sn.z,LIG:()=>rn.L,Z$r:()=>an.Z,d_2:()=>on.d,NFr:()=>os,sZg:()=>Je,WfX:()=>ln.W,wdz:()=>un.w,F12:()=>cn,ry7:()=>R.r,_SZ:()=>dn._,vPA:()=>hr,F8e:()=>hn.F,L0l:()=>pn.L,dik:()=>_.d,Q$M:()=>fn,zAd:()=>mn,wck:()=>gn,R0O:()=>yn,Vs9:()=>bn.V,lw0:()=>xn.l,eDJ:()=>vn.e,lMo:()=>gr,Zhr:()=>ls,lOn:()=>dr,lDo:()=>Nn.l,RZD:()=>In.R,EwI:()=>mt.E,Pbu:()=>Cn.P,r2V:()=>An.r,t$z:()=>En.t,PMw:()=>$n.P,Ym9:()=>Rn.Y,YjP:()=>yr,jbE:()=>gt.j,czq:()=>_n.c,Mlm:()=>Dn.M,ymU:()=>D.y,OEK:()=>Fn.O,tGX:()=>Mn,KtR:()=>zn,$_$:()=>Ln.$,g9W:()=>Pn,Lpo:()=>Bn,yxw:()=>Wn,NNh:()=>Un,Vsq:()=>Ie.V,rfw:()=>Gn.r,mgz:()=>ss.m,efE:()=>Hn,AmM:()=>jn.A,zAU:()=>qn.z,K$i:()=>Yn.K,rni:()=>Kn,bvq:()=>Xn,_M9:()=>Zn._,YJN:()=>Jn,Ul9:()=>es.U,POl:()=>ts.P});var s={};n.r(s),n.d(s,{conv2d:()=>xs,depthwiseConv2d:()=>ks,matMul:()=>Ts});var r=n(4888),a=n(2804),i=n(7558),o=n(7523),l=n(1585),u=n(5441),c=n(8189),d=n(5119),h=n(929);const p=(0,h.op)({addN_:function(e){d.vA(Array.isArray(e),()=>"The argument passed to tf.addN() must be a list of tensors"),d.vA(e.length>=1,()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`);const t=e.map((e,t)=>(0,c.YT)(e,`tensors${t}`,"addN")),n=t[0];t.forEach(e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")}),t.forEach(e=>{if(!d.r1(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")});const s=t;return l.T2.runKernel(u.EkD,s)}});var f=n(2307),m=n(9326),g=n(897),y=n(4339),b=n(6841),x=n(269),v=n(9580),w=n(1404),k=n(3774),T=n(3909),S=n(9809),N=n(7195),I=n(2302);const C=(0,h.op)({avgPool3d_:function(e,t,n,s,r,a="NDHWC"){const i=(0,c.YT)(e,"x","avgPool3d","float32");let o=i,h=!1;4===i.rank&&(h=!0,o=(0,I.t)(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),d.vA(5===o.rank,()=>`Error in avgPool3d: x must be rank 5 but got rank ${o.rank}.`),d.vA("NDHWC"===a,()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`),d.vA("number"==typeof n&&n>0||Array.isArray(n)&&n[0]>0&&n[1]>0&&n[2]>0,()=>`Error in avgPool3d: Stride must be > 0, but got '${n}'`),(0,N.s_)("avgPool3d",s,r);const p={x:o},f={filterSize:t,strides:n,pad:s,dimRoundingMode:r,dataFormat:a};let m=l.T2.runKernel(u.cS,p,f);return m=(0,S.w)(m,o.dtype),h?(0,I.t)(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}});var A=n(5030),E=n(5703),$=n(9258),R=n(8968),_=n(7986),D=n(7311);const F=(0,h.op)({basicLSTMCell_:function(e,t,n,s,r,a){const i=(0,c.YT)(e,"forgetBias","basicLSTMCell"),l=(0,c.YT)(t,"lstmKernel","basicLSTMCell"),u=(0,c.YT)(n,"lstmBias","basicLSTMCell"),d=(0,c.YT)(s,"data","basicLSTMCell"),h=(0,c.YT)(r,"c","basicLSTMCell"),p=(0,c.YT)(a,"h","basicLSTMCell"),f=(0,A.x)([d,p],1),m=(0,E.N)(f,l),g=(0,o.W)(m,u),y=g.shape[0],b=g.shape[1]/4,x=[y,b],v=(0,_.d)(g,[0,0],x),w=(0,_.d)(g,[0,b],x),k=(0,_.d)(g,[0,2*b],x),T=(0,_.d)(g,[0,3*b],x),S=(0,o.W)((0,$.l)((0,R.r)(v),(0,D.y)(w)),(0,$.l)(h,(0,R.r)((0,o.W)(i,k))));return[S,(0,$.l)((0,D.y)(S),(0,R.r)(T))]}});var O=n(9772),M=n(9160);const z=(0,h.op)({batchNorm2d_:function(e,t,n,s,r,a){const i=(0,c.YT)(e,"x","batchNorm"),o=(0,c.YT)(t,"mean","batchNorm"),l=(0,c.YT)(n,"variance","batchNorm");let u,h;return null!=r&&(u=(0,c.YT)(r,"scale","batchNorm")),null!=s&&(h=(0,c.YT)(s,"offset","batchNorm")),d.vA(2===i.rank,()=>`Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`),d.vA(2===o.rank||1===o.rank,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`),d.vA(2===l.rank||1===l.rank,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`),null!=u&&d.vA(2===u.rank||1===u.rank,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`),null!=h&&d.vA(2===h.rank||1===h.rank,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${h.rank}.`),(0,M.$)(i,o,l,h,u,a)}}),L=(0,h.op)({batchNorm3d_:function(e,t,n,s,r,a){const i=(0,c.YT)(e,"x","batchNorm"),o=(0,c.YT)(t,"mean","batchNorm"),l=(0,c.YT)(n,"variance","batchNorm");let u,h;return null!=r&&(u=(0,c.YT)(r,"scale","batchNorm")),null!=s&&(h=(0,c.YT)(s,"offset","batchNorm")),d.vA(3===i.rank,()=>`Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`),d.vA(3===o.rank||1===o.rank,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`),d.vA(3===l.rank||1===l.rank,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`),null!=u&&d.vA(3===u.rank||1===u.rank,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`),null!=h&&d.vA(3===h.rank||1===h.rank,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${h.rank}.`),(0,M.$)(i,o,l,h,u,a)}}),P=(0,h.op)({batchNorm4d_:function(e,t,n,s,r,a){const i=(0,c.YT)(e,"x","batchNorm"),o=(0,c.YT)(t,"mean","batchNorm"),l=(0,c.YT)(n,"variance","batchNorm");let u,h;return null!=r&&(u=(0,c.YT)(r,"scale","batchNorm")),null!=s&&(h=(0,c.YT)(s,"offset","batchNorm")),d.vA(4===i.rank,()=>`Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`),d.vA(4===o.rank||1===o.rank,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`),d.vA(4===l.rank||1===l.rank,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`),null!=u&&d.vA(4===u.rank||1===u.rank,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`),null!=h&&d.vA(4===h.rank||1===h.rank,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${h.rank}.`),(0,M.$)(i,o,l,h,u,a)}}),B=(0,h.op)({bincount_:function(e,t,n){const s=(0,c.YT)(e,"x","bincount"),r=(0,c.YT)(t,"weights","bincount");d.vA("int32"===s.dtype,()=>`Error in bincount: input dtype must be int32, but got ${s.dtype}`),d.vA(n>=0,()=>`size must be non-negative, but got ${n}.`),d.vA(r.size===s.size||0===r.size,()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${s.shape}, weights shape: ${r.shape}.`);const a={x:s,weights:r},i={size:n};return l.T2.runKernel(u.N4F,a,i)}}),W=(0,h.op)({bitwiseAnd_:function(e,t){const n=(0,c.YT)(e,"x","bitwiseAnd"),s=(0,c.YT)(t,"y","bitwiseAnd");if(!(0,d.r1)(n.shape,s.shape))throw new Error(`BitwiseAnd: Tensors must have the same shape. x: ${n.shape}, y: ${s.shape}`);if("int32"!==n.dtype||"int32"!==s.dtype)throw new Error(`BitwiseAnd: Only supports 'int32' values in tensor, found type of x: ${n.dtype} and type of y: ${s.dtype}`);const r={a:n,b:s};return l.T2.runKernel(u.HNs,r)}}),V=(0,h.op)({broadcastArgs_:function(e,t){const n=(0,c.YT)(e,"s0","broadcastArgs","int32"),s=(0,c.YT)(t,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);if(1!==s.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${s.rank}`);const r={s0:n,s1:s};return l.T2.runKernel(u.vj7,r)}});var U=n(3567),G=n(448),H=n(855),j=n(6928),q=n(125),Y=n(7148);const K=(0,h.op)({concat1d_:function(e){return(0,A.x)(e,0)}}),X=(0,h.op)({concat2d_:function(e,t){return(0,A.x)(e,t)}}),Z=(0,h.op)({concat3d_:function(e,t){return(0,A.x)(e,t)}}),Q=(0,h.op)({concat4d_:function(e,t){return(0,A.x)(e,t)}});var J=n(3701),ee=n(8794),te=n(1106);const ne=(0,h.op)({conv3d_:function(e,t,n,s,r="NDHWC",a=[1,1,1]){const i=(0,c.YT)(e,"x","conv3d"),o=(0,c.YT)(t,"filter","conv3d");let h=i,p=!1;4===i.rank&&(p=!0,h=(0,I.t)(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),d.vA(5===h.rank,()=>`Error in conv3d: input must be rank 5, but got rank ${h.rank}.`),d.vA(5===o.rank,()=>`Error in conv3d: filter must be rank 5, but got rank ${o.rank}.`),d.vA(h.shape[4]===o.shape[3],()=>`Error in conv3d: depth of input (${h.shape[4]}) must match input depth for filter ${o.shape[3]}.`),d.vA((0,N.G0)(n,a),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),d.vA("NDHWC"===r,()=>`Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`),d.vA((0,N.qk)(a),()=>"Error in conv3D: Dilated rates should be larger than 0."),d.vA((0,N.qk)(n),()=>"Error in conv3D: Strides should be larger than 0.");const f={x:h,filter:o},m={strides:n,pad:s,dataFormat:r,dilations:a},g=l.T2.runKernel(u.A1h,f,m);return p?(0,I.t)(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}});var se=n(1895);const re=(0,h.op)({conv3dTranspose_:function(e,t,n,s,r){const a=(0,c.YT)(e,"x","conv3dTranspose"),i=(0,c.YT)(t,"filter","conv3dTranspose");return(0,se.c)(n,a,i,s,r)}});var ae=n(9907),ie=n(7451),oe=n(302),le=n(6808);const ue=(0,h.op)({denseBincount_:function(e,t,n,s=!1){const r=(0,c.YT)(e,"x","denseBincount"),a=(0,c.YT)(t,"weights","denseBincount");d.vA("int32"===r.dtype,()=>`Error in denseBincount: input dtype must be int32, but got ${r.dtype}`),d.vA(r.rank<=2,()=>`Error in denseBincount: input must be at most rank 2, but got rank ${r.rank}.`),d.vA(n>=0,()=>`size must be non-negative, but got ${n}.`),d.vA(a.size===r.size||0===a.size,()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${r.shape}, weights shape: ${a.shape}.`);const i={x:r,weights:a},o={size:n,binaryOutput:s};return l.T2.runKernel(u.wNW,i,o)}});var ce=n(1216),de=n(676);const he=(0,h.op)({diag_:function(e){const t={x:(0,c.YT)(e,"x","diag")};return l.T2.runKernel(u.ORI,t)}});var pe=n(3002),fe=n(9359),me=n(919),ge=n(9759);const ye=(0,h.op)({einsum_:function(e,...t){const n=t.map((e,t)=>(0,c.YT)(e,`tensors${t}`,"einsum")),s={equation:e};return l.T2.runKernel(u.Qgm,n,s)}});var be=n(3416);const xe=(0,h.op)({ensureShape_:function(e,t){const n=(0,c.YT)(e,"x","ensureShape","string_or_numeric");if(!(0,d.e_)(n.shape,t))throw new Error(`EnsureShape: Shape of tensor ${n.shape} is not compatible with expected shape ${t}`);return e}});var ve=n(3020),we=n(5207),ke=n(4881),Te=n(8631),Se=n(8710),Ne=n(517),Ie=n(4826);const Ce=(0,h.op)({eye_:function(e,t,n,s="float32"){null==t&&(t=e);const r=(0,G.r)([e,t],s),a=e<=t?e:t;for(let e=0;e<a;++e)r.set(1,e,e);const i=(0,I.t)(r.toTensor(),[e,t]);if(null==n)return i;if(1===n.length)return(0,Ie.V)((0,Se.U)(i,0),[n[0],1,1]);if(2===n.length)return(0,Ie.V)((0,Se.U)((0,Se.U)(i,0),0),[n[0],n[1],1,1]);if(3===n.length)return(0,Ie.V)((0,Se.U)((0,Se.U)((0,Se.U)(i,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});var Ae=n(6111),Ee=n(5606),$e=n(8991),Re=n(8229),_e=n(2058),De=n(3337),Fe=n(5040),Oe=n(8318),Me=n(3454),ze=n(6300),Le=n(6919),Pe=n(1303),Be=n(6508);function We(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const s={start:e,stop:t,num:n};return l.T2.runKernel(u.mnI,{},s)}var Ve=n(3531),Ue=n(4010),Ge=n(2015),He=n(5645),je=n(7991),qe=n(3330),Ye=n(3789),Ke=n(9881),Xe=n(9879),Ze=n(9925);const Qe=2147483648,Je=(0,h.op)({searchSorted_:function(e,t,n="left"){const s=(0,c.YT)(e,"sortedSequence","searchSorted"),r=(0,c.YT)(t,"values","searchSorted"),a=s.shape[s.shape.length-1],i=r.shape[r.shape.length-1],o=(0,I.t)(s,[-1,a]),h=(0,I.t)(r,[-1,i]);if(o.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(o.shape[0]!==h.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if((0,d.Ze)(h.shape)>=Qe)throw new Error("values tensor size must less than 2147483648");if(o.shape[1]>=Qe)throw new Error(`trailing dim_size must less than 2147483648 for int32 output type, was ${o.shape[1]}`);const p={sortedSequence:o,values:h},f={side:n};return l.T2.runKernel(u.uWl,p,f)}});function et(e,t){return Je(e,t,"left")}var tt=n(1938),nt=n(6999);const st=(0,h.op)({maxPool3d_:function(e,t=[1,1,1],n,s,r,a="NDHWC"){const i=(0,c.YT)(e,"x","maxPool3d");let o=i,h=!1;4===i.rank&&(h=!0,o=(0,I.t)(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),d.vA(5===o.rank,()=>`Error in maxPool3d: x must be rank 5 but got rank ${o.rank}.`),d.vA("NDHWC"===a,()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`),(0,N.s_)("maxPool3d",s,r);const p={x:o},f={filterSize:t,strides:n,pad:s,dimRoundingMode:r,dataFormat:a},m=l.T2.runKernel(u.ySp,p,f);return h?(0,I.t)(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}}),rt=(0,h.op)({maxPoolWithArgmax_:function(e,t,n,s,r=!1){const a={x:(0,c.YT)(e,"x","maxPoolWithArgmax")},i={filterSize:t,strides:n,pad:s,includeBatchInIndex:r},o=l.T2.runKernel(u.TL8,a,i);return{result:o[0],indexes:o[1]}}});var at=n(178),it=n(2611),ot=n(1411),lt=n(259);function ut(e,t,{indexing:n="xy"}={}){if("xy"!==n&&"ij"!==n)throw new TypeError(`${n} is not a valid third argument to meshgrid`);if(void 0===e)return[];let s=(0,c.YT)(e,"x","meshgrid",e instanceof lt.qY?e.dtype:"float32");if(void 0===t)return[s];let r=(0,c.YT)(t,"y","meshgrid",t instanceof lt.qY?t.dtype:"float32");const a=(0,d.Ze)(s.shape),i=(0,d.Ze)(r.shape);return"xy"===n?(s=(0,I.t)(s,[1,-1]),r=(0,I.t)(r,[-1,1]),[(0,E.N)((0,ot.S)([i,1],s.dtype),s),(0,E.N)(r,(0,ot.S)([1,a],r.dtype))]):(s=(0,I.t)(s,[-1,1]),r=(0,I.t)(r,[1,-1]),[(0,E.N)(s,(0,ot.S)([1,i],s.dtype)),(0,E.N)((0,ot.S)([a,1],r.dtype),r)])}var ct=n(7436),dt=n(2644),ht=n(6567),pt=n(152),ft=n(1078),mt=n(5793),gt=n(7126);const yt=(0,h.op)({moments_:function(e,t=null,n=!1){e=(0,c.YT)(e,"x","moments");const s=(0,d.Y6)(t,e.shape),r=(0,it.i)(e,s,n);let a=r.shape;n||(a=(0,ft.SM)(r.shape,s));const i=(0,mt.E)((0,gt.j)((0,S.w)(e,"float32"),(0,I.t)(r,a)));return{mean:r,variance:(0,it.i)(i,s,n)}}}),bt=(0,h.op)({multiRNNCell_:function(e,t,n,s){const r=(0,c.YT)(t,"data","multiRNNCell"),a=(0,c.j1)(n,"c","multiRNNCell"),i=(0,c.j1)(s,"h","multiRNNCell");let o=r;const l=[];for(let t=0;t<e.length;t++){const n=e[t](o,a[t],i[t]);l.push(n[0]),l.push(n[1]),o=n[1]}const u=[],d=[];for(let e=0;e<l.length;e+=2)u.push(l[e]),d.push(l[e+1]);return[u,d]}}),xt=(0,h.op)({multinomial_:function(e,t,n,s=!1){const r=(0,c.YT)(e,"logits","multinomial"),a=r.size,i=r.rank;if(a<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${a}.`);if(i>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${i}`);n=n||Math.random();const o={logits:1===i?(0,I.t)(r,[1,-1]):r},d={numSamples:t,seed:n,normalized:s},h=l.T2.runKernel(u.WT3,o,d);return 1===i?(0,I.t)(h,[h.size]):h}});var vt=n(6522),wt=n(2118),kt=n(1760),Tt=n(9885);const St=(0,h.op)({outerProduct_:function(e,t){const n=(0,c.YT)(e,"v1","outerProduct"),s=(0,c.YT)(t,"v2","outerProduct");d.vA(1===n.rank&&1===s.rank,()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${s.rank}.`);const r=(0,I.t)(n,[-1,1]),a=(0,I.t)(s,[1,-1]);return(0,E.N)(r,a)}});var Nt=n(5661);const It=(0,h.op)({pad1d_:function(e,t,n=0){return(0,d.vA)(2===t.length,()=>"Invalid number of paddings. Must be length of 2."),(0,Nt.e)(e,[t],n)}}),Ct=(0,h.op)({pad2d_:function(e,t,n=0){return(0,d.vA)(2===t.length&&2===t[0].length&&2===t[1].length,()=>"Invalid number of paddings. Must be length of 2 each."),(0,Nt.e)(e,t,n)}}),At=(0,h.op)({pad3d_:function(e,t,n=0){return(0,d.vA)(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,()=>"Invalid number of paddings. Must be length of 2 each."),(0,Nt.e)(e,t,n)}}),Et=(0,h.op)({pad4d_:function(e,t,n=0){return(0,d.vA)(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,()=>"Invalid number of paddings. Must be length of 2 each."),(0,Nt.e)(e,t,n)}});var $t=n(7872),Rt=n(8990),_t=n(4394),Dt=n(5295),Ft=n(7771);const Ot=(0,h.op)({raggedGather_:function(e,t,n,s){const r={paramsNestedSplits:e.map((e,t)=>(0,c.YT)(e,`tensors${t}`,"raggedGather","int32")),paramsDenseValues:(0,c.YT)(t,"paramsDenseValues","raggedGather"),indices:(0,c.YT)(n,"indices","raggedGather","int32")},a={outputRaggedRank:s},i=l.T2.runKernel(u.oJ2,r,a);return{outputNestedSplits:i.slice(0,i.length-1),outputDenseValues:i[i.length-1]}}}),Mt=(0,h.op)({raggedRange_:function(e,t,n){const s=(0,c.YT)(e,"starts","raggedRange"),r={starts:s,limits:(0,c.YT)(t,"limits","raggedRange",s.dtype),deltas:(0,c.YT)(n,"deltas","raggedRange",s.dtype)},a=l.T2.runKernel(u.CQC,r);return{rtNestedSplits:a[0],rtDenseValues:a[1]}}}),zt=(0,h.op)({raggedTensorToTensor_:function(e,t,n,s,r){const a=(0,c.YT)(e,"shape","raggedTensorToTensor","int32"),i=(0,c.YT)(t,"values","raggedTensorToTensor"),o={shape:a,values:i,defaultValue:(0,c.YT)(n,"defaultValue","raggedTensorToTensor",i.dtype),rowPartitionTensors:s.map((e,t)=>(0,c.YT)(e,`tensors${t}`,"raggedTensorToTensor","int32"))},d={rowPartitionTypes:r};return l.T2.runKernel(u.mH5,o,d)}}),Lt=(0,h.op)({rand_:function(e,t,n){(0,d.SA)(e);const s=(0,d.Ze)(e);let r=null;if(null==n||"float32"===n)r=new Float32Array(s);else if("int32"===n)r=new Int32Array(s);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);r=new Uint8Array(s)}for(let e=0;e<s;e++)r[e]=t();return l.T2.makeTensor(r,e,n)}});var Pt=n(7391);class Bt{constructor(e,t,n,s,r){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=s,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=r||Math.random();this.random=Pt.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let s,r,a;do{s=2*this.random()-1,r=2*this.random()-1,a=s*s+r*r}while(a>=1||0===a);const i=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*s*i,t=this.mean+this.stdDev*r*i,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class Wt{constructor(e,t,n,s){this.alpha=e,this.beta=1/t,this.dtype=n;const r=s||Math.random();this.randu=Pt.alea(r.toString()),this.randn=new Bt(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,s,r,a;for(;;){do{s=this.randn.nextValue(),a=1+this.c*s}while(a<=0);if(a*=a*a,e=s*s,t=1-.331*e*e,n=.5*e+this.d*(1-a+Math.log(a)),r=this.randu(),r<t||Math.log(r)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class Vt{constructor(e=0,t=1,n,s){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==s&&(s=Math.random()),"number"==typeof s&&(s=s.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=Pt.alea(s)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const Ut=(0,h.op)({randomGamma_:function(e,t,n=1,s="float32",r){if((0,d.SA)(e),null==n&&(n=1),null==s&&(s="float32"),"float32"!==s&&"int32"!==s)throw new Error(`Unsupported data type ${s}`);const a=new Wt(t,n,s,r),i=(0,G.r)(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}}),Gt=(0,h.op)({randomNormal_:function(e,t=0,n=1,s,r){if((0,d.SA)(e),null!=s&&"bool"===s)throw new Error(`Unsupported data type ${s}`);const a=new Bt(t,n,s,!1,r),i=(0,G.r)(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}}),Ht=(0,h.op)({randomStandardNormal_:function(e,t,n){if(null!=t&&"bool"===t)throw new Error(`Unsupported data type ${t}`);return Gt(e,0,1,t,n)}}),jt=(0,h.op)({randomUniform_:function(e,t=0,n=1,s="float32",r){(0,d.SA)(e);const a=(0,G.r)(e,s),i=new Vt(t,n,null,r);for(let e=0;e<a.values.length;e++)a.values[e]=i.nextValue();return a.toTensor()}}),qt=(0,h.op)({randomUniformInt_:function(e,t,n,s){return jt(e,t,n,"int32",s)}});function Yt(e,t,n=1,s="float32"){if(0===n)throw new Error("Cannot have a step of zero");const r={start:e,stop:t,step:n,dtype:s};return l.T2.runKernel(u.Q6t,{},r)}var Kt=n(1902),Xt=n(9870),Zt=n(112),Qt=n(3732),Jt=n(3262);const en=(0,h.op)({reverse1d_:function(e){const t=(0,c.YT)(e,"x","reverse");return d.vA(1===t.rank,()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`),(0,Jt.B)(t,0)}}),tn=(0,h.op)({reverse2d_:function(e,t){const n=(0,c.YT)(e,"x","reverse");return d.vA(2===n.rank,()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`),(0,Jt.B)(n,t)}}),nn=(0,h.op)({reverse3d_:function(e,t){const n=(0,c.YT)(e,"x","reverse");return d.vA(3===n.rank,()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`),(0,Jt.B)(n,t)}}),sn=(0,h.op)({reverse4d_:function(e,t){const n=(0,c.YT)(e,"x","reverse");return d.vA(4===n.rank,()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`),(0,Jt.B)(n,t)}});var rn=n(5912),an=n(7820),on=n(5702),ln=n(6325),un=n(9986);const cn=async function(e,t){const n=(0,c.YT)(e,"x","setdiff1d"),s=(0,c.YT)(t,"y","setdiff1d");d.vA(n.dtype===s.dtype,()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${s.dtype}).`),d.vA(1===n.rank,()=>`x should be 1D tensor, but got x (${n.shape}).`),d.vA(1===s.rank,()=>`y should be 1D tensor, but got y (${s.shape}).`);const r=await n.data(),a=await s.data(),i=new Set(a);let o=0;for(let e=0;e<r.length;e++)i.has(r[e])||o++;const l=new lt.yl([o],n.dtype),u=new lt.yl([o],"int32");for(let e=0,t=0;e<r.length;e++)i.has(r[e])||(l.values[t]=r[e],u.values[t]=e,t++);return[l.toTensor(),u.toTensor()]};var dn=n(1115),hn=n(3726),pn=n(8276);const fn=(0,h.op)({slice1d_:function(e,t,n){const s=(0,c.YT)(e,"x","slice1d");return d.vA(1===s.rank,()=>`slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`),(0,_.d)(s,[t],[n])}}),mn=(0,h.op)({slice2d_:function(e,t,n){const s=(0,c.YT)(e,"x","slice2d");return d.vA(2===s.rank,()=>`slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`),(0,_.d)(s,t,n)}}),gn=(0,h.op)({slice3d_:function(e,t,n){const s=(0,c.YT)(e,"x","slice3d");return d.vA(3===s.rank,()=>`slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`),(0,_.d)(s,t,n)}}),yn=(0,h.op)({slice4d_:function(e,t,n){const s=(0,c.YT)(e,"x","slice4d");return d.vA(4===s.rank,()=>`slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`),(0,_.d)(s,t,n)}});var bn=n(6346),xn=n(6030),vn=n(776),wn=n(1361),kn=n(3108),Tn=n(2292),Sn=n(8775),Nn=n(6512),In=n(9348),Cn=n(3427),An=n(5932),En=n(4268),$n=n(700),Rn=n(5894),_n=n(3791),Dn=n(7823),Fn=n(4027),On=n(9171);function Mn(e,t){(0,d.HO)(e);const n=(0,c.MZ)(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return(0,On.Q)(e,null,n,t)}function zn(e,t,n){if((0,d.HO)(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const s=(0,c.MZ)(e,n);if(2!==s.length&&1!==s.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return(0,On.Q)(e,t,s,n)}var Ln=n(2768);function Pn(e,t,n){if((0,d.HO)(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const s=(0,c.MZ)(e,n);if(4!==s.length&&1!==s.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return(0,On.Q)(e,t,s,n)}function Bn(e,t,n){if((0,d.HO)(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const s=(0,c.MZ)(e,n);if(5!==s.length&&1!==s.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return(0,On.Q)(e,t,s,n)}function Wn(e,t,n){if((0,d.HO)(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const s=(0,c.MZ)(e,n);if(6!==s.length&&1!==s.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return t=t||s,(0,On.Q)(e,t,s,n)}var Vn=n(6170);const Un=(0,h.op)({tensorScatterUpdate_:function(e,t,n){const s=(0,c.YT)(e,"tensor","tensorScatterupdate"),r=(0,c.YT)(t,"indices","tensorScatterupdate","int32"),a=(0,c.YT)(n,"updates","tensorScatterupdate");if(Vn.validateInput(a,r,s.shape),s.dtype!==a.dtype)throw new Error(`tensor and updates must have the same dtype, instead they are ${s.dtype} and ${a.dtype}.`);const i={tensor:s,indices:r,updates:a};return l.T2.runKernel(u.X4r,i,{})}});var Gn=n(1190);const Hn=(0,h.op)({truncatedNormal_:function(e,t=0,n=1,s,r){if((0,d.SA)(e),null!=s&&"bool"===s)throw new Error("Unsupported data type $ { dtype }");const a=new Bt(t,n,s,!0,r),i=(0,G.r)(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}});var jn=n(3937),qn=n(7706),Yn=n(7261);function Kn(e,t){return Je(e,t,"right")}function Xn(e,t=!0,n,s){return l.T2.makeVariable(e,t,n,s)}var Zn=n(2151),Qn=n(4411);const Jn=async function(e){const t=(0,c.YT)(e,"condition","whereAsync","bool"),n=await t.data(),s=(0,Qn.Y)(t.shape,n);return e!==t&&t.dispose(),s};var es=n(2855),ts=n(5537);const ns=async function(e,t,n){const s=(0,c.YT)(e,"tensor","boolMask"),r=(0,c.YT)(t,"mask","boolMask","bool"),a=null==n?0:n,i=r.rank,o=s.shape;d.vA(i>0,()=>"mask cannot be scalar"),d.O3(o.slice(a,a+i),r.shape,"mask's shape must match the first K dimensions of tensor's shape,");let l=1;for(let e=a;e<a+i;e++)l*=o[e];const u=o.slice(0,a).concat([l],o.slice(a+i)),h=(0,I.t)(s,u),p=(0,I.t)(r,[-1]),f=await Jn(p),m=(0,An.r)(f,[1]),g=(0,Re.k)(h,m,a);return e!==s&&s.dispose(),t!==r&&r.dispose(),m.dispose(),h.dispose(),p.dispose(),f.dispose(),g};var ss=n(7703),rs=n(2596),as=n(565);const is=(0,h.op)({movingAverage_:function(e,t,n,s,r=!0){const a=(0,c.YT)(e,"v","movingAverage"),i=(0,c.YT)(t,"x","movingAverage"),l=(0,c.YT)(n,"decay","movingAverage");(0,as.assertTypesMatch)(a,i),d.vA(d.r1(a.shape,i.shape),()=>"Shape mismatch in v and x");const u=(0,on.d)(1),h=(0,gt.j)(u,l);let p=(0,$.l)((0,gt.j)(i,a),h);if(r){d.vA(null!=s,()=>"When using zeroDebias: true, step is required.");const e=(0,c.YT)(s,"step","movingAverage");p=(0,fe.y)(p,(0,gt.j)(u,(0,Rt.n)(l,e)))}return(0,o.W)(a,p)}}),os=(0,h.op)({scatterND_:function(e,t,n){(0,d.SA)(n);const s=(0,c.YT)(e,"indices","scatterND","int32"),r=(0,c.YT)(t,"updates","scatterND");Vn.validateInput(r,s,n);const a={indices:s,updates:r},i={shape:n};return l.T2.runKernel(u.pJc,a,i)}}),ls=(0,h.op)({sparseToDense_:function(e,t,n,s=0){(0,d.SA)(n);const r=(0,c.YT)(e,"sparseIndices","sparseToDense","int32"),a=(0,c.YT)(t,"sparseValues","sparseToDense","string_or_numeric"),i=(0,c.YT)(s,"defaultValue","sparseToDense",a.dtype);!function(e,t,n,s){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const r=e.rank>0?e.shape[0]:1,a=e.rank>1?e.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const i=t.size;if(0!==t.rank&&(1!==t.rank||i!==r))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${r}]`);if(t.dtype!==s.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(r,a,n,i);const o={sparseIndices:r,sparseValues:a,defaultValue:i},h={outputShape:n};return l.T2.runKernel(u.jgd,o,h)}}),us=(0,h.op)({gatherND_:function(e,t){const n=(0,c.YT)(t,"indices","gatherND","int32"),s={params:(0,c.YT)(e,"x","gatherND","string_or_numeric"),indices:n};return l.T2.runKernel(u.O4G,s)}}),cs=(0,h.op)({dropout_:function(e,t,n,s){const r=(0,c.YT)(e,"x","dropout");if(d.vA("float32"===r.dtype,()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${r.dtype} tensor instead.`),d.vA(t>=0&&t<1,()=>`rate must be a float in the range [0, 1), but got ${t}.`),0===t)return e instanceof lt.qY?r.clone():r;const a=function(e,t){if(null==t)return e.shape.slice();if(d.r1(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let s=0;s<e.shape.length;s++)null==t[s]&&null!=e.shape[s]?n.push(e.shape[s]):n.push(t[s]);return n}return t}(r,n),i=1-t,l=(0,fe.y)((0,Ee.R)((0,o.W)(jt(a,0,1,"float32",s),i)),i);return(0,$.l)(r,l)}});function ds(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function hs(e,t,n){const s=1-e%2,r=new Float32Array(e);for(let a=0;a<e;++a){const i=2*Math.PI*a/(e+s-1);r[a]=t-n*Math.cos(i)}return Mn(r,"float32")}const ps=async function(e,t,n=1){const s=(0,c.YT)(e,"predictions","inTopK"),r=(0,c.YT)(t,"targets","inTopK");(0,d.vA)(s.rank>1,()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${s.rank}`),(0,d.vA)(s.rank-1===r.rank,()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${s.rank} and targets rank ${r.rank}`),(0,d.O3)(s.shape.slice(0,s.shape.length-1),r.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const a=s.shape[s.shape.length-1];(0,d.vA)(n>0&&n<=a,()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${n}`);const i=await s.data(),o=await r.data(),[l,u]=[i.length/a,a],h=(0,d.ce)("bool",l);for(let e=0;e<l;e++){const t=e*u,s=i.subarray(t,t+u),r=[];for(let e=0;e<s.length;e++)r.push({value:s[e],index:e});r.sort((e,t)=>t.value-e.value),h[e]=0;for(let t=0;t<n;t++)if(r[t].index===o[e]){h[e]=1;break}}return e!==s&&s.dispose(),t!==r&&r.dispose(),(0,Fn.O)(h,r.shape,"bool")};var fs=n(1830),ms=n(2198),gs=n(5248),ys=n(252),bs=n(8646);const xs=(0,h.op)({fusedConv2d_:function({x:e,filter:t,strides:n,pad:s,dataFormat:r="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:h,activation:p="linear",preluActivationWeights:f,leakyreluAlpha:m}){if(p=p||"linear",!1===(0,bs.zE)(l.T2.state.gradientDepth,p)){d.vA("NHWC"===r,()=>`Error in fused conv2d: got dataFormat of ${r} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`);let l=(0,ee.X)(e,t,n,s,r,a,i);return null!=h&&(l=(0,o.W)(l,h)),(0,bs.f2)(l,p,f,m)}const g=(0,c.YT)(e,"x","conv2d","float32"),y=(0,c.YT)(t,"filter","conv2d","float32");let b=g,x=!1;3===g.rank&&(x=!0,b=(0,I.t)(g,[1,g.shape[0],g.shape[1],g.shape[2]])),d.vA(4===b.rank,()=>`Error in fused conv2d: input must be rank 4, but got rank ${b.rank}.`),d.vA(4===y.rank,()=>`Error in fused conv2d: filter must be rank 4, but got rank ${y.rank}.`),N.s_("fused conv2d",s,i);const v="NHWC"===r?b.shape[3]:b.shape[1];d.vA(y.shape[2]===v,()=>`Error in conv2d: depth of input (${v}) must match input depth for filter ${y.shape[2]}.`),d.vA(N.G0(n,a),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`);const w=N.uf(b.shape,y.shape,n,a,s,i);let k,T;if(null!=h&&(k=(0,c.YT)(h,"bias","fused conv2d"),[k]=(0,as.makeTypesMatch)(k,g),"NHWC"===r?ms.assertAndGetBroadcastShape(w.outShape,k.shape):(d.vA(k.shape.length<=1,()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${k.shape.length}.`),d.vA(0===k.shape.length||k.shape[0]===w.outChannels||1===k.shape[0],()=>`Error in fused conv2d: bias shape (${k.shape}) is not compatible with the number of output channels (${w.outChannels})`))),null!=f){const e=f.shape;if(d.vA(e.length<=1||3===e.length,()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${e.length}.`),1===e.length)d.vA(1===e[0]||e[0]===w.outChannels,()=>`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the number of output channels (${w.outChannels}).`);else if(3===e.length)try{ms.assertAndGetBroadcastShape(e,w.outShape)}catch(t){const n=`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the output shape of the conv2d (${w.outShape}).`;throw Error(n)}T=(0,c.YT)(f,"prelu weights","fused conv2d")}const S=(e,t)=>{d.vA("NHWC"===r,()=>`Error in gradient of fused conv2D: got dataFormat of ${r} but only NHWC is currently supported.`);const[i,o,l,u]=t,c=(0,bs.XB)(e,l,p);d.vA(N.Dh(a),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`);const h=[(0,ys.v)(o.shape,c,i,n,s),(0,gs.H)(o,c,i.shape,n,s)];if(null!=u){const e=(0,bs.Do)(u,c);h.push(e)}return h},C={x:b,filter:y,bias:k,preluActivationWeights:T},A={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i,activation:p,leakyreluAlpha:m};if(null==h){const e=(0,fs._X)((e,t,n)=>{let s=l.T2.runKernel(u.aAr,C,A);return n([t,e,s]),x&&(s=(0,I.t)(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:S}});return e(b,y)}{const e=(0,fs._X)((e,t,n,s)=>{let r=l.T2.runKernel(u.aAr,C,A);return s([t,e,r,n]),x&&(r=(0,I.t)(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:S}});return e(b,y,k)}}});var vs=n(1890),ws=n(3134);const ks=(0,h.op)({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:s,dataFormat:r="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:h,activation:p="linear",preluActivationWeights:f,leakyreluAlpha:m}){if(!1===(0,bs.zE)(l.T2.state.gradientDepth,p)){let l=(0,de.G)(e,t,n,s,r,a,i);return null!=h&&(l=(0,o.W)(l,h)),(0,bs.f2)(l,p,f,m)}const g=(0,c.YT)(e,"x","depthwiseConv2d","float32"),y=(0,c.YT)(t,"filter","depthwiseConv2d","float32");let b=g,x=!1;3===g.rank&&(x=!0,b=(0,I.t)(g,[1,g.shape[0],g.shape[1],g.shape[2]])),d.vA(4===b.rank,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${b.rank}.`),d.vA(4===y.rank,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${y.rank}.`),d.vA(b.shape[3]===y.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${b.shape[3]}) must match the inChannels dimension in filter ${y.shape[2]}.`),null==a&&(a=[1,1]),d.vA(N.G0(n,a),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),N.s_("fused depthwiseConv2d",s,i);const v=N.uf(b.shape,y.shape,n,a,s,i,!0);let w,k;null!=h&&(w=(0,c.YT)(h,"bias","fused conv2d"),[w]=(0,as.makeTypesMatch)(w,g),ms.assertAndGetBroadcastShape(v.outShape,w.shape)),null!=f&&(k=(0,c.YT)(f,"prelu weights","fused depthwiseConv2d"));const T=(e,t)=>{d.vA(N.Dh(a),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`);const[r,o,l,u]=t,c=(0,bs.XB)(e,l,p),h=(0,ws.l)(o.shape,c,r,n,s,a,i),f=(0,vs.x)(o,c,r.shape,n,s,a,i);return null!=u?[h,f,(0,bs.Do)(w,c)]:[h,f]},S={x:b,filter:y,bias:w,preluActivationWeights:k},C={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i,activation:p,leakyreluAlpha:m};if(null==h){const e=(0,fs._X)((e,t,n)=>{let s=l.T2.runKernel(u.T7M,S,C);return n([t,e,s]),x&&(s=(0,I.t)(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:T}});return e(b,y)}{const e=(0,fs._X)((e,t,n,s)=>{let r=l.T2.runKernel(u.T7M,S,C);return s([t,e,r,n]),x&&(r=(0,I.t)(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:T}});return e(b,y,w)}}}),Ts=(0,h.op)({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:s=!1,bias:r,activation:a="linear",preluActivationWeights:i,leakyreluAlpha:h=.2}){if(!1===(0,bs.zE)(l.T2.state.gradientDepth,a)){let l=(0,E.N)(e,t,n,s);return null!=r&&(l=(0,o.W)(l,r)),(0,bs.f2)(l,a,i,h)}let p=(0,c.YT)(e,"a","fused matMul"),f=(0,c.YT)(t,"b","fused matMul");[p,f]=(0,as.makeTypesMatch)(p,f);const m=n?p.shape[p.rank-2]:p.shape[p.rank-1],g=s?f.shape[f.rank-1]:f.shape[f.rank-2],y=n?p.shape[p.rank-1]:p.shape[p.rank-2],b=s?f.shape[f.rank-2]:f.shape[f.rank-1],x=p.shape.slice(0,-2),v=f.shape.slice(0,-2),w=d.Ze(x),k=d.Ze(v);d.vA(m===g,()=>`Error in fused matMul: inner shapes (${m}) and (${g}) of Tensors with shapes ${p.shape} and ${f.shape} and transposeA=${n} and transposeB=${s} must match.`);const T=ms.assertAndGetBroadcastShape(p.shape.slice(0,-2),f.shape.slice(0,-2)).concat([y,b]),S=n?(0,I.t)(p,[w,m,y]):(0,I.t)(p,[w,y,m]),N=s?(0,I.t)(f,[k,b,g]):(0,I.t)(f,[k,g,b]);let C,A;null!=r&&(C=(0,c.YT)(r,"bias","fused matMul"),[C]=(0,as.makeTypesMatch)(C,p),ms.assertAndGetBroadcastShape(T,C.shape)),null!=i&&(A=(0,c.YT)(i,"prelu weights","fused matMul"));const $=(e,t)=>{const[i,o,l,u]=t,c=(0,bs.XB)((0,I.t)(e,l.shape),l,a);let d,h;return n||s?!n&&s?(d=(0,E.N)(c,o,!1,!1),h=(0,E.N)(c,i,!0,!1)):n&&!s?(d=(0,E.N)(o,c,!1,!0),h=(0,E.N)(i,c,!1,!1)):(d=(0,E.N)(o,c,!0,!0),h=(0,E.N)(c,i,!0,!0)):(d=(0,E.N)(c,o,!1,!0),h=(0,E.N)(i,c,!0,!1)),null!=r?[d,h,(0,bs.Do)(u,c)]:[d,h]},R={a:S,b:N,bias:C,preluActivationWeights:A},_={transposeA:n,transposeB:s,activation:a,leakyreluAlpha:h};if(null==r){const e=(0,fs._X)((e,t,n)=>{const s=l.T2.runKernel(u.Dr,R,_);return n([e,t,s]),{value:(0,I.t)(s,T),gradFunc:$}});return e(S,N)}{const e=(0,fs._X)((e,t,n,s)=>{const r=l.T2.runKernel(u.Dr,R,_);return s([e,t,r,n]),{value:(0,I.t)(r,T),gradFunc:$}});return e(S,N,C)}}}),Ss=(0,h.op)({hammingWindow_:function(e){return hs(e,.54,.46)}}),Ns=(0,h.op)({hannWindow_:function(e){return hs(e,.5,.5)}}),Is=(0,h.op)({frame_:function(e,t,n,s=!1,r=0){let a=0;const i=[];for(;a+t<=e.size;)i.push((0,_.d)(e,a,t)),a+=n;if(s)for(;a<e.size;){const s=a+t-e.size,o=(0,A.x)([(0,_.d)(e,a,t-s),(0,Ae.G)([s],r)]);i.push(o),a+=n}return 0===i.length?zn([],[0,t]):(0,I.t)((0,A.x)(i),[i.length,t])}}),Cs=(0,h.op)({stft_:function(e,t,n,s,r=Ns){null==s&&(s=ds(t));const a=Is(e,t,n),i=(0,$.l)(a,r(t));return(0,Sn.z)(i,s)}}),As=(0,h.op)({cropAndResize_:function(e,t,n,s,r="bilinear",a=0){const i=(0,c.YT)(e,"image","cropAndResize"),o=(0,c.YT)(t,"boxes","cropAndResize","float32"),h=(0,c.YT)(n,"boxInd","cropAndResize","int32"),p=o.shape[0];d.vA(4===i.rank,()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`),d.vA(2===o.rank&&4===o.shape[1],()=>`Error in cropAndResize: boxes must be have size [${p},4] but had shape ${o.shape}.`),d.vA(1===h.rank&&h.shape[0]===p,()=>`Error in cropAndResize: boxInd must be have size [${p}] but had shape ${o.shape}.`),d.vA(2===s.length,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`),d.vA(s[0]>=1&&s[1]>=1,()=>`cropSize must be atleast [1,1], but was ${s}`),d.vA("bilinear"===r||"nearest"===r,()=>`method must be bilinear or nearest, but was ${r}`);const f={image:i,boxes:o,boxInd:h},m={method:r,extrapolationValue:a,cropSize:s};return l.T2.runKernel(u.MRQ,f,m)}}),Es=(0,h.op)({flipLeftRight_:function(e){const t=(0,c.YT)(e,"image","flipLeftRight","float32");d.vA(4===t.rank,()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`);const n={image:t};return l.T2.runKernel(u.BxF,n,{})}}),$s=(0,h.op)({grayscaleToRGB_:function(e){const t=(0,c.YT)(e,"image","grayscaleToRGB"),n=t.rank-1,s=t.shape[n];d.vA(t.rank>=2,()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`),d.vA(1===s,()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${s}.`);const r=new Array(t.rank);return r.fill(1,0,n),r[n]=3,(0,Ie.V)(t,r)}}),Rs=(0,h.op)({rgbToGrayscale_:function(e){const t=(0,c.YT)(e,"image","RGBToGrayscale"),n=t.rank-1,s=t.shape[n];d.vA(t.rank>=2,()=>`Error in RGBToGrayscale: images must be at least rank 2, but got rank ${t.rank}.`),d.vA(3===s,()=>`Error in RGBToGrayscale: last dimension of an RGB image should be size 3, but got size ${s}.`);const r=t.dtype,a=(0,S.w)(t,"float32"),i=Mn([.2989,.587,.114]);let o;switch(t.rank){case 2:o=ye("ij,j->i",a,i);break;case 3:o=ye("ijk,k->ij",a,i);break;case 4:o=ye("ijkl,l->ijk",a,i);break;case 5:o=ye("ijklm,m->ijkl",a,i);break;case 6:o=ye("ijklmn,n->ijklm",a,i);break;default:throw new Error("Not a valid tensor rank.")}return o=(0,Se.U)(o,-1),(0,S.w)(o,r)}}),_s=(0,h.op)({rotateWithOffset_:function(e,t,n=0,s=.5){const r=(0,c.YT)(e,"image","rotateWithOffset","float32");d.vA(4===r.rank,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`);const a={image:r},i={radians:t,fillValue:n,center:s};return l.T2.runKernel(u.BK4,a,i)}});function Ds(e,t,n,s,r,a){null==s&&(s=.5),null==r&&(r=Number.NEGATIVE_INFINITY),null==a&&(a=0);const i=e.shape[0];return n=Math.min(n,i),d.vA(0<=s&&s<=1,()=>`iouThreshold must be in [0, 1], but was '${s}'`),d.vA(2===e.rank,()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`),d.vA(4===e.shape[1],()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`),d.vA(1===t.rank,()=>"scores must be a 1D tensor"),d.vA(t.shape[0]===i,()=>`scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`),d.vA(0<=a&&a<=1,()=>`softNmsSigma must be in [0, 1], but was '${a}'`),{maxOutputSize:n,iouThreshold:s,scoreThreshold:r,softNmsSigma:a}}const Fs=(0,h.op)({nonMaxSuppression_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY){const a=(0,c.YT)(e,"boxes","nonMaxSuppression","float32"),i=(0,c.YT)(t,"scores","nonMaxSuppression","float32"),o=Ds(a,i,n,s,r),d={maxOutputSize:n=o.maxOutputSize,iouThreshold:s=o.iouThreshold,scoreThreshold:r=o.scoreThreshold};return l.T2.runKernel(u.SDM,{boxes:a,scores:i},d)}});var Os=n(8360);const Ms=(0,h.op)({nonMaxSuppressionWithScore_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=0){const i=(0,c.YT)(e,"boxes","nonMaxSuppression"),o=(0,c.YT)(t,"scores","nonMaxSuppression"),d=Ds(i,o,n,s,r,a),h={boxes:i,scores:o},p={maxOutputSize:n=d.maxOutputSize,iouThreshold:s=d.iouThreshold,scoreThreshold:r=d.scoreThreshold,softNmsSigma:a=d.softNmsSigma},f=l.T2.runKernel(u.e0f,h,p);return{selectedIndices:f[0],selectedScores:f[1]}}}),zs=(0,h.op)({nonMaxSuppressionPadded_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=!1){const i=(0,c.YT)(e,"boxes","nonMaxSuppression"),o=(0,c.YT)(t,"scores","nonMaxSuppression"),d=Ds(i,o,n,s,r,null),h={boxes:i,scores:o},p={maxOutputSize:d.maxOutputSize,iouThreshold:d.iouThreshold,scoreThreshold:d.scoreThreshold,padToMaxOutputSize:a},f=l.T2.runKernel(u.Zl4,h,p);return{selectedIndices:f[0],validOutputs:f[1]}}});var Ls=n(4711),Ps=n(2954);const Bs=(0,h.op)({threshold_:function(e,t="binary",n=!1,s=.5){const r=(0,c.YT)(e,"image","threshold"),a=r.shape[0]*r.shape[1];let i,l,u,h,p=(0,$.l)(Mn([s]),255);if(d.vA(3===r.rank,()=>`Error in threshold: image must be rank 3,but got rank ${r.rank}.`),d.vA(3===r.shape[2]||1===r.shape[2],()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${r.shape[2]}.`),d.vA("int32"===r.dtype||"float32"===r.dtype,()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${r.dtype}.`),d.vA("otsu"===t||"binary"===t,()=>`Method must be binary or otsu, but was ${t}`),3===r.shape[2]){[i,l,u]=(0,Nn.l)(r,[1,1,1],-1);const e=(0,$.l)(i,.2989),t=(0,$.l)(l,.587),n=(0,$.l)(u,.114);h=(0,o.W)((0,o.W)(e,t),n)}else h=e;"otsu"===t&&(p=function(e,t){let n,s,r,a,i,l,u=Mn([-1]),c=Mn([0]),d=Mn([0]);for(let h=0;h<e.size-1;h++){n=(0,_.d)(e,0,h+1),s=(0,_.d)(e,h+1),i=(0,fe.y)((0,_n.c)(n),t),l=(0,fe.y)((0,_n.c)(s),t);const p=(0,_n.c)((0,$.l)(n,Yt(0,n.size)));r=(0,fe.y)(p,(0,_n.c)(n));const f=(0,Ae.G)(s.shape,n.size),m=(0,o.W)(Yt(0,s.size),f),g=(0,$.l)(s,m);a=(0,fe.y)((0,_n.c)(g),(0,_n.c)(s));const y=(0,gt.j)(r,a),b=(0,gt.j)(r,a),x=(0,$.l)(i,l);d=(0,$.l)((0,$.l)(x,y),b);const v=(0,_e.r)(d,c);c=(0,Zn._)(v,d,c),u=(0,Zn._)(v,Mn([h]),u)}return u}(B((0,S.w)((0,rn.L)(h),"int32"),(0,Fn.O)([]),256),a));const f=n?(0,Be.I)(h,p):(0,_e.r)(h,p);return(0,S.w)((0,$.l)(f,255),"int32")}}),Ws=(0,h.op)({transform_:function(e,t,n="nearest",s="constant",r=0,a){const i=(0,c.YT)(e,"image","transform","float32"),o=(0,c.YT)(t,"transforms","transform","float32");d.vA(4===i.rank,()=>`Error in transform: image must be rank 4,but got rank ${i.rank}.`),d.vA(2===o.rank&&(o.shape[0]===i.shape[0]||1===o.shape[0])&&8===o.shape[1],()=>"Error in transform: Input transform should be batch x 8 or 1 x 8"),d.vA(null==a||2===a.length,()=>`Error in transform: outputShape must be [height, width] or null, but got ${a}.`);const h={image:i,transforms:o},p={interpolation:n,fillMode:s,fillValue:r,outputShape:a};return l.T2.runKernel(u.dLy,h,p)}}),Vs=(0,h.op)({bandPart_:function(e,t,n){const s=(0,c.YT)(e,"a","bandPart");(0,d.vA)(s.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${s.rank}.`);const r=s.shape,[a,i]=s.shape.slice(-2);let o,l;"number"==typeof t?((0,d.vA)(t%1==0,()=>`bandPart(): numLower must be an integer, got ${t}.`),(0,d.vA)(t<=a,()=>`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`),o=(0,c.YT)(t<0?a:t,"numLower","bandPart")):((0,d.vA)("int32"===t.dtype,()=>"bandPart(): numLower's dtype must be an int32."),o=(0,Zn._)((0,Pe.M)(t,0),a,(0,dt.B)(t,a))),"number"==typeof n?((0,d.vA)(n%1==0,()=>`bandPart(): numUpper must be an integer, got ${n}.`),(0,d.vA)(n<=i,()=>`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`),l=(0,c.YT)(n<0?i:n,"numUpper","bandPart")):((0,d.vA)("int32"===n.dtype,()=>"bandPart(): numUpper's dtype must be an int32."),l=(0,Zn._)((0,Pe.M)(n,0),i,(0,dt.B)(n,i)));const u=(0,I.t)(Yt(0,a,1,"int32"),[-1,1]),h=Yt(0,i,1,"int32"),p=(0,gt.j)(u,h),f=(0,Ye.n)((0,Be.I)(p,o),(0,De.D)(p,(0,vt.H)(l))),m=(0,es.U)([a,i],s.dtype);return(0,I.t)((0,En.t)((0,Yn.K)((0,I.t)(s,[-1,a,i])).map(e=>(0,Zn._)(f,e,m))),r)}}),Us=(0,h.op)({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,(0,d.vA)(null!=e&&e.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");const n=e[0].shape[0];for(let t=1;t<e.length;++t)(0,d.vA)(e[t].shape[0]===n,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`)}else t=!0,e=(0,Nn.l)(e,e.shape[0],0).map(e=>(0,An.r)(e,[0]));(0,d.vA)(e.length<=e[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`);const n=[],s=e;for(let t=0;t<e.length;++t)n.push(l.T2.tidy(()=>{let e=s[t];if(t>0)for(let s=0;s<t;++s){const t=(0,$.l)((0,_n.c)((0,$.l)(n[s],e)),n[s]);e=(0,gt.j)(e,t)}return(0,fe.y)(e,(0,rs.x)(e,"euclidean"))}));return t?(0,En.t)(n,0):n}});var Gs=n(5287);function Hs(e,t=!1){return l.T2.tidy(()=>{(0,d.vA)(2===e.shape.length,()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`);const n=e.shape[0],s=e.shape[1];let r=Ce(n),a=(0,q.o)(e);const i=zn([[1]],[1,1]);let o=(0,q.o)(i);const u=n>=s?s:n;for(let e=0;e<u;++e){const t=a,u=o,c=r;[o,a,r]=l.T2.tidy(()=>{const t=(0,_.d)(a,[e,e],[n-e,1]),l=(0,rs.x)(t),u=(0,_.d)(a,[e,e],[1,1]),c=(0,Zn._)((0,_e.r)(u,0),zn([[-1]]),zn([[1]])),d=(0,gt.j)(u,(0,$.l)(c,l)),h=(0,fe.y)(t,d);o=1===h.shape[0]?(0,q.o)(i):(0,A.x)([i,(0,_.d)(h,[1,0],[h.shape[0]-1,h.shape[1]])],0);const p=(0,vt.H)((0,fe.y)((0,E.N)(c,d),l)),f=(0,_.d)(a,[e,0],[n-e,s]),m=(0,$.l)(p,o),g=(0,ss.m)(o);if(0===e)a=(0,gt.j)(f,(0,E.N)(m,(0,E.N)(g,f)));else{const t=(0,gt.j)(f,(0,E.N)(m,(0,E.N)(g,f)));a=(0,A.x)([(0,_.d)(a,[0,0],[e,s]),t],0)}const y=(0,ss.m)(m),b=(0,_.d)(r,[0,e],[n,r.shape[1]-e]);if(0===e)r=(0,gt.j)(b,(0,E.N)((0,E.N)(b,o),y));else{const t=(0,gt.j)(b,(0,E.N)((0,E.N)(b,o),y));r=(0,A.x)([(0,_.d)(r,[0,0],[n,e]),t],1)}return[o,a,r]}),(0,Gs.AS)([t,u,c])}return!t&&n>s&&(r=(0,_.d)(r,[0,0],[n,s]),a=(0,_.d)(a,[0,0],[s,s])),[r,a]})}const js=(0,h.op)({qr_:function(e,t=!1){if((0,d.vA)(e.rank>=2,()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`),2===e.rank)return Hs(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce((e,t)=>e*t),s=(0,Yn.K)((0,I.t)(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),r=[],a=[];return s.forEach(e=>{const[n,s]=Hs(e,t);r.push(n),a.push(s)}),[(0,I.t)((0,En.t)(r,0),e.shape),(0,I.t)((0,En.t)(a,0),e.shape)]}}});var qs=n(4703);const Ys=(0,h.op)({computeWeightedLoss_:function(e,t,n=qs.i.SUM_BY_NONZERO_WEIGHTS){const s=(0,c.YT)(e,"losses","computeWeightedLoss");let r=null;null!=t&&(r=(0,c.YT)(t,"weights","computeWeightedLoss"));const a=null==r?s:(0,$.l)(s,r);if(n===qs.i.NONE)return a;if(n===qs.i.SUM)return(0,_n.c)(a);if(n===qs.i.MEAN){if(null==r)return(0,it.i)(a);{const e=s.size/r.size,t=(0,fe.y)((0,_n.c)(a),(0,_n.c)(r));return e>1?(0,fe.y)(t,(0,on.d)(e)):t}}if(n===qs.i.SUM_BY_NONZERO_WEIGHTS){if(null==r)return(0,fe.y)((0,_n.c)(a),(0,on.d)(s.size));{const e=(0,$.l)(r,(0,ot.S)(s.shape)),t=(0,S.w)((0,_n.c)((0,wt.E)(e,(0,on.d)(0))),"float32");return(0,fe.y)((0,_n.c)(a),t)}}throw Error(`Unknown reduction: ${n}`)}}),Ks=(0,h.op)({absoluteDifference_:function(e,t,n,s=qs.i.SUM_BY_NONZERO_WEIGHTS){const a=(0,c.YT)(e,"labels","absoluteDifference"),i=(0,c.YT)(t,"predictions","absoluteDifference");let o=null;null!=n&&(o=(0,c.YT)(n,"weights","absoluteDifference")),(0,d.O3)(a.shape,i.shape,"Error in absoluteDifference: ");const l=(0,r.t)((0,gt.j)(a,i));return Ys(l,o,s)}}),Xs=(0,h.op)({cosineDistance_:function(e,t,n,s,r=qs.i.SUM_BY_NONZERO_WEIGHTS){const a=(0,c.YT)(e,"labels","cosineDistance"),i=(0,c.YT)(t,"predictions","cosineDistance");let o=null;null!=s&&(o=(0,c.YT)(s,"weights","cosineDistance")),(0,d.O3)(a.shape,i.shape,"Error in cosineDistance: ");const l=(0,on.d)(1),u=(0,gt.j)(l,(0,_n.c)((0,$.l)(a,i),n,!0));return Ys(u,o,r)}}),Zs=(0,h.op)({hingeLoss_:function(e,t,n,s=qs.i.SUM_BY_NONZERO_WEIGHTS){let r=(0,c.YT)(e,"labels","hingeLoss");const a=(0,c.YT)(t,"predictions","hingeLoss");let i=null;null!=n&&(i=(0,c.YT)(n,"weights","hingeLoss")),(0,d.O3)(r.shape,a.shape,"Error in hingeLoss: ");const o=(0,on.d)(1);r=(0,gt.j)((0,$.l)((0,on.d)(2),r),o);const l=(0,Zt.V)((0,gt.j)(o,(0,$.l)(r,a)));return Ys(l,i,s)}}),Qs=(0,h.op)({huberLoss_:function(e,t,n,s=1,a=qs.i.SUM_BY_NONZERO_WEIGHTS){const i=(0,c.YT)(e,"labels","huberLoss"),l=(0,c.YT)(t,"predictions","huberLoss");let u=null;null!=n&&(u=(0,c.YT)(n,"weights","huberLoss")),(0,d.O3)(i.shape,l.shape,"Error in huberLoss: ");const h=(0,on.d)(s),p=(0,r.t)((0,gt.j)(l,i)),f=(0,dt.B)(p,h),m=(0,gt.j)(p,f),g=(0,o.W)((0,$.l)((0,on.d)(.5),(0,mt.E)(f)),(0,$.l)(h,m));return Ys(g,u,a)}}),Js=(0,h.op)({logLoss_:function(e,t,n,s=1e-7,r=qs.i.SUM_BY_NONZERO_WEIGHTS){const a=(0,c.YT)(e,"labels","logLoss"),i=(0,c.YT)(t,"predictions","logLoss");let l=null;null!=n&&(l=(0,c.YT)(n,"weights","logLoss")),(0,d.O3)(a.shape,i.shape,"Error in logLoss: ");const u=(0,on.d)(1),h=(0,on.d)(s),p=(0,vt.H)((0,$.l)(a,(0,Ue.R)((0,o.W)(i,h)))),f=(0,$.l)((0,gt.j)(u,a),(0,Ue.R)((0,o.W)((0,gt.j)(u,i),h))),m=(0,gt.j)(p,f);return Ys(m,l,r)}}),er=(0,h.op)({meanSquaredError_:function(e,t,n,s=qs.i.SUM_BY_NONZERO_WEIGHTS){const r=(0,c.YT)(e,"labels","meanSquaredError"),a=(0,c.YT)(t,"predictions","meanSquaredError");let i=null;null!=n&&(i=(0,c.YT)(n,"weights","meanSquaredError")),(0,d.O3)(r.shape,a.shape,"Error in meanSquaredError: ");const o=(0,Cn.P)(r,a);return Ys(o,i,s)}}),tr=(0,h.op)({sigmoidCrossEntropy_:function(e,t,n,s=0,a=qs.i.SUM_BY_NONZERO_WEIGHTS){let i=(0,c.YT)(e,"multiClassLabels","sigmoidCrossEntropy");const l=(0,c.YT)(t,"logits","sigmoidCrossEntropy");let u=null;if(null!=n&&(u=(0,c.YT)(n,"weights","sigmoidCrossEntropy")),(0,d.O3)(i.shape,l.shape,"Error in sigmoidCrossEntropy: "),s>0){const e=(0,on.d)(s),t=(0,on.d)(1),n=(0,on.d)(.5);i=(0,o.W)((0,$.l)(i,(0,gt.j)(t,e)),(0,$.l)(n,e))}const h=function(e,t){const n=(0,c.YT)(e,"labels","sigmoidCrossEntropyWithLogits"),s=(0,c.YT)(t,"logits","sigmoidCrossEntropyWithLogits");(0,d.O3)(n.shape,s.shape,"Error in sigmoidCrossEntropyWithLogits: ");const a=(0,Zt.V)(s),i=(0,$.l)(s,n),l=(0,Ge.K)((0,Te.o)((0,vt.H)((0,r.t)(s))));return(0,o.W)((0,gt.j)(a,i),l)}(i,l);return Ys(h,u,a)}}),nr=(0,h.op)({softmaxCrossEntropy_:function(e,t,n,s=0,r=qs.i.SUM_BY_NONZERO_WEIGHTS){let a=(0,c.YT)(e,"onehotLabels","softmaxCrossEntropy");const i=(0,c.YT)(t,"logits","softmaxCrossEntropy");let l=null;if(null!=n&&(l=(0,c.YT)(n,"weights","softmaxCrossEntropy")),(0,d.O3)(a.shape,i.shape,"Error in softmaxCrossEntropy: "),s>0){const e=(0,on.d)(s),t=(0,on.d)(1),n=(0,on.d)(a.shape[1]);a=(0,o.W)((0,$.l)(a,(0,gt.j)(t,e)),(0,fe.y)(e,n))}const u=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);const s=(0,fs._X)((e,t,s)=>{const r=(0,qe.V)(t,[n],!0),a=(0,gt.j)((0,S.w)(t,"float32"),r);s([e,a]);const i=(0,vt.H)((0,$.l)(a,e));return{value:(0,_n.c)(i,[n]),gradFunc:(e,t)=>{const[s,r]=t,a=(0,ft.SM)(e.shape,[n]);return[(0,$.l)((0,I.t)(e,a),(0,gt.j)((0,S.w)(s,"float32"),(0,Te.o)(r))),(0,$.l)((0,I.t)(e,a),(0,gt.j)((0,Te.o)(r),(0,S.w)(s,"float32")))]}}});return s(e,t)}(a,i);return Ys(u,l,r)}}),sr=(0,h.op)({sparseFillEmptyRows_:function(e,t,n,s){const r=(0,c.YT)(e,"indices","sparseFillEmptyRows","int32"),a=(0,c.YT)(t,"values","sparseFillEmptyRows"),i=(0,c.YT)(n,"denseShape","sparseFillEmptyRows","int32"),o=(0,c.YT)(s,"defaultValue","sparseFillEmptyRows",a.dtype);if(2!==r.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==a.rank)throw new Error(`Values should be Tensor1D but received shape ${a.shape}`);if(1!==i.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${i.shape}`);if(0!==o.rank)throw new Error(`Default value should be a scalar but received shape ${o.shape}`);const d={indices:r,values:a,denseShape:i,defaultValue:o},h=l.T2.runKernel(u.C8s,d);return{outputIndices:h[0],outputValues:h[1],emptyRowIndicator:h[2],reverseIndexMap:h[3]}}}),rr=(0,h.op)({sparseReshape_:function(e,t,n){const s=(0,c.YT)(e,"inputIndices","sparseReshape","int32"),r=(0,c.YT)(t,"inputShape","sparseReshape","int32"),a=(0,c.YT)(n,"newShape","sparseReshape","int32");if(2!==s.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${s.shape}`);if(1!==r.rank)throw new Error(`Input shape should be Tensor1D but received shape ${r.shape}`);if(1!==a.rank)throw new Error(`New shape should be Tensor1D but received shape ${a.shape}`);const i={inputIndices:s,inputShape:r,newShape:a},o=l.T2.runKernel(u.BoJ,i);return{outputIndices:o[0],outputShape:o[1]}}}),ar=(0,h.op)({sparseSegmentMean_:function(e,t,n){const s=(0,c.YT)(e,"data","sparseSegmentMean"),r=(0,c.YT)(t,"indices","sparseSegmentMean","int32"),a=(0,c.YT)(n,"segmentIds","sparseSegmentMean","int32");if(s.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${r.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${a.shape}`);const i={data:s,indices:r,segmentIds:a};return l.T2.runKernel(u.L6G,i)}}),ir=(0,h.op)({sparseSegmentSum_:function(e,t,n){const s=(0,c.YT)(e,"data","sparseSegmentSum"),r=(0,c.YT)(t,"indices","sparseSegmentSum","int32"),a=(0,c.YT)(n,"segmentIds","sparseSegmentSum","int32");if(s.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${r.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${a.shape}`);const i={data:s,indices:r,segmentIds:a};return l.T2.runKernel(u.DvZ,i)}}),or=(0,h.op)({stringNGrams_:function(e,t,n,s,r,a,i,o){const d=(0,c.YT)(e,"data","stringNGrams","string");if("string"!==d.dtype)throw new Error("Data must be of datatype string");if(1!==d.shape.length)throw new Error(`Data must be a vector, saw: ${d.shape}`);const h=(0,c.YT)(t,"dataSplits","stringNGrams");if("int32"!==h.dtype)throw new Error("Data splits must be of datatype int32");const p={separator:n,nGramWidths:s,leftPad:r,rightPad:a,padWidth:i,preserveShortSequences:o},f={data:d,dataSplits:h},m=l.T2.runKernel(u.YAb,f,p);return{nGrams:m[0],nGramsSplits:m[1]}}}),lr=(0,h.op)({stringSplit_:function(e,t,n=!0){const s=(0,c.YT)(e,"input","stringSplit","string"),r=(0,c.YT)(t,"delimiter","stringSplit","string");if(1!==s.rank)throw new Error(`Input should be Tensor1D but received shape ${s.shape}`);if(0!==r.rank)throw new Error(`Delimiter should be a scalar but received shape ${r.shape}`);const a={skipEmpty:n},i={input:s,delimiter:r},o=l.T2.runKernel(u.iW0,i,a);return{indices:o[0],values:o[1],shape:o[2]}}}),ur=(0,h.op)({stringToHashBucketFast_:function(e,t){const n=(0,c.YT)(e,"input","stringToHashBucketFast","string"),s={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");const r={input:n};return l.T2.runKernel(u.$jE,r,s)}}),cr=(0,h.op)({staticRegexReplace_:function(e,t,n,s=!0){const r=(0,c.YT)(e,"input","staticRegexReplace","string"),a={pattern:t,rewrite:n,replaceGlobal:s};return l.T2.runKernel(u.GZp,{x:r},a)}}),dr={fft:wn.h,ifft:kn.K,rfft:Sn.z,irfft:Tn.g},hr={hammingWindow:Ss,hannWindow:Ns,frame:Is,stft:Cs},pr={flipLeftRight:Es,grayscaleToRGB:$s,resizeNearestNeighbor:Ps.b,resizeBilinear:Ls.v,rgbToGrayscale:Rs,rotateWithOffset:_s,cropAndResize:As,nonMaxSuppression:Fs,nonMaxSuppressionAsync:async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY){const a=(0,c.YT)(e,"boxes","nonMaxSuppressionAsync"),i=(0,c.YT)(t,"scores","nonMaxSuppressionAsync"),o=Ds(a,i,n,s,r);n=o.maxOutputSize,s=o.iouThreshold,r=o.scoreThreshold;const l=await Promise.all([a.data(),i.data()]),u=l[0],d=l[1],{selectedIndices:h}=(0,Os.c7)(u,d,n,s,r);return a!==e&&a.dispose(),i!==t&&i.dispose(),Mn(h,"int32")},nonMaxSuppressionWithScore:Ms,nonMaxSuppressionWithScoreAsync:async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=0){const i=(0,c.YT)(e,"boxes","nonMaxSuppressionAsync"),o=(0,c.YT)(t,"scores","nonMaxSuppressionAsync"),l=Ds(i,o,n,s,r,a);n=l.maxOutputSize,s=l.iouThreshold,r=l.scoreThreshold,a=l.softNmsSigma;const u=await Promise.all([i.data(),o.data()]),d=u[0],h=u[1],{selectedIndices:p,selectedScores:f}=(0,Os.ut)(d,h,n,s,r,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:Mn(p,"int32"),selectedScores:Mn(f)}},nonMaxSuppressionPadded:zs,nonMaxSuppressionPaddedAsync:async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=!1){const i=(0,c.YT)(e,"boxes","nonMaxSuppressionAsync"),o=(0,c.YT)(t,"scores","nonMaxSuppressionAsync"),l=Ds(i,o,n,s,r,null),u=l.maxOutputSize,d=l.iouThreshold,h=l.scoreThreshold,[p,f]=await Promise.all([i.data(),o.data()]),{selectedIndices:m,validOutputs:g}=(0,Os.ZS)(p,f,u,d,h,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:Mn(m,"int32"),validOutputs:(0,on.d)(g,"int32")}},threshold:Bs,transform:Ws},fr={bandPart:Vs,gramSchmidt:Us,qr:js},mr={absoluteDifference:Ks,computeWeightedLoss:Ys,cosineDistance:Xs,hingeLoss:Zs,huberLoss:Qs,logLoss:Js,meanSquaredError:er,sigmoidCrossEntropy:tr,softmaxCrossEntropy:nr},gr={sparseFillEmptyRows:sr,sparseReshape:rr,sparseSegmentMean:ar,sparseSegmentSum:ir},yr={stringNGrams:or,stringSplit:lr,stringToHashBucketFast:ur,staticRegexReplace:cr}},7311:(e,t,n)=>{"use strict";n.d(t,{y:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({tanh_:function(e){const t={x:(0,a.YT)(e,"x","tanh","float32")};return s.T2.runKernel(r.iuW,t)}})},7391:(e,t,n)=>{var s=n(7180),r=n(3181),a=n(3031),i=n(9067),o=n(6833),l=n(3717),u=n(4801);u.alea=s,u.xor128=r,u.xorwow=a,u.xorshift7=i,u.xor4096=o,u.tychei=l,e.exports=u},7436:(e,t,n)=>{"use strict";n.d(t,{j:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({min_:function(e,t=null,n=!1){const i={x:(0,a.YT)(e,"x","min")},o={axis:t,keepDims:n};return s.T2.runKernel(r.lNG,i,o)}})},7451:(e,t,n)=>{"use strict";n.d(t,{y:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({cosh_:function(e){const t={x:(0,a.YT)(e,"x","cosh","float32")};return s.T2.runKernel(r.MnK,t)}})},7523:(e,t,n)=>{"use strict";n.d(t,{W:()=>o});var s=n(1585),r=n(5441),a=n(565),i=n(8189);const o=(0,n(929).op)({add_:function(e,t){let n=(0,i.YT)(e,"a","add"),o=(0,i.YT)(t,"b","add");[n,o]=(0,a.makeTypesMatch)(n,o);const l={a:n,b:o};return s.T2.runKernel(r.OMN,l)}})},7558:(e,t,n)=>{"use strict";n.d(t,{F:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({acosh_:function(e){const t={x:(0,a.YT)(e,"x","acosh")};return s.T2.runKernel(r.PH8,t)}})},7703:(e,t,n)=>{"use strict";n.d(t,{m:()=>p});var s=n(1585),r=n(5287),a=n(5441),i=n(8189),o=n(5119),l=n(7148),u=n(5040),c=n(6522),d=n(929),h=n(1902);const p=(0,d.op)({transpose_:function(e,t,n){const d=(0,i.YT)(e,"x","transpose");if(null==t&&(t=d.shape.map((e,t)=>t).reverse()),o.vA(d.rank===t.length,()=>`Error in transpose: rank of input ${d.rank} must match length of perm ${t}.`),t.forEach(e=>{o.vA(e>=0&&e<d.rank,()=>"All entries in 'perm' must be between 0 and "+(d.rank-1)+` but got ${t}`)}),d.rank<=1)return d.clone();const p={x:d},f={perm:t};return"complex64"===d.dtype?(0,r.DZ)(()=>{let e=(0,h.x)(d),t=(0,u.n)(d);return e=s.T2.runKernel(a.wx0,{x:e},f),t=s.T2.runKernel(a.wx0,{x:t},f),n&&(t=(0,c.H)(t)),(0,l.f)(e,t)}):s.T2.runKernel(a.wx0,p,f)}})},7706:(e,t,n)=>{"use strict";n.d(t,{z:()=>o});var s=n(1585),r=n(5441),a=n(8189),i=n(5119);const o=(0,n(929).op)({unsortedSegmentSum_:function(e,t,n){const o=(0,a.YT)(e,"x","unsortedSegmentSum"),l=(0,a.YT)(t,"segmentIds","unsortedSegmentSum","int32");(0,i.vA)((0,i.E6)(n),()=>"numSegments must be of dtype int");const u={x:o,segmentIds:l},c={numSegments:n};return s.T2.runKernel(r.pPe,u,c)}})},7771:(e,t,n)=>{"use strict";n.d(t,{_:()=>o});var s=n(1585),r=n(5441),a=n(8189),i=n(9809);const o=(0,n(929).op)({prod_:function(e,t=null,n=!1){let o=(0,a.YT)(e,"x","prod");"bool"===o.dtype&&(o=(0,i.w)(o,"int32"));const l={x:o},u={axis:t,keepDims:n};return s.T2.runKernel(r.kdj,l,u)}})},7820:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({rsqrt_:function(e){const t={x:(0,a.YT)(e,"x","rsqrt","float32")};return s.T2.runKernel(r.TOR,t)}})},7823:(e,t,n)=>{"use strict";n.d(t,{M:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({tan_:function(e){const t={x:(0,a.YT)(e,"x","tan","float32")};return s.T2.runKernel(r.oFs,t)}})},7872:(e,t,n)=>{"use strict";n.d(t,{d:()=>h});var s=n(8189),r=n(5119),a=n(3909),i=n(9772),o=n(7195),l=n(6999),u=n(929),c=n(2302),d=n(776);const h=(0,u.op)({pool_:function(e,t,n,u,h,p,f){null==h&&(h=[1,1]),null==p&&(p=1),0===u&&(u="valid");const m=(0,s.YT)(e,"x","maxPool");let g=m,y=!1;3===m.rank&&(y=!0,g=(0,c.t)(m,[1,m.shape[0],m.shape[1],m.shape[2]])),r.vA(o.G0(p,h),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${p} and dilations '${h}'`);const b=o.E6(g.shape,t,p,h,u),x=[b.dilationHeight,b.dilationWidth];let v;v="same"===u?function(e,t){const n=e.map((e,n)=>e+(e-1)*(t[n]-1)).map(e=>e-1),s=n.map(e=>Math.floor(e/2)),r=n.map((e,t)=>e-s[t]);return n.map((e,t)=>[s[t],r[t]])}([b.filterHeight,b.filterWidth],x):[[0,0],[0,0]];const w=1===x[0]&&1===x[1],[k,T]=function(e,t,n){const s=n.map(e=>e[0]),r=n.map(e=>e[1]),a=e.concat(s,r),i=t.map((e,t)=>(e-a[t]%e)%e),o=r.map((e,t)=>e+i[t]);return[t.map((e,t)=>[s[t],o[t]]),t.map((e,t)=>[0,i[t]])]}([b.inHeight,b.inWidth],x,v),S=w?u:"valid",N=w?g:(0,d.e)(g,x,k),I=("avg"===n?()=>(0,a.$)(N,t,p,S,f):()=>(0,l.j)(N,t,p,S,f))(),C=w?I:(0,i.G)(I,x,T);return y?(0,c.t)(C,[C.shape[1],C.shape[2],C.shape[3]]):C}})},7986:(e,t,n)=>{"use strict";n.d(t,{d:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({slice_:function(e,t,n){const i=(0,a.YT)(e,"x","slice","string_or_numeric");if(0===i.rank)throw new Error("Slicing scalar is not possible");const o={x:i},l={begin:t,size:n};return s.T2.runKernel(r.JiE,o,l)}})},7991:(e,t,n)=>{"use strict";n.d(t,{H:()=>p});var s=n(1830),r=n(8189),a=n(9809),i=n(8631),o=n(4010),l=n(1938),u=n(9258),c=n(929),d=n(7126),h=n(3791);const p=(0,c.op)({logSoftmax_:function(e,t=-1){const n=(0,r.YT)(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);return(0,s._X)((e,n)=>{const s=(0,l.T)(e,t,!0),r=(0,d.j)(e,s),c=(0,d.j)((0,a.w)(r,"float32"),(0,o.R)((0,h.c)((0,i.o)(r),t,!0)));return n([c]),{value:c,gradFunc:(e,n)=>{const[s]=n,r=(0,i.o)(s);return(0,d.j)(e,(0,u.l)((0,h.c)(e,t,!0),r))}}})(n)}})},8108:()=>{},8189:(e,t,n)=>{"use strict";n.d(t,{MZ:()=>u,YT:()=>h,j1:()=>p});var s=n(1585),r=n(6574),a=n(259),i=n(2046),o=n(3879),l=n(5119);function u(e,t){let n=e;if((0,o.isTypedArray)(e))return"string"===t?[]:[e.length];if((0,i.Oj)(e)){const t=e.channels||"RGBA";return[e.height,e.width*t.length]}if((0,i.Nw)(e))return[e.buffer.size/(null==t?4:(0,l.jv)(t))];if(!Array.isArray(e))return[];const s=[];for(;Array.isArray(n)||(0,o.isTypedArray)(n)&&"string"!==t;)s.push(n.length),n=n[0];return Array.isArray(e)&&(0,r._K)().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&c(e,s,[]),s}function c(e,t,n){if(n=n||[],!Array.isArray(e)&&!(0,o.isTypedArray)(e))return void(0,l.vA)(0===t.length,()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`);(0,l.vA)(t.length>0,()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`),(0,l.vA)(e.length===t[0],()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`);const s=t.slice(1);for(let t=0;t<e.length;++t)c(e[t],s,n.concat(t))}function d(e,t,n,s){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${s}' must be ${e} tensor, but got ${t} tensor`)}}function h(e,t,n,r="numeric"){if(e instanceof(0,a.tp)())return d(r,e.dtype,t,n),e;let i=(0,l.X$)(e);if("string"!==i&&["bool","int32","float32"].indexOf(r)>=0&&(i=r),d(r,i,t,n),null==e||!(0,o.isTypedArray)(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const s=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${s}'`)}const c=u(e,i);(0,o.isTypedArray)(e)||Array.isArray(e)||(e=[e]);const h="string"!==i?(0,o.toTypedArray)(e,i):(0,o.flatten)(e,[],!0);return s.T2.makeTensor(h,c,i)}function p(e,t,n,s="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map((e,r)=>h(e,`${t}[${r}]`,n,s))}},8229:(e,t,n)=>{"use strict";n.d(t,{k:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({gather_:function(e,t,n=0,i=0){const o={x:(0,a.YT)(e,"x","gather"),indices:(0,a.YT)(t,"indices","gather","int32")},l={axis:n,batchDims:i};return s.T2.runKernel(r.mxL,o,l)}})},8276:(e,t,n)=>{"use strict";n.d(t,{L:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({sinh_:function(e){const t={x:(0,a.YT)(e,"x","sinh")};return s.T2.runKernel(r.J3C,t)}})},8318:(e,t,n)=>{"use strict";n.d(t,{M:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({isFinite_:function(e){const t={x:(0,a.YT)(e,"x","isFinite")};return s.T2.runKernel(r.gIW,t)}})},8360:(e,t,n)=>{"use strict";function s(e,t,n){const s=function(e,t,n){return function(e,t,n){let s=0,r=e.length,a=0,i=!1;for(;s<r;){a=s+(r-s>>>1);const o=n(t,e[a]);o>0?s=a+1:(r=a,i=!o)}return i?s:-s-1}(e,t,n||r)}(e,t,n),a=s<0?-(s+1):s;e.splice(a,0,t)}function r(e,t){return e>t?1:e<t?-1:0}function a(e,t,n,s,r){return l(e,t,n,s,r,0)}function i(e,t,n,s,r,a){return l(e,t,n,s,r,0,!1,a,!0)}function o(e,t,n,s,r,a){return l(e,t,n,s,r,a,!0)}function l(e,t,n,r,a,i,o=!1,l=!1,h=!1){const p=[];for(let e=0;e<t.length;e++)t[e]>a&&p.push({score:t[e],boxIndex:e,suppressBeginIndex:0});p.sort(d);const f=i>0?-.5/i:0,m=[],g=[];for(;m.length<n&&p.length>0;){const t=p.pop(),{score:n,boxIndex:i,suppressBeginIndex:o}=t;if(n<a)break;let l=!1;for(let n=m.length-1;n>=o;--n){const s=u(e,i,m[n]);if(s>=r){l=!0;break}if(t.score=t.score*c(r,f,s),t.score<=a)break}t.suppressBeginIndex=m.length,l||(t.score===n?(m.push(i),g.push(t.score)):t.score>a&&s(p,t,d))}const y=m.length,b=n-y;l&&b>0&&(m.push(...new Array(b).fill(0)),g.push(...new Array(b).fill(0)));const x={selectedIndices:m};return o&&(x.selectedScores=g),h&&(x.validOutputs=y),x}function u(e,t,n){const s=e.subarray(4*t,4*t+4),r=e.subarray(4*n,4*n+4),a=Math.min(s[0],s[2]),i=Math.min(s[1],s[3]),o=Math.max(s[0],s[2]),l=Math.max(s[1],s[3]),u=Math.min(r[0],r[2]),c=Math.min(r[1],r[3]),d=Math.max(r[0],r[2]),h=Math.max(r[1],r[3]),p=(o-a)*(l-i),f=(d-u)*(h-c);if(p<=0||f<=0)return 0;const m=Math.max(a,u),g=Math.max(i,c),y=Math.min(o,d),b=Math.min(l,h),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(p+f-x)}function c(e,t,n){const s=Math.exp(t*n*n);return n<=e?s:0}function d(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}n.d(t,{c7:()=>a,ZS:()=>i,ut:()=>o})},8570:e=>{e.exports=n;var t=null;try{t=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function n(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function s(e){return!0===(e&&e.__isLong__)}n.prototype.__isLong__,Object.defineProperty(n.prototype,"__isLong__",{value:!0}),n.isLong=s;var r={},a={};function i(e,t){var n,s,i;return t?(i=0<=(e>>>=0)&&e<256)&&(s=a[e])?s:(n=l(e,(0|e)<0?-1:0,!0),i&&(a[e]=n),n):(i=-128<=(e|=0)&&e<128)&&(s=r[e])?s:(n=l(e,e<0?-1:0,!1),i&&(r[e]=n),n)}function o(e,t){if(isNaN(e))return t?y:g;if(t){if(e<0)return y;if(e>=p)return k}else{if(e<=-f)return T;if(e+1>=f)return w}return e<0?o(-e,t).neg():l(e%h|0,e/h|0,t)}function l(e,t,s){return new n(e,t,s)}n.fromInt=i,n.fromNumber=o,n.fromBits=l;var u=Math.pow;function c(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return g;if("number"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");var s;if((s=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===s)return c(e.substring(1),t,n).neg();for(var r=o(u(n,8)),a=g,i=0;i<e.length;i+=8){var l=Math.min(8,e.length-i),d=parseInt(e.substring(i,i+l),n);if(l<8){var h=o(u(n,l));a=a.mul(h).add(o(d))}else a=(a=a.mul(r)).add(o(d))}return a.unsigned=t,a}function d(e,t){return"number"==typeof e?o(e,t):"string"==typeof e?c(e,t):l(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}n.fromString=c,n.fromValue=d;var h=4294967296,p=h*h,f=p/2,m=i(1<<24),g=i(0);n.ZERO=g;var y=i(0,!0);n.UZERO=y;var b=i(1);n.ONE=b;var x=i(1,!0);n.UONE=x;var v=i(-1);n.NEG_ONE=v;var w=l(-1,2147483647,!1);n.MAX_VALUE=w;var k=l(-1,-1,!0);n.MAX_UNSIGNED_VALUE=k;var T=l(0,-2147483648,!1);n.MIN_VALUE=T;var S=n.prototype;S.toInt=function(){return this.unsigned?this.low>>>0:this.low},S.toNumber=function(){return this.unsigned?(this.high>>>0)*h+(this.low>>>0):this.high*h+(this.low>>>0)},S.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(T)){var t=o(e),n=this.div(t),s=n.mul(t).sub(this);return n.toString(e)+s.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var r=o(u(e,6),this.unsigned),a=this,i="";;){var l=a.div(r),c=(a.sub(l.mul(r)).toInt()>>>0).toString(e);if((a=l).isZero())return c+i;for(;c.length<6;)c="0"+c;i=""+c+i}},S.getHighBits=function(){return this.high},S.getHighBitsUnsigned=function(){return this.high>>>0},S.getLowBits=function(){return this.low},S.getLowBitsUnsigned=function(){return this.low>>>0},S.getNumBitsAbs=function(){if(this.isNegative())return this.eq(T)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&!(e&1<<t);t--);return 0!=this.high?t+33:t+1},S.isZero=function(){return 0===this.high&&0===this.low},S.eqz=S.isZero,S.isNegative=function(){return!this.unsigned&&this.high<0},S.isPositive=function(){return this.unsigned||this.high>=0},S.isOdd=function(){return!(1&~this.low)},S.isEven=function(){return!(1&this.low)},S.equals=function(e){return s(e)||(e=d(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&this.high===e.high&&this.low===e.low},S.eq=S.equals,S.notEquals=function(e){return!this.eq(e)},S.neq=S.notEquals,S.ne=S.notEquals,S.lessThan=function(e){return this.comp(e)<0},S.lt=S.lessThan,S.lessThanOrEqual=function(e){return this.comp(e)<=0},S.lte=S.lessThanOrEqual,S.le=S.lessThanOrEqual,S.greaterThan=function(e){return this.comp(e)>0},S.gt=S.greaterThan,S.greaterThanOrEqual=function(e){return this.comp(e)>=0},S.gte=S.greaterThanOrEqual,S.ge=S.greaterThanOrEqual,S.compare=function(e){if(s(e)||(e=d(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},S.comp=S.compare,S.negate=function(){return!this.unsigned&&this.eq(T)?T:this.not().add(b)},S.neg=S.negate,S.add=function(e){s(e)||(e=d(e));var t=this.high>>>16,n=65535&this.high,r=this.low>>>16,a=65535&this.low,i=e.high>>>16,o=65535&e.high,u=e.low>>>16,c=0,h=0,p=0,f=0;return p+=(f+=a+(65535&e.low))>>>16,h+=(p+=r+u)>>>16,c+=(h+=n+o)>>>16,c+=t+i,l((p&=65535)<<16|(f&=65535),(c&=65535)<<16|(h&=65535),this.unsigned)},S.subtract=function(e){return s(e)||(e=d(e)),this.add(e.neg())},S.sub=S.subtract,S.multiply=function(e){if(this.isZero())return g;if(s(e)||(e=d(e)),t)return l(t.mul(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned);if(e.isZero())return g;if(this.eq(T))return e.isOdd()?T:g;if(e.eq(T))return this.isOdd()?T:g;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(m)&&e.lt(m))return o(this.toNumber()*e.toNumber(),this.unsigned);var n=this.high>>>16,r=65535&this.high,a=this.low>>>16,i=65535&this.low,u=e.high>>>16,c=65535&e.high,h=e.low>>>16,p=65535&e.low,f=0,y=0,b=0,x=0;return b+=(x+=i*p)>>>16,y+=(b+=a*p)>>>16,b&=65535,y+=(b+=i*h)>>>16,f+=(y+=r*p)>>>16,y&=65535,f+=(y+=a*h)>>>16,y&=65535,f+=(y+=i*c)>>>16,f+=n*p+r*h+a*c+i*u,l((b&=65535)<<16|(x&=65535),(f&=65535)<<16|(y&=65535),this.unsigned)},S.mul=S.multiply,S.divide=function(e){if(s(e)||(e=d(e)),e.isZero())throw Error("division by zero");var n,r,a;if(t)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?l((this.unsigned?t.div_u:t.div_s)(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?y:g;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return y;if(e.gt(this.shru(1)))return x;a=y}else{if(this.eq(T))return e.eq(b)||e.eq(v)?T:e.eq(T)?b:(n=this.shr(1).div(e).shl(1)).eq(g)?e.isNegative()?b:v:(r=this.sub(e.mul(n)),a=n.add(r.div(e)));if(e.eq(T))return this.unsigned?y:g;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();a=g}for(r=this;r.gte(e);){n=Math.max(1,Math.floor(r.toNumber()/e.toNumber()));for(var i=Math.ceil(Math.log(n)/Math.LN2),c=i<=48?1:u(2,i-48),h=o(n),p=h.mul(e);p.isNegative()||p.gt(r);)p=(h=o(n-=c,this.unsigned)).mul(e);h.isZero()&&(h=b),a=a.add(h),r=r.sub(p)}return a},S.div=S.divide,S.modulo=function(e){return s(e)||(e=d(e)),t?l((this.unsigned?t.rem_u:t.rem_s)(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},S.mod=S.modulo,S.rem=S.modulo,S.not=function(){return l(~this.low,~this.high,this.unsigned)},S.and=function(e){return s(e)||(e=d(e)),l(this.low&e.low,this.high&e.high,this.unsigned)},S.or=function(e){return s(e)||(e=d(e)),l(this.low|e.low,this.high|e.high,this.unsigned)},S.xor=function(e){return s(e)||(e=d(e)),l(this.low^e.low,this.high^e.high,this.unsigned)},S.shiftLeft=function(e){return s(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?l(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):l(0,this.low<<e-32,this.unsigned)},S.shl=S.shiftLeft,S.shiftRight=function(e){return s(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?l(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):l(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},S.shr=S.shiftRight,S.shiftRightUnsigned=function(e){if(s(e)&&(e=e.toInt()),0==(e&=63))return this;var t=this.high;return e<32?l(this.low>>>e|t<<32-e,t>>>e,this.unsigned):l(32===e?t:t>>>e-32,0,this.unsigned)},S.shru=S.shiftRightUnsigned,S.shr_u=S.shiftRightUnsigned,S.toSigned=function(){return this.unsigned?l(this.low,this.high,!1):this},S.toUnsigned=function(){return this.unsigned?this:l(this.low,this.high,!0)},S.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},S.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},S.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},n.fromBytes=function(e,t,s){return s?n.fromBytesLE(e,t):n.fromBytesBE(e,t)},n.fromBytesLE=function(e,t){return new n(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},n.fromBytesBE=function(e,t){return new n(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)}},8576:(e,t,n)=>{"use strict";n.d(t,{X:()=>r,j:()=>s});const s=1.7580993408473768,r=1.0507009873554805},8590:()=>{},8631:(e,t,n)=>{"use strict";n.d(t,{o:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({exp_:function(e){const t={x:(0,a.YT)(e,"x","exp")};return s.T2.runKernel(r.ox3,t)}})},8646:(e,t,n)=>{"use strict";n.d(t,{Do:()=>m,XB:()=>f,f2:()=>g,zE:()=>y});var s=n(2198),r=n(3416),a=n(6919),i=n(9258),o=n(4394),l=n(112),u=n(3732),c=n(2302),d=n(8968),h=n(700),p=n(3791);function f(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return(0,i.l)(e,(0,h.P)(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function m(e,t){let n=t;const r=s.getReductionAxes(e.shape,t.shape);return r.length>0&&(n=(0,p.c)(n,r)),(0,c.t)(n,e.shape)}function g(e,t,n,s){if("linear"===t)return e;if("relu"===t)return(0,l.V)(e);if("elu"===t)return(0,r.P)(e);if("relu6"===t)return(0,u.j)(e);if("prelu"===t)return(0,o.N)(e,n);if("leakyrelu"===t)return(0,a.H)(e,s);if("sigmoid"===t)return(0,d.r)(e);throw new Error(`Unknown fused activation ${t}.`)}const y=(e,t)=>!(e>0)||"linear"===t},8710:(e,t,n)=>{"use strict";n.d(t,{U:()=>o});var s=n(1585),r=n(5441),a=n(8189),i=n(5119);const o=(0,n(929).op)({expandDims_:function(e,t=0){const n=(0,a.YT)(e,"x","expandDims","string_or_numeric");i.vA(t<=n.rank,()=>"Axis must be <= rank of the tensor");const o={input:n},l={dim:t};return s.T2.runKernel(r.ybN,o,l)}})},8775:(e,t,n)=>{"use strict";n.d(t,{z:()=>m});var s=n(5119),r=n(7148),a=n(5030),i=n(5040),o=n(929),l=n(1902),u=n(2302),c=n(7986),d=n(6512),h=n(2855),p=n(5537),f=n(1361);const m=(0,o.op)({rfft_:function(e,t){(0,s.vA)("float32"===e.dtype,()=>`The dtype for rfft() must be real value but got ${e.dtype}`);let n=e.shape[e.shape.length-1];const o=e.size/n;let m;if(null!=t&&t<n){const s=e.shape.map(e=>0),r=e.shape.map(e=>e);r[e.shape.length-1]=t,m=(0,c.d)(e,s,r),n=t}else if(null!=t&&t>n){const s=e.shape.map(e=>e);s[e.shape.length-1]=t-n,m=(0,a.x)([e,(0,h.U)(s)],e.shape.length-1),n=t}else m=e;const g=(0,p.P)(m),y=(0,u.t)((0,r.f)(m,g),[o,n]),b=(0,f.h)(y),x=Math.floor(n/2)+1,v=(0,l.x)(b),w=(0,i.n)(b),k=(0,d.l)(v,[x,n-x],v.shape.length-1),T=(0,d.l)(w,[x,n-x],w.shape.length-1),S=m.shape.slice();return S[m.shape.length-1]=x,(0,u.t)((0,r.f)(k[0],T[0]),S)}})},8794:(e,t,n)=>{"use strict";n.d(t,{X:()=>c});var s=n(1585),r=n(5441),a=n(8189),i=n(5119),o=n(7195),l=n(929),u=n(2302);const c=(0,l.op)({conv2d_:function(e,t,n,l,c="NHWC",d=[1,1],h){const p=(0,a.YT)(e,"x","conv2d","float32"),f=(0,a.YT)(t,"filter","conv2d","float32");let m=p,g=!1;3===p.rank&&(g=!0,m=(0,u.t)(p,[1,p.shape[0],p.shape[1],p.shape[2]])),i.vA(4===m.rank,()=>`Error in conv2d: input must be rank 4, but got rank ${m.rank}.`),i.vA(4===f.rank,()=>`Error in conv2d: filter must be rank 4, but got rank ${f.rank}.`),o.s_("conv2d",l,h);const y="NHWC"===c?m.shape[3]:m.shape[1];i.vA(y===f.shape[2],()=>`Error in conv2d: depth of input (${y}) must match input depth for filter ${f.shape[2]}.`),i.vA(o.G0(n,d),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${d}'`),i.vA(o.qk(d),()=>"Error in conv2D: Dilated rates should be larger than 0."),i.vA(o.qk(n),()=>"Error in conv2D: Strides should be larger than 0.");const b={x:m,filter:f},x={strides:n,pad:l,dataFormat:c,dilations:d,dimRoundingMode:h},v=s.T2.runKernel(r.p2J,b,x);return g?(0,u.t)(v,[v.shape[1],v.shape[2],v.shape[3]]):v}})},8968:(e,t,n)=>{"use strict";n.d(t,{r:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({sigmoid_:function(e){const t={x:(0,a.YT)(e,"x","sigmoid","float32")};return s.T2.runKernel(r.vI1,t)}})},8990:(e,t,n)=>{"use strict";n.d(t,{n:()=>o});var s=n(1585),r=n(5441),a=n(565),i=n(8189);const o=(0,n(929).op)({pow_:function(e,t){let n=(0,i.YT)(e,"base","pow"),o=(0,i.YT)(t,"exp","pow");[n,o]=(0,a.makeTypesMatch)(n,o);const l={a:n,b:o};return s.T2.runKernel(r.pyJ,l)}})},8991:(e,t,n)=>{"use strict";n.d(t,{w:()=>o});var s=n(1585),r=n(5441),a=n(565),i=n(8189);const o=(0,n(929).op)({floorDiv_:function(e,t){let n=(0,i.YT)(e,"a","floorDiv"),o=(0,i.YT)(t,"b","floorDiv");[n,o]=(0,a.makeTypesMatch)(n,o);const l={a:n,b:o};return s.T2.runKernel(r.ElG,l)}})},9067:function(e,t,n){var s;!function(e,r){function a(e){var t=this;t.next=function(){var e,n,s=t.x,r=t.i;return e=s[r],n=(e^=e>>>7)^e<<24,n^=(e=s[r+1&7])^e>>>10,n^=(e=s[r+3&7])^e>>>3,n^=(e=s[r+4&7])^e<<7,e=s[r+7&7],n^=(e^=e<<13)^e<<9,s[r]=n,t.i=r+1&7,n},function(e,t){var n,s=[];if(t===(0|t))s[0]=t;else for(t=""+t,n=0;n<t.length;++n)s[7&n]=s[7&n]<<15^t.charCodeAt(n)+s[n+1&7]<<13;for(;s.length<8;)s.push(0);for(n=0;n<8&&0===s[n];++n);for(8==n?s[7]=-1:s[n],e.x=s,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function i(e,t){return t.x=e.x.slice(),t.i=e.i,t}function o(e,t){null==e&&(e=+new Date);var n=new a(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&(s.x&&i(s,n),r.state=function(){return i(n,{})}),r}r&&r.exports?r.exports=o:n.amdD&&n.amdO?void 0===(s=function(){return o}.call(t,n,t,r))||(r.exports=s):this.xorshift7=o}(0,e=n.nmd(e),n.amdD)},9160:(e,t,n)=>{"use strict";n.d(t,{$:()=>l});var s=n(1585),r=n(5441),a=n(8189),i=n(5119),o=n(2302);const l=(0,n(929).op)({batchNorm_:function(e,t,n,l,u,c){null==c&&(c=.001);const d=(0,a.YT)(e,"x","batchNorm"),h=(0,a.YT)(t,"mean","batchNorm"),p=(0,a.YT)(n,"variance","batchNorm");let f,m;null!=u&&(f=(0,a.YT)(u,"scale","batchNorm")),null!=l&&(m=(0,a.YT)(l,"offset","batchNorm")),i.vA(h.rank===p.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),i.vA(null==m||h.rank===m.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),i.vA(null==f||h.rank===f.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");const g={x:function(e){let t;return t=0===e.rank||1===e.rank?(0,o.t)(e,[1,1,1,e.size]):2===e.rank?(0,o.t)(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?(0,o.t)(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(d),scale:f,offset:m,mean:h,variance:p},y={varianceEpsilon:c},b=s.T2.runKernel(r.i5R,g,y);return(0,o.t)(b,d.shape)}})},9171:(e,t,n)=>{"use strict";n.d(t,{Q:()=>o});var s=n(1585),r=n(2046),a=n(5119),i=n(3879);function o(e,t,n,o){if(null==o)o=(0,a.X$)(e);else if("complex64"===o)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if((0,r.Nw)(e)||(0,r.Oj)(e)){if("float32"!==o&&"int32"!==o)throw new Error(`Creating tensor from GPU data only supports 'float32'|'int32' dtype, while the dtype is ${o}.`);return s.T2.backend.createTensorFromGPUData(e,t||n,o)}if(!(0,i.isTypedArray)(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){(0,a.SA)(t);const e=(0,a.Ze)(t),s=(0,a.Ze)(n);(0,a.vA)(e===s,()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${s}`);for(let e=0;e<n.length;++e){const s=n[e],r=e!==n.length-1||s!==(0,a.Ze)(t.slice(e));(0,a.vA)(n[e]===t[e]||!r,()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `)}}return(0,i.isTypedArray)(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==o?(0,i.toTypedArray)(e,o):(0,i.flatten)(e,[],!0),s.T2.makeTensor(e,t,o)}},9258:(e,t,n)=>{"use strict";n.d(t,{l:()=>o});var s=n(1585),r=n(5441),a=n(565),i=n(8189);const o=(0,n(929).op)({mul_:function(e,t){let n=(0,i.YT)(e,"a","mul"),o=(0,i.YT)(t,"b","mul");[n,o]=(0,a.makeTypesMatch)(n,o);const l={a:n,b:o};return s.T2.runKernel(r.xu7,l)}})},9326:(e,t,n)=>{"use strict";n.d(t,{b:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({any_:function(e,t=null,n=!1){const i={x:(0,a.YT)(e,"x","any","bool")},o={axis:t,keepDims:n};return s.T2.runKernel(r.FSt,i,o)}})},9348:(e,t,n)=>{"use strict";n.d(t,{R:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({sqrt_:function(e){const t={x:(0,a.YT)(e,"x","sqrt","float32")};return s.T2.runKernel(r.dFH,t)}})},9359:(e,t,n)=>{"use strict";n.d(t,{y:()=>l});var s=n(1585),r=n(5441),a=n(565),i=n(8189),o=n(8991);const l=(0,n(929).op)({div_:function(e,t){let n=(0,i.YT)(e,"a","div"),l=(0,i.YT)(t,"b","div");if([n,l]=(0,a.makeTypesMatch)(n,l),"int32"===n.dtype&&"int32"===l.dtype)return(0,o.w)(n,l);const u={a:n,b:l};return s.T2.runKernel(r.sDr,u,{})}})},9580:(e,t,n)=>{"use strict";n.d(t,{r:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({atan_:function(e){const t={x:(0,a.YT)(e,"x","atan")};return s.T2.runKernel(r.TyE,t)}})},9759:(e,t,n)=>{"use strict";n.d(t,{O:()=>l});var s=n(8189),r=n(5119),a=n(5703),i=n(929),o=n(2302);const l=(0,i.op)({dot_:function(e,t){const n=(0,s.YT)(e,"t1","dot"),i=(0,s.YT)(t,"t2","dot");r.vA(!(1!==n.rank&&2!==n.rank||1!==i.rank&&2!==i.rank),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${i.rank}.`);const l=1===n.rank?n.size:n.shape[1],u=1===i.rank?i.size:i.shape[0];if(r.vA(l===u,()=>`Error in dot: inner dimensions of inputs must match, but got ${l} and ${u}.`),1===n.rank&&1===i.rank){const e=(0,o.t)(n,[1,-1]),t=(0,o.t)(i,[-1,1]),s=(0,a.N)(e,t);return(0,o.t)(s,[])}if(1===n.rank&&2===i.rank){const e=(0,o.t)(n,[1,-1]),t=(0,o.t)(i,[i.shape[0],i.shape[1]]),s=(0,a.N)(e,t);return(0,o.t)(s,[s.size])}if(2===n.rank&&1===i.rank){const e=(0,o.t)(i,[-1,1]),t=(0,a.N)(n,e);return(0,o.t)(t,[t.size])}{const e=(0,o.t)(i,[i.shape[0],i.shape[1]]);return(0,a.N)(n,e)}}})},9772:(e,t,n)=>{"use strict";n.d(t,{G:()=>o});var s=n(1585),r=n(5441),a=n(8189),i=n(5119);const o=(0,n(929).op)({batchToSpaceND_:function(e,t,n){const o=(0,a.YT)(e,"x","batchToSpaceND"),l=t.reduce((e,t)=>e*t);i.vA(o.rank>=1+t.length,()=>`input rank is ${o.rank} but should be > than blockShape.length ${t.length}`),i.vA(n.length===t.length,()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`),i.vA(o.shape[0]%l===0,()=>`input tensor batch is ${o.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${l}`);const u={x:o},c={blockShape:t,crops:n};return s.T2.runKernel(r.Ik2,u,c)}})},9809:(e,t,n)=>{"use strict";n.d(t,{w:()=>o});var s=n(1585),r=n(5441),a=n(8189),i=n(5119);const o=(0,n(929).op)({cast_:function(e,t){const n=(0,a.YT)(e,"x","cast");if(!i.xn(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const o={x:n},l={dtype:t};return s.T2.runKernel(r.KXH,o,l)}})},9870:(e,t,n)=>{"use strict";n.d(t,{V:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({reciprocal_:function(e){const t={x:(0,a.YT)(e,"x","reciprocal")};return s.T2.runKernel(r.huO,t)}})},9879:(e,t,n)=>{"use strict";n.d(t,{z:()=>o});var s=n(1585),r=n(5441),a=n(8189),i=n(2198);const o=(0,n(929).op)({logicalOr_:function(e,t){const n=(0,a.YT)(e,"a","logicalOr","bool"),o=(0,a.YT)(t,"b","logicalOr","bool");(0,i.assertAndGetBroadcastShape)(n.shape,o.shape);const l={a:n,b:o};return s.T2.runKernel(r.LXA,l)}})},9881:(e,t,n)=>{"use strict";n.d(t,{N:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({logicalNot_:function(e){const t={x:(0,a.YT)(e,"x","logicalNot","bool")};return s.T2.runKernel(r.nZd,t)}})},9885:(e,t,n)=>{"use strict";n.d(t,{P:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({onesLike_:function(e){const t={x:(0,a.YT)(e,"x","onesLike")};return s.T2.runKernel(r.LWX,t)}})},9907:(e,t,n)=>{"use strict";n.d(t,{g:()=>i});var s=n(1585),r=n(5441),a=n(8189);const i=(0,n(929).op)({cos_:function(e){const t={x:(0,a.YT)(e,"x","cos","float32")};return s.T2.runKernel(r.Mn0,t)}})},9925:(e,t,n)=>{"use strict";n.d(t,{r:()=>l});var s=n(8189),r=n(2198),a=n(3789),i=n(9881),o=n(9879);const l=(0,n(929).op)({logicalXor_:function(e,t){const n=(0,s.YT)(e,"a","logicalXor","bool"),l=(0,s.YT)(t,"b","logicalXor","bool");return(0,r.assertAndGetBroadcastShape)(n.shape,l.shape),(0,a.n)((0,o.z)(e,t),(0,i.N)((0,a.n)(e,t)))}})},9986:(e,t,n)=>{"use strict";n.d(t,{w:()=>u});var s=n(8189),r=n(5119),a=n(8794),i=n(676),o=n(929),l=n(2302);const u=(0,o.op)({separableConv2d_:function(e,t,n,o,u,c=[1,1],d="NHWC"){const h=(0,s.YT)(e,"x","separableConv2d"),p=(0,s.YT)(t,"depthwiseFilter","separableConv2d"),f=(0,s.YT)(n,"pointwiseFilter","separableConv2d");let m=h,g=!1;if(3===h.rank&&(g=!0,m=(0,l.t)(h,[1,h.shape[0],h.shape[1],h.shape[2]])),"NCHW"===d)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");r.vA(4===m.rank,()=>`Error in separableConv2d: input must be rank 4, but got rank ${m.rank}.`),r.vA(4===p.rank,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${p.rank}.`),r.vA(4===f.rank,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${p.rank}.`),r.vA(1===f.shape[0],()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${f.shape[0]}.`),r.vA(1===f.shape[1],()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${f.shape[1]}.`);const y=p.shape[2],b=p.shape[3];r.vA(f.shape[2]===y*b,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${y*b}, but got ${f.shape[2]}.`);const x=(0,i.G)(m,p,o,u,d,c),v=(0,a.X)(x,f,1,"valid",d);return g?(0,l.t)(v,[v.shape[1],v.shape[2],v.shape[3]]):v}})}},t={};function n(s){var r=t[s];if(void 0!==r)return r.exports;var a=t[s]={id:s,loaded:!1,exports:{}};return e[s].call(a.exports,a,a.exports,n),a.loaded=!0,a.exports}n.amdD=function(){throw new Error("define cannot be used indirect")},n.amdO={},n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var s in t)n.o(t,s)&&!n.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{"use strict";var e={};n.r(e),n.d(e,{maxNorm:()=>gi,minMaxNorm:()=>xi,nonNeg:()=>bi,unitNorm:()=>yi});var t={};n.r(t),n.d(t,{constant:()=>ki,glorotNormal:()=>Ei,glorotUniform:()=>Ai,heNormal:()=>$i,heUniform:()=>Ri,identity:()=>Ii,leCunNormal:()=>_i,leCunUniform:()=>Di,ones:()=>wi,orthogonal:()=>Fi,randomNormal:()=>Si,randomUniform:()=>Ti,truncatedNormal:()=>Ni,varianceScaling:()=>Ci,zeros:()=>vi});var s={};n.r(s),n.d(s,{Layer:()=>Ka,RNN:()=>Kl,RNNCell:()=>Xl,activation:()=>Cc,add:()=>Mc,alphaDropout:()=>Id,average:()=>zc,averagePooling1d:()=>jc,averagePooling2d:()=>Kc,averagePooling3d:()=>Qc,avgPool1d:()=>qc,avgPool2d:()=>Xc,avgPool3d:()=>Jc,avgPooling1d:()=>Yc,avgPooling2d:()=>Zc,avgPooling3d:()=>ed,batchNormalization:()=>Uc,bidirectional:()=>bd,categoryEncoding:()=>Rd,centerCrop:()=>Ed,concatenate:()=>Lc,conv1d:()=>bc,conv2d:()=>xc,conv2dTranspose:()=>vc,conv3d:()=>wc,conv3dTranspose:()=>kc,convLstm2d:()=>fd,convLstm2dCell:()=>md,cropping2D:()=>Sc,dense:()=>Ac,depthwiseConv2d:()=>Ic,dot:()=>Vc,dropout:()=>Ec,elu:()=>hc,embedding:()=>Oc,flatten:()=>Rc,gaussianDropout:()=>Nd,gaussianNoise:()=>Sd,globalAveragePooling1d:()=>td,globalAveragePooling2d:()=>nd,globalMaxPool1d:()=>vd,globalMaxPool2d:()=>wd,globalMaxPooling1d:()=>sd,globalMaxPooling2d:()=>rd,gru:()=>ld,gruCell:()=>ud,input:()=>Yo,inputLayer:()=>dc,layerNormalization:()=>Gc,leakyReLU:()=>fc,lstm:()=>cd,lstmCell:()=>dd,masking:()=>Cd,maxPool1d:()=>kd,maxPool2d:()=>Td,maxPooling1d:()=>ad,maxPooling2d:()=>id,maxPooling3d:()=>od,maximum:()=>Pc,minimum:()=>Bc,multiply:()=>Wc,permute:()=>Fc,prelu:()=>mc,randomWidth:()=>_d,reLU:()=>pc,repeatVector:()=>_c,rescaling:()=>Ad,reshape:()=>Dc,resizing:()=>$d,rnn:()=>gd,separableConv2d:()=>Tc,simpleRNN:()=>hd,simpleRNNCell:()=>pd,softmax:()=>gc,spatialDropout1d:()=>$c,stackedRNNCells:()=>yd,thresholdedReLU:()=>yc,timeDistributed:()=>xd,upSampling2d:()=>Nc,zeroPadding2d:()=>Hc});var r={};n.r(r),n.d(r,{MAPE:()=>Ud,MSE:()=>jd,binaryAccuracy:()=>Dd,binaryCrossentropy:()=>Fd,categoricalAccuracy:()=>Md,categoricalCrossentropy:()=>zd,cosineProximity:()=>Bd,mape:()=>Gd,meanAbsoluteError:()=>Wd,meanAbsolutePercentageError:()=>Vd,meanSquaredError:()=>Hd,mse:()=>qd,precision:()=>Ld,r2Score:()=>Yd,recall:()=>Pd,sparseCategoricalAccuracy:()=>Od});var a={};n.r(a),n.d(a,{modelFromJSON:()=>Uo});var i={};n.r(i),n.d(i,{l1:()=>Xd,l1l2:()=>Kd,l2:()=>Zd});var o={};n.r(o),n.d(o,{CSVDataset:()=>jh,Dataset:()=>Fh,FileDataSource:()=>rp,TextLineDataset:()=>Ph,URLDataSource:()=>ap,array:()=>Mh,csv:()=>ip,func:()=>op,generator:()=>lp,microphone:()=>cp,version_data:()=>dp,webcam:()=>up,zip:()=>zh});var l={};n.r(l),n.d(l,{addImpl:()=>$p,bincountImpl:()=>Fp,bincountReduceImpl:()=>Op,bitwiseAndImpl:()=>Mp,castImpl:()=>Np,ceilImpl:()=>Vp,concatImpl:()=>Hp,equalImpl:()=>jp,expImpl:()=>Kp,expm1Impl:()=>Qp,floorDivImpl:()=>rf,floorImpl:()=>tf,gatherNdImpl:()=>lf,gatherV2Impl:()=>uf,greaterEqualImpl:()=>pf,greaterImpl:()=>cf,lessEqualImpl:()=>xf,lessImpl:()=>gf,linSpaceImpl:()=>kf,logImpl:()=>Tf,maxImpl:()=>If,maximumImpl:()=>Cf,minimumImpl:()=>$f,multiplyImpl:()=>Df,negImpl:()=>zf,notEqualImpl:()=>Pf,prodImpl:()=>Hf,raggedGatherImpl:()=>Yf,raggedRangeImpl:()=>Xf,raggedTensorToTensorImpl:()=>tm,rangeImpl:()=>nm,rsqrtImpl:()=>sm,scatterImpl:()=>im,sigmoidImpl:()=>om,simpleAbsImpl:()=>mp,sliceImpl:()=>cm,sparseFillEmptyRowsImpl:()=>pm,sparseReshapeImpl:()=>fm,sparseSegmentReductionImpl:()=>mm,sqrtImpl:()=>gm,squaredDifferenceImpl:()=>xm,staticRegexReplaceImpl:()=>km,stridedSliceImpl:()=>Nm,stringNGramsImpl:()=>Cm,stringSplitImpl:()=>Em,stringToHashBucketFastImpl:()=>$m,subImpl:()=>Rm,tileImpl:()=>Om,topKImpl:()=>Lm,transposeImpl:()=>Vf,uniqueImpl:()=>Pm});var u={};n.r(u),n.d(u,{assertNotComplex:()=>tw,bindCanvasToFramebuffer:()=>Ev,bindColorTextureToFramebuffer:()=>$v,bindTextureToProgramUniformSampler:()=>Av,bindTextureUnit:()=>Sv,bindVertexBufferToProgramAttribute:()=>Tv,callAndCheck:()=>rv,canBeRepresented:()=>ov,createFragmentShader:()=>dv,createFramebuffer:()=>kv,createProgram:()=>fv,createStaticIndexBuffer:()=>bv,createStaticVertexBuffer:()=>yv,createTexture:()=>vv,createVertexShader:()=>cv,getBatchDim:()=>Mv,getExtensionOrThrow:()=>uv,getFramebufferErrorMessage:()=>Dv,getMaxTexturesInShader:()=>qv,getNumChannels:()=>xv,getProgramUniformLocation:()=>Cv,getProgramUniformLocationOrThrow:()=>Iv,getRowsCols:()=>zv,getShapeAs3D:()=>Lv,getTextureShapeFromLogicalShape:()=>Pv,getWebGLDisjointQueryTimerVersion:()=>Yv,getWebGLErrorMessage:()=>lv,getWebGLMaxTextureSize:()=>Gv,hasExtension:()=>Kv,isCapableOfRenderingToFloatTexture:()=>Zv,isDownloadFloatTextureEnabled:()=>Qv,isReshapeFree:()=>Wv,isWebGLFenceEnabled:()=>ew,isWebGLVersionEnabled:()=>Xv,linkProgram:()=>mv,logShaderSourceAndInfoLog:()=>pv,resetMaxTextureSize:()=>Hv,resetMaxTexturesInShader:()=>jv,unbindColorTextureFromFramebuffer:()=>Rv,unbindTextureUnit:()=>Nv,validateFramebuffer:()=>_v,validateProgram:()=>gv,validateTextureSize:()=>wv});var c={};n.r(c),n.d(c,{bindVertexProgramAttributeStreams:()=>jw,createBufferFromOutputTexture:()=>Kw,createFloat16MatrixTexture:()=>Pw,createFloat16PackedMatrixTexture:()=>Hw,createFloat32MatrixTexture:()=>zw,createIndexBuffer:()=>Fw,createPackedMatrixTexture:()=>Uw,createUnsignedBytesMatrixTexture:()=>Ww,createVertexBuffer:()=>Dw,createVertexShader:()=>_w,downloadByteEncodedFloatMatrixFromOutputTexture:()=>Zw,downloadFloat32MatrixFromBuffer:()=>Xw,downloadMatrixFromPackedOutputTexture:()=>Jw,downloadPackedMatrixFromBuffer:()=>Qw,getInternalFormatForFloat16MatrixTexture:()=>Lw,getInternalFormatForFloat16PackedMatrixTexture:()=>Gw,getInternalFormatForFloat32MatrixTexture:()=>Mw,getInternalFormatForPackedMatrixTexture:()=>Vw,getInternalFormatForUnsignedBytesMatrixTexture:()=>Bw,uploadDenseMatrixToTexture:()=>qw,uploadPixelDataToTexture:()=>Yw});var d={};n.r(d),n.d(d,{Abs:()=>h.Abs,Acos:()=>h.Acos,Acosh:()=>h.Acosh,AdadeltaOptimizer:()=>h.AdadeltaOptimizer,AdagradOptimizer:()=>h.AdagradOptimizer,AdamOptimizer:()=>h.AdamOptimizer,AdamaxOptimizer:()=>h.AdamaxOptimizer,Add:()=>h.Add,AddN:()=>h.AddN,All:()=>h.All,Any:()=>h.Any,ArgMax:()=>h.ArgMax,ArgMin:()=>h.ArgMin,Asin:()=>h.Asin,Asinh:()=>h.Asinh,Atan:()=>h.Atan,Atan2:()=>h.Atan2,Atanh:()=>h.Atanh,AvgPool:()=>h.AvgPool,AvgPool3D:()=>h.AvgPool3D,AvgPool3DGrad:()=>h.AvgPool3DGrad,AvgPoolGrad:()=>h.AvgPoolGrad,BatchMatMul:()=>h.BatchMatMul,BatchToSpaceND:()=>h.BatchToSpaceND,Bincount:()=>h.Bincount,BitwiseAnd:()=>h.BitwiseAnd,BroadcastArgs:()=>h.BroadcastArgs,BroadcastTo:()=>h.BroadcastTo,Callback:()=>Qd,CallbackList:()=>Pi,Cast:()=>h.Cast,Ceil:()=>h.Ceil,ClipByValue:()=>h.ClipByValue,Complex:()=>h.Complex,ComplexAbs:()=>h.ComplexAbs,Concat:()=>h.Concat,Conv2D:()=>h.Conv2D,Conv2DBackpropFilter:()=>h.Conv2DBackpropFilter,Conv2DBackpropInput:()=>h.Conv2DBackpropInput,Conv3D:()=>h.Conv3D,Conv3DBackpropFilterV2:()=>h.Conv3DBackpropFilterV2,Conv3DBackpropInputV2:()=>h.Conv3DBackpropInputV2,Cos:()=>h.Cos,Cosh:()=>h.Cosh,CropAndResize:()=>h.CropAndResize,Cumprod:()=>h.Cumprod,Cumsum:()=>h.Cumsum,CustomCallback:()=>Vi,DataStorage:()=>h.DataStorage,DenseBincount:()=>h.DenseBincount,DepthToSpace:()=>h.DepthToSpace,DepthwiseConv2dNative:()=>h.DepthwiseConv2dNative,DepthwiseConv2dNativeBackpropFilter:()=>h.DepthwiseConv2dNativeBackpropFilter,DepthwiseConv2dNativeBackpropInput:()=>h.DepthwiseConv2dNativeBackpropInput,Diag:()=>h.Diag,Dilation2D:()=>h.Dilation2D,Dilation2DBackpropFilter:()=>h.Dilation2DBackpropFilter,Dilation2DBackpropInput:()=>h.Dilation2DBackpropInput,Draw:()=>h.Draw,ENV:()=>h.ENV,EarlyStopping:()=>th,Einsum:()=>h.Einsum,Elu:()=>h.Elu,EluGrad:()=>h.EluGrad,Environment:()=>h.Environment,Equal:()=>h.Equal,Erf:()=>h.Erf,Exp:()=>h.Exp,ExpandDims:()=>h.ExpandDims,Expm1:()=>h.Expm1,FFT:()=>h.FFT,Fill:()=>h.Fill,FlipLeftRight:()=>h.FlipLeftRight,Floor:()=>h.Floor,FloorDiv:()=>h.FloorDiv,FromPixels:()=>h.FromPixels,FusedBatchNorm:()=>h.FusedBatchNorm,FusedConv2D:()=>h.FusedConv2D,FusedDepthwiseConv2D:()=>h.FusedDepthwiseConv2D,GPGPUContext:()=>ek,GatherNd:()=>h.GatherNd,GatherV2:()=>h.GatherV2,GraphModel:()=>rh.GraphModel,Greater:()=>h.Greater,GreaterEqual:()=>h.GreaterEqual,History:()=>Wi,IFFT:()=>h.IFFT,Identity:()=>h.Identity,Imag:()=>h.Imag,InputSpec:()=>Ga,IsFinite:()=>h.IsFinite,IsInf:()=>h.IsInf,IsNan:()=>h.IsNan,KernelBackend:()=>h.KernelBackend,LRN:()=>h.LRN,LRNGrad:()=>h.LRNGrad,LayerVariable:()=>Wa,LayersModel:()=>Wo,LeakyRelu:()=>h.LeakyRelu,Less:()=>h.Less,LessEqual:()=>h.LessEqual,LinSpace:()=>h.LinSpace,Log:()=>h.Log,Log1p:()=>h.Log1p,LogSoftmax:()=>h.LogSoftmax,LogicalAnd:()=>h.LogicalAnd,LogicalNot:()=>h.LogicalNot,LogicalOr:()=>h.LogicalOr,LogicalXor:()=>h.LogicalXor,LowerBound:()=>h.LowerBound,MathBackendCPU:()=>fp,MathBackendWebGL:()=>mT,MatrixBandPart:()=>h.MatrixBandPart,Max:()=>h.Max,MaxPool:()=>h.MaxPool,MaxPool3D:()=>h.MaxPool3D,MaxPool3DGrad:()=>h.MaxPool3DGrad,MaxPoolGrad:()=>h.MaxPoolGrad,MaxPoolWithArgmax:()=>h.MaxPoolWithArgmax,Maximum:()=>h.Maximum,Mean:()=>h.Mean,Min:()=>h.Min,Minimum:()=>h.Minimum,MirrorPad:()=>h.MirrorPad,Mod:()=>h.Mod,MomentumOptimizer:()=>h.MomentumOptimizer,Multinomial:()=>h.Multinomial,Multiply:()=>h.Multiply,Neg:()=>h.Neg,NonMaxSuppressionV3:()=>h.NonMaxSuppressionV3,NonMaxSuppressionV4:()=>h.NonMaxSuppressionV4,NonMaxSuppressionV5:()=>h.NonMaxSuppressionV5,NotEqual:()=>h.NotEqual,OP_SCOPE_SUFFIX:()=>h.OP_SCOPE_SUFFIX,OneHot:()=>h.OneHot,OnesLike:()=>h.OnesLike,Optimizer:()=>h.Optimizer,OptimizerConstructors:()=>h.OptimizerConstructors,Pack:()=>h.Pack,PadV2:()=>h.PadV2,Pool:()=>h.Pool,Pow:()=>h.Pow,Prelu:()=>h.Prelu,Prod:()=>h.Prod,RMSPropOptimizer:()=>h.RMSPropOptimizer,RNN:()=>Kl,RaggedGather:()=>h.RaggedGather,RaggedRange:()=>h.RaggedRange,RaggedTensorToTensor:()=>h.RaggedTensorToTensor,Range:()=>h.Range,Rank:()=>h.Rank,Real:()=>h.Real,RealDiv:()=>h.RealDiv,Reciprocal:()=>h.Reciprocal,Reduction:()=>h.Reduction,Relu:()=>h.Relu,Relu6:()=>h.Relu6,Reshape:()=>h.Reshape,ResizeBilinear:()=>h.ResizeBilinear,ResizeBilinearGrad:()=>h.ResizeBilinearGrad,ResizeNearestNeighbor:()=>h.ResizeNearestNeighbor,ResizeNearestNeighborGrad:()=>h.ResizeNearestNeighborGrad,Reverse:()=>h.Reverse,RotateWithOffset:()=>h.RotateWithOffset,Round:()=>h.Round,Rsqrt:()=>h.Rsqrt,SGDOptimizer:()=>h.SGDOptimizer,ScatterNd:()=>h.ScatterNd,SearchSorted:()=>h.SearchSorted,Select:()=>h.Select,Selu:()=>h.Selu,Sequential:()=>Ho,Sigmoid:()=>h.Sigmoid,Sign:()=>h.Sign,Sin:()=>h.Sin,Sinh:()=>h.Sinh,Slice:()=>h.Slice,Softmax:()=>h.Softmax,Softplus:()=>h.Softplus,SpaceToBatchND:()=>h.SpaceToBatchND,SparseFillEmptyRows:()=>h.SparseFillEmptyRows,SparseReshape:()=>h.SparseReshape,SparseSegmentMean:()=>h.SparseSegmentMean,SparseSegmentSum:()=>h.SparseSegmentSum,SparseToDense:()=>h.SparseToDense,SplitV:()=>h.SplitV,Sqrt:()=>h.Sqrt,Square:()=>h.Square,SquaredDifference:()=>h.SquaredDifference,StaticRegexReplace:()=>h.StaticRegexReplace,Step:()=>h.Step,StridedSlice:()=>h.StridedSlice,StringNGrams:()=>h.StringNGrams,StringSplit:()=>h.StringSplit,StringToHashBucketFast:()=>h.StringToHashBucketFast,Sub:()=>h.Sub,Sum:()=>h.Sum,SymbolicTensor:()=>Ha,Tan:()=>h.Tan,Tanh:()=>h.Tanh,Tensor:()=>h.Tensor,TensorBuffer:()=>h.TensorBuffer,TensorScatterUpdate:()=>h.TensorScatterUpdate,Tile:()=>h.Tile,TopK:()=>h.TopK,Transform:()=>h.Transform,Transpose:()=>h.Transpose,Unique:()=>h.Unique,Unpack:()=>h.Unpack,UnsortedSegmentSum:()=>h.UnsortedSegmentSum,UpperBound:()=>h.UpperBound,Variable:()=>h.Variable,ZerosLike:()=>h.ZerosLike,_FusedMatMul:()=>h._FusedMatMul,abs:()=>h.abs,acos:()=>h.acos,acosh:()=>h.acosh,add:()=>h.add,addN:()=>h.addN,all:()=>h.all,any:()=>h.any,argMax:()=>h.argMax,argMin:()=>h.argMin,asin:()=>h.asin,asinh:()=>h.asinh,atan:()=>h.atan,atan2:()=>h.atan2,atanh:()=>h.atanh,avgPool:()=>h.avgPool,avgPool3d:()=>h.avgPool3d,backend:()=>h.backend,backend_util:()=>h.backend_util,basicLSTMCell:()=>h.basicLSTMCell,batchNorm:()=>h.batchNorm,batchNorm2d:()=>h.batchNorm2d,batchNorm3d:()=>h.batchNorm3d,batchNorm4d:()=>h.batchNorm4d,batchToSpaceND:()=>h.batchToSpaceND,bincount:()=>h.bincount,bitwiseAnd:()=>h.bitwiseAnd,booleanMaskAsync:()=>h.booleanMaskAsync,broadcastArgs:()=>h.broadcastArgs,broadcastTo:()=>h.broadcastTo,broadcast_util:()=>h.broadcast_util,browser:()=>h.browser,buffer:()=>h.buffer,callbacks:()=>nh,cast:()=>h.cast,ceil:()=>h.ceil,clipByValue:()=>h.clipByValue,clone:()=>h.clone,complex:()=>h.complex,concat:()=>h.concat,concat1d:()=>h.concat1d,concat2d:()=>h.concat2d,concat3d:()=>h.concat3d,concat4d:()=>h.concat4d,constraints:()=>e,conv1d:()=>h.conv1d,conv2d:()=>h.conv2d,conv2dTranspose:()=>h.conv2dTranspose,conv3d:()=>h.conv3d,conv3dTranspose:()=>h.conv3dTranspose,copyRegisteredKernels:()=>h.copyRegisteredKernels,cos:()=>h.cos,cosh:()=>h.cosh,cosineWindow:()=>h.cosineWindow,cumprod:()=>h.cumprod,cumsum:()=>h.cumsum,customGrad:()=>h.customGrad,data:()=>o,denseBincount:()=>h.denseBincount,deprecationWarn:()=>h.deprecationWarn,depthToSpace:()=>h.depthToSpace,depthwiseConv2d:()=>h.depthwiseConv2d,deregisterOp:()=>rh.deregisterOp,device_util:()=>h.device_util,diag:()=>h.diag,dilation2d:()=>h.dilation2d,disableDeprecationWarnings:()=>h.disableDeprecationWarnings,dispose:()=>h.dispose,disposeVariables:()=>h.disposeVariables,div:()=>h.div,divNoNan:()=>h.divNoNan,dot:()=>h.dot,dropout:()=>h.dropout,einsum:()=>h.einsum,elu:()=>h.elu,enableDebugMode:()=>h.enableDebugMode,enableProdMode:()=>h.enableProdMode,enclosingPowerOfTwo:()=>h.enclosingPowerOfTwo,engine:()=>h.engine,ensureShape:()=>h.ensureShape,env:()=>h.env,equal:()=>h.equal,erf:()=>h.erf,euclideanNorm:()=>h.euclideanNorm,exp:()=>h.exp,expandDims:()=>h.expandDims,expm1:()=>h.expm1,eye:()=>h.eye,fft:()=>h.fft,fill:()=>h.fill,findBackend:()=>h.findBackend,findBackendFactory:()=>h.findBackendFactory,floor:()=>h.floor,floorDiv:()=>h.floorDiv,forceHalfFloat:()=>yT,fused:()=>h.fused,gather:()=>h.gather,gatherND:()=>h.gatherND,gather_util:()=>h.gather_util,getBackend:()=>h.getBackend,getGradient:()=>h.getGradient,getKernel:()=>h.getKernel,getKernelsForBackend:()=>h.getKernelsForBackend,gpgpu_util:()=>c,grad:()=>h.grad,grads:()=>h.grads,greater:()=>h.greater,greaterEqual:()=>h.greaterEqual,ifft:()=>h.ifft,imag:()=>h.imag,image:()=>h.image,inTopKAsync:()=>h.inTopKAsync,initializers:()=>t,input:()=>Yo,io:()=>h.io,irfft:()=>h.irfft,isFinite:()=>h.isFinite,isInf:()=>h.isInf,isNaN:()=>h.isNaN,keep:()=>h.keep,kernel_impls:()=>h.kernel_impls,layers:()=>s,leakyRelu:()=>h.leakyRelu,less:()=>h.less,lessEqual:()=>h.lessEqual,linalg:()=>h.linalg,linspace:()=>h.linspace,loadGraphModel:()=>rh.loadGraphModel,loadGraphModelSync:()=>rh.loadGraphModelSync,loadLayersModel:()=>Go,localResponseNormalization:()=>h.localResponseNormalization,log:()=>h.log,log1p:()=>h.log1p,logSigmoid:()=>h.logSigmoid,logSoftmax:()=>h.logSoftmax,logSumExp:()=>h.logSumExp,logicalAnd:()=>h.logicalAnd,logicalNot:()=>h.logicalNot,logicalOr:()=>h.logicalOr,logicalXor:()=>h.logicalXor,losses:()=>h.losses,lowerBound:()=>h.lowerBound,matMul:()=>h.matMul,math:()=>h.math,max:()=>h.max,maxPool:()=>h.maxPool,maxPool3d:()=>h.maxPool3d,maxPoolWithArgmax:()=>h.maxPoolWithArgmax,maximum:()=>h.maximum,mean:()=>h.mean,memory:()=>h.memory,meshgrid:()=>h.meshgrid,metrics:()=>r,min:()=>h.min,minimum:()=>h.minimum,mirrorPad:()=>h.mirrorPad,mod:()=>h.mod,model:()=>jo,models:()=>a,moments:()=>h.moments,movingAverage:()=>h.movingAverage,mul:()=>h.mul,multiRNNCell:()=>h.multiRNNCell,multinomial:()=>h.multinomial,neg:()=>h.neg,nextFrame:()=>h.nextFrame,norm:()=>h.norm,notEqual:()=>h.notEqual,oneHot:()=>h.oneHot,ones:()=>h.ones,onesLike:()=>h.onesLike,op:()=>h.op,outerProduct:()=>h.outerProduct,pad:()=>h.pad,pad1d:()=>h.pad1d,pad2d:()=>h.pad2d,pad3d:()=>h.pad3d,pad4d:()=>h.pad4d,pool:()=>h.pool,pow:()=>h.pow,prelu:()=>h.prelu,print:()=>h.print,prod:()=>h.prod,profile:()=>h.profile,raggedGather:()=>h.raggedGather,raggedRange:()=>h.raggedRange,raggedTensorToTensor:()=>h.raggedTensorToTensor,rand:()=>h.rand,randomGamma:()=>h.randomGamma,randomNormal:()=>h.randomNormal,randomStandardNormal:()=>h.randomStandardNormal,randomUniform:()=>h.randomUniform,randomUniformInt:()=>h.randomUniformInt,range:()=>h.range,ready:()=>h.ready,real:()=>h.real,reciprocal:()=>h.reciprocal,registerBackend:()=>h.registerBackend,registerCallbackConstructor:()=>Ko,registerGradient:()=>h.registerGradient,registerKernel:()=>h.registerKernel,registerOp:()=>rh.registerOp,regularizers:()=>i,relu:()=>h.relu,relu6:()=>h.relu6,removeBackend:()=>h.removeBackend,reshape:()=>h.reshape,reverse:()=>h.reverse,reverse1d:()=>h.reverse1d,reverse2d:()=>h.reverse2d,reverse3d:()=>h.reverse3d,reverse4d:()=>h.reverse4d,rfft:()=>h.rfft,round:()=>h.round,rsqrt:()=>h.rsqrt,scalar:()=>h.scalar,scatterND:()=>h.scatterND,scatter_util:()=>h.scatter_util,searchSorted:()=>h.searchSorted,selu:()=>h.selu,separableConv2d:()=>h.separableConv2d,sequential:()=>qo,serialization:()=>h.serialization,setBackend:()=>h.setBackend,setPlatform:()=>h.setPlatform,setWebGLContext:()=>Kx,setdiff1dAsync:()=>h.setdiff1dAsync,shared:()=>l,sigmoid:()=>h.sigmoid,sign:()=>h.sign,signal:()=>h.signal,sin:()=>h.sin,sinh:()=>h.sinh,slice:()=>h.slice,slice1d:()=>h.slice1d,slice2d:()=>h.slice2d,slice3d:()=>h.slice3d,slice4d:()=>h.slice4d,slice_util:()=>h.slice_util,softmax:()=>h.softmax,softplus:()=>h.softplus,spaceToBatchND:()=>h.spaceToBatchND,sparse:()=>h.sparse,sparseToDense:()=>h.sparseToDense,spectral:()=>h.spectral,split:()=>h.split,sqrt:()=>h.sqrt,square:()=>h.square,squaredDifference:()=>h.squaredDifference,squeeze:()=>h.squeeze,stack:()=>h.stack,step:()=>h.step,stridedSlice:()=>h.stridedSlice,string:()=>h.string,sub:()=>h.sub,sum:()=>h.sum,sumOutType:()=>h.sumOutType,tan:()=>h.tan,tanh:()=>h.tanh,tensor:()=>h.tensor,tensor1d:()=>h.tensor1d,tensor2d:()=>h.tensor2d,tensor3d:()=>h.tensor3d,tensor4d:()=>h.tensor4d,tensor5d:()=>h.tensor5d,tensor6d:()=>h.tensor6d,tensorScatterUpdate:()=>h.tensorScatterUpdate,tensor_util:()=>h.tensor_util,test_util:()=>h.test_util,tidy:()=>h.tidy,tile:()=>h.tile,time:()=>h.time,topk:()=>h.topk,train:()=>h.train,transpose:()=>h.transpose,truncatedNormal:()=>h.truncatedNormal,unique:()=>h.unique,unregisterGradient:()=>h.unregisterGradient,unregisterKernel:()=>h.unregisterKernel,unsortedSegmentSum:()=>h.unsortedSegmentSum,unstack:()=>h.unstack,upcastType:()=>h.upcastType,upperBound:()=>h.upperBound,util:()=>h.util,valueAndGrad:()=>h.valueAndGrad,valueAndGrads:()=>h.valueAndGrads,variable:()=>h.variable,variableGrads:()=>h.variableGrads,version:()=>l$,version_converter:()=>rh.version_converter,version_core:()=>h.version_core,version_cpu:()=>Bm,version_layers:()=>To,version_webgl:()=>gT,webgl:()=>bT,webgl_util:()=>u,where:()=>h.where,whereAsync:()=>h.whereAsync,zeros:()=>h.zeros,zerosLike:()=>h.zerosLike});var h=n(5838),p=n(5441),f=n(9809),m=n(9258),g=n(700);const y={kernelName:p.ljI,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,m.l)(e,(0,g.P)((0,f.w)(n,"float32"),-1))}}};var b=n(9359),x=n(6522),v=n(5702),w=n(9348),k=n(5793),T=n(7126);const S={kernelName:p.Vvy,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=(0,k.E)((0,f.w)(n,"float32")),s=(0,w.R)((0,T.j)((0,v.d)(1),t));return(0,x.H)((0,b.y)(e,s))}}}},N={kernelName:p.PH8,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=(0,w.R)((0,T.j)((0,k.E)((0,f.w)(n,"float32")),1));return(0,b.y)(e,t)}}}};var I=n(2198),C=n(2302),A=n(3791);const E={kernelName:p.OMN,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=I.assertAndGetBroadcastShape(n.shape,s.shape);return{a:()=>{let t=e;const s=I.getReductionAxes(n.shape,r);return s.length>0&&(t=(0,A.c)(t,s)),(0,C.t)(t,n.shape)},b:()=>{let t=e;const n=I.getReductionAxes(s.shape,r);return n.length>0&&(t=(0,A.c)(t,n)),(0,C.t)(t,s.shape)}}}},$={kernelName:p.EkD,saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach((t,s)=>{n[s]=()=>e.clone()}),n}};var R=n(5537);const _={kernelName:p.Jp_,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,R.P)(n)}}},D={kernelName:p.p_m,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,R.P)(n)}}},F={kernelName:p.QKF,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,b.y)(e,(0,w.R)((0,T.j)((0,v.d)(1),(0,k.E)((0,f.w)(n,"float32")))))}}};var O=n(7523);const M={kernelName:p.epO,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=(0,w.R)((0,O.W)((0,v.d)(1),(0,k.E)((0,f.w)(n,"float32"))));return(0,b.y)(e,t)}}}},z={kernelName:p.lxb,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=(0,I.assertAndGetBroadcastShape)(n.shape,s.shape);return{a:()=>{const t=(0,O.W)((0,k.E)(n),(0,k.E)(s));let a=(0,m.l)(e,(0,b.y)(s,t));const i=(0,I.getReductionAxes)(n.shape,r);return i.length>0&&(a=(0,A.c)(a,i)),(0,C.t)(a,n.shape)},b:()=>{const t=(0,O.W)((0,k.E)(n),(0,k.E)(s));let a=(0,x.H)((0,m.l)(e,(0,b.y)(n,t)));const i=(0,I.getReductionAxes)(s.shape,r);return i.length>0&&(a=(0,A.c)(a,i)),(0,C.t)(a,s.shape)}}}},L={kernelName:p.TyE,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,b.y)(e,(0,O.W)((0,k.E)((0,f.w)(n,"float32")),1))}}},P={kernelName:p.zP9,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,b.y)(e,(0,T.j)((0,v.d)(1),(0,k.E)((0,f.w)(n,"float32"))))}}};var B=n(1585),W=n(8189),V=n(5119),U=n(7195),G=n(929);const H=(0,G.op)({avgPool3dGrad_:function(e,t,n,s,r,a){const i=(0,W.YT)(e,"dy","avgPool3dGrad"),o=(0,W.YT)(t,"input","avgPool3dGrad");let l=i,u=o,c=!1;4===o.rank&&(c=!0,l=(0,C.t)(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),u=(0,C.t)(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),V.vA(5===l.rank,()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`),V.vA(5===u.rank,()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${u.rank}.`),(0,U.s_)("avgPool3dGrad",r,a);const d={dy:l,input:u},h={filterSize:n,strides:s,pad:r,dimRoundingMode:a},f=B.T2.runKernel(p.wwC,d,h);return c?(0,C.t)(f,[f.shape[1],f.shape[2],f.shape[3],f.shape[4]]):f}}),j={kernelName:p.cS,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:r,strides:a,pad:i,dimRoundingMode:o}=n;return{x:()=>H(e,s,r,a,i,o)}}},q=(0,G.op)({avgPoolGrad_:function(e,t,n,s,r){const a=(0,W.YT)(e,"dy","avgPoolGrad"),i=(0,W.YT)(t,"input","avgPoolGrad");V.vA(i.rank===a.rank,()=>`Rank of input (${i.rank}) does not match rank of dy (${a.rank})`);let o=i,l=a,u=!1;3===i.rank&&(u=!0,o=(0,C.t)(i,[1,i.shape[0],i.shape[1],i.shape[2]]),l=(0,C.t)(a,[1,a.shape[0],a.shape[1],a.shape[2]])),V.vA(4===l.rank,()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`),V.vA(4===o.rank,()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${o.rank}.`);const c={dy:l,input:o},d={filterSize:n,strides:s,pad:r},h=B.T2.runKernel(p.VCH,c,d);return u?(0,C.t)(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),Y={kernelName:p.ho8,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:r,strides:a,pad:i}=n;return{x:()=>q(e,s,r,a,i)}}};var K=n(5703);const X={kernelName:p.jAQ,inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[s,r]=t,{transposeA:a,transposeB:i}=n;return a||i?!a&&i?{a:()=>(0,K.N)(e,r,!1,!1),b:()=>(0,K.N)(e,s,!0,!1)}:a&&!i?{a:()=>(0,K.N)(r,e,!1,!0),b:()=>(0,K.N)(s,e,!1,!1)}:{a:()=>(0,K.N)(r,e,!0,!0),b:()=>(0,K.N)(e,s,!0,!0)}:{a:()=>(0,K.N)(e,r,!1,!0),b:()=>(0,K.N)(s,e,!0,!1)}}};var Z=n(776);const Q={kernelName:p.Ik2,gradFunc:(e,t,n)=>{const{blockShape:s,crops:r}=n;return{x:()=>(0,Z.e)(e,s,r)}}},J={kernelName:p.LB5,gradFunc:(e,t,n)=>{const s=n,r=s.inputShape,a=s.shape,i=Array.from(a);for(let e=r.length-1;e>=0;e--)if(r[e]===a[e])i[e]=1;else if(1!==r[e])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${a}].`);const o=[];for(let e=0;e<i.length;e++)i[e]>1&&o.push(e);return{x:()=>(0,A.c)(e,o,!0)}}},ee={kernelName:p.KXH,gradFunc:e=>({x:()=>e.clone()})},te={kernelName:p.QDP,gradFunc:e=>({x:()=>(0,R.P)(e)})};var ne=n(3337),se=n(6508),re=n(3789),ae=n(2151);const ie={kernelName:p.vaV,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{clipValueMin:r,clipValueMax:a}=n;return{x:()=>(0,ae._)((0,re.n)((0,ne.D)(s,r),(0,se.I)(s,a)),e,(0,R.P)(e))}}},oe={kernelName:p.$zE,inputsToSave:["x"],gradFunc:y.gradFunc};var le=n(6512);const ue={kernelName:p.$dB,saveAllInputs:!0,gradFunc:(e,t,n)=>{const s=t.map(e=>e.shape),{axis:r}=n,a=(0,V.Y6)(r,t[0].shape)[0],i=s.map(e=>e[a]);return(0,le.l)(e,i,a).map(e=>()=>e)}};var ce=n(5248),de=n(252);const he={kernelName:p.p2J,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,{dilations:a,strides:i,pad:o,dataFormat:l}=n;return V.vA(U.Dh(a),()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`),{x:()=>(0,de.v)(s.shape,e,r,i,o,l),filter:()=>(0,ce.H)(s,e,r.shape,i,o,l)}}};var pe=n(8794);const fe={kernelName:p.jfg,inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,{strides:a,pad:i,dataFormat:o,dimRoundingMode:l}=n;return{dy:()=>(0,pe.X)(e,r,a,i,o,1,l),filter:()=>(0,ce.H)(e,s,r.shape,a,i,o,l)}}},me=(0,G.op)({conv3DBackpropFilter_:function(e,t,n,s,r){let a=e;4===e.rank&&(a=(0,C.t)(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let i=t;4===i.rank&&(i=(0,C.t)(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),V.vA(5===a.rank,()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${a.shape}.`),V.vA(5===i.rank,()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`),V.vA(5===n.length,()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`),V.vA(a.shape[4]===n[3],()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`),V.vA(i.shape[4]===n[4],()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${n[4]}).`);const o={x:a,dy:i},l={strides:s,pad:r,filterShape:n};return B.T2.runKernel(p.iGz,o,l)}});var ge=n(1895);const ye={kernelName:p.A1h,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:r,pad:a}=n;V.vA((0,U.Dh)(s),()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`);const[i,o]=t;return{x:()=>(0,ge.c)(i.shape,e,o,r,a),filter:()=>me(i,e,o.shape,r,a)}}};var be=n(3726);const xe={kernelName:p.Mn0,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,m.l)((0,x.H)((0,be.F)((0,f.w)(n,"float32"))),e)}}};var ve=n(8276);const we={kernelName:p.MnK,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,m.l)((0,ve.L)((0,f.w)(n,"float32")),e)}}};var ke=n(1078),Te=n(6808),Se=n(7703);const Ne={kernelName:p.nY8,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r,exclusive:a,reverse:i}=n;return{x:()=>{const t=(0,ke.Em)([r],s.rank);let n=(0,Te.r)(e,r,a,!i);return null!=t&&(n=(0,Se.m)(n,t)),n}}}};var Ie=n(1890),Ce=n(3134);const Ae={kernelName:p.tGH,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:r,pad:a,dimRoundingMode:i}=n,o=null==s?[1,1]:s;V.vA(U.Dh(o),()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`);const[l,u]=t;return V.vA(4===l.rank,()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`),V.vA(4===u.rank,()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`),V.vA(l.shape[3]===u.shape[2],()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`),V.vA(U.G0(r,o),()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${r} and dilations '${o}'.`),U.s_("depthwiseConv2d",a,i),{x:()=>(0,Ce.l)(l.shape,e,u,r,a,o,i),filter:()=>(0,Ie.x)(l,e,u.shape,r,a,o,i)}}},Ee={kernelName:p.jxD,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,a={x:s,filter:r,dy:e},i={x:s,filter:r,dy:e};return{x:()=>B.T2.runKernel(p.bP9,a,n),filter:()=>B.T2.runKernel(p.pk0,i,n)}}},$e={kernelName:p.Pah,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t,s={dy:e,y:n};return{x:()=>B.T2.runKernel(p.rsH,s)}}};var Re=n(8631);const _e={kernelName:p._s9,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=(0,m.l)((0,Re.o)((0,x.H)((0,k.E)(n))),2/Math.sqrt(Math.PI));return{x:()=>(0,m.l)(e,s)}}},De={kernelName:p.ox3,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,m.l)(e,n)}}},Fe={kernelName:p.ybN,inputsToSave:["input"],gradFunc:(e,t)=>{const[n]=t;return{input:()=>(0,C.t)(e,n.shape)}}},Oe={kernelName:p.ybj,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,m.l)(e,(0,Re.o)(n))}}},Me={kernelName:p.ZgB,gradFunc:e=>({x:()=>(0,R.P)(e)})},ze={kernelName:p.ElG,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=(0,I.assertAndGetBroadcastShape)(n.shape,s.shape);return{a:()=>{const t=(0,b.y)(e,(0,f.w)(s,"float32")),a=(0,I.getReductionAxes)(n.shape,r);return a.length>0?(0,C.t)((0,A.c)(t,a),n.shape):t},b:()=>{let t=(0,m.l)(e,(0,f.w)(n,"float32"));const a=(0,I.getReductionAxes)(s.shape,r);a.length>0&&(t=(0,C.t)((0,A.c)(t,a),s.shape));const i=(0,k.E)(s);return(0,x.H)((0,b.y)(t,(0,f.w)(i,"float32")))}}}};var Le=n(7820),Pe=n(4826);const Be={kernelName:p.i5R,inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:s}=n,[r,a,i,o]=t,l=null==o?(0,v.d)(1):o,u=(0,I.getReductionAxes)(a.shape,r.shape),c=[];if(1===a.rank){for(let e=0;e<r.shape.length-1;++e)c.push(r.shape[e]);c.push(1)}const d=(0,T.j)(r,a),h=(0,m.l)(e,l),p=(0,Le.Z)((0,O.W)(i,(0,v.d)(s))),f=(0,m.l)((0,m.l)((0,m.l)(p,p),p),(0,v.d)(-.5));return{x:()=>1===a.rank?(0,C.t)((0,m.l)((0,m.l)(e,(0,Pe.V)((0,C.t)(p,[1,1,1,a.shape[0]]),c)),l),r.shape):(0,C.t)((0,m.l)((0,m.l)(e,p),l),r.shape),mean:()=>{let e=(0,m.l)((0,m.l)(p,(0,v.d)(-1)),h);return 1===a.rank&&(e=(0,A.c)(e,u)),(0,C.t)(e,a.shape)},variance:()=>{let e=(0,m.l)((0,m.l)(f,d),h);return 1===a.rank&&(e=(0,A.c)(e,u)),(0,C.t)(e,a.shape)},scale:()=>{const t=(0,m.l)(d,p);let n=(0,m.l)(e,t);return 1===a.rank&&(n=(0,A.c)(n,u)),(0,C.t)(n,a.shape)},offset:()=>{let t=e;return 1===a.rank&&(t=(0,A.c)(t,u)),(0,C.t)(t,a.shape)}}}};var We=n(4268),Ve=n(7706);const Ue={kernelName:p.mxL,inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[s,r]=t,{axis:a,batchDims:i}=n,o=(0,V.Y6)(a,s.shape)[0],l=(e,t,n)=>()=>{const s=e.shape,r=t.size,i=s.slice(0,o),l=i.length,u=s.slice(a,s.length).slice(1),c=u.length,d=Ge(0,l),h=Ge(l+1,l+1+c),p=He([i,[r],u]),f=(0,C.t)(n,p),m=(0,C.t)(t,[r]),g=He([[l],d,h]),y=(0,Se.m)(f,g);let b=(0,Ve.z)(y,m,e.shape[o]);const x=(0,ke.gx)(g);return b=(0,Se.m)(b,x),b};if(1===i){const t=s.shape[0],n=s.split(t,0);return{x:()=>{const t=(0,We.t)(n.map((t,n)=>l(t,r.slice(n,1),e.slice(n,1))()));return t.reshape(s.shape)},indices:()=>r}}return{x:l(s,r,e),indices:()=>r}}};function Ge(e,t){const n=[];for(let s=e;s<t;++s)n.push(s);return n}function He(e){const t=[];for(let n=0;n<e.length;++n)for(let s=0;s<e[n].length;++s)t.push(e[n][s]);return t}const je={kernelName:p.lLS,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>(0,R.P)(n),b:()=>(0,R.P)(s)}}},qe={kernelName:p.lzr,gradFunc:e=>({x:()=>(0,f.w)(e,"float32")})},Ye={kernelName:p.gIW,gradFunc:e=>({x:()=>(0,R.P)(e)})},Ke={kernelName:p.E3$,gradFunc:e=>({x:()=>(0,R.P)(e)})},Xe={kernelName:p.iPs,gradFunc:e=>({x:()=>(0,R.P)(e)})};var Ze=n(2058);const Qe={kernelName:p.X0$,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{alpha:r}=n,a=(0,Ze.r)(s,0);return{x:()=>(0,ae._)(a,e,(0,m.l)(e,r))}}},Je={kernelName:p.Cg$,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,b.y)(e,(0,O.W)(n,1))}}},et={kernelName:p.tG8,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,b.y)(e,(0,f.w)(n,"float32"))}}},tt={kernelName:p.zfU,inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n;return{logits:()=>{const t=(0,Re.o)(s);return(0,T.j)(e,(0,m.l)((0,A.c)(e,r,!0),t))}}}},nt=(0,G.op)({localResponseNormalizationBackprop_:function(e,t,n,s=5,r=1,a=1,i=.5){const o={x:e,y:t,dy:n},l={depthRadius:s,bias:r,alpha:a,beta:i};return B.T2.runKernel(p.ToN,o,l)}}),st={kernelName:p.jM4,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{depthRadius:a,bias:i,alpha:o,beta:l}=n;return{x:()=>nt(s,r,e,a,i,o,l)}}};var rt=n(3020);function at(e,t,n,s){return t.rank<n.rank&&(t=(0,C.t)(t,ke.SM(t.shape,s))),e.rank<n.rank&&(e=(0,C.t)(e,ke.SM(e.shape,s))),{x:()=>(0,m.l)(e,(0,f.w)((0,rt.L)(n,t),e.dtype))}}const it={kernelName:p.VAI,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{reductionIndices:r}=s,a=t[0],i=at(e,t[1],a,V.Y6(r,a.shape));return{x:()=>i.x()}}};var ot=n(1303);const lt={kernelName:p.LDN,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>(0,m.l)(e,(0,f.w)((0,ne.D)(n,s),"float32")),b:()=>(0,m.l)(e,(0,f.w)((0,ot.M)(n,s),"float32"))}}},ut=(0,G.op)({maxPool3dGrad_:function(e,t,n,s,r,a,i){const o=(0,W.YT)(e,"dy","maxPool3dGrad"),l=(0,W.YT)(t,"input","maxPool3dGrad"),u=(0,W.YT)(n,"output","maxPool3dGrad");let c=o,d=l,h=u,f=!1;4===l.rank&&(f=!0,c=(0,C.t)(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),d=(0,C.t)(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),h=(0,C.t)(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),V.vA(5===c.rank,()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`),V.vA(5===d.rank,()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${d.rank}.`),V.vA(5===h.rank,()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${h.rank}.`),(0,U.s_)("maxPool3dGrad",a,i);const m={dy:c,input:d,output:h},g={filterSize:s,strides:r,pad:a,dimRoundingMode:i},y=B.T2.runKernel(p.cHb,m,g);return f?(0,C.t)(y,[y.shape[1],y.shape[2],y.shape[3],y.shape[4]]):y}}),ct={kernelName:p.ySp,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=n;return{x:()=>ut(e,s,r,a,i,o,l)}}},dt=(0,G.op)({maxPoolGrad_:function(e,t,n,s,r,a,i){const o=(0,W.YT)(e,"dy","maxPoolGrad"),l=(0,W.YT)(t,"input","maxPoolGrad"),u=(0,W.YT)(n,"output","maxPoolGrad");V.vA(l.rank===o.rank,()=>`Rank of input (${l.rank}) does not match rank of dy (${o.rank})`),V.vA(4===o.rank,()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${o.rank}.`),V.vA(4===l.rank,()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`),U.s_("maxPoolGrad",a,i);const c={dy:o,input:l,output:u},d={filterSize:s,strides:r,pad:a,dimRoundingMode:i};return B.T2.runKernel(p.RXX,c,d)}}),ht={kernelName:p.t3d,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{filterSize:a,strides:i,pad:o}=n;return{x:()=>dt(e,s,r,a,i,o)}}};var pt=n(1411);const ft={kernelName:p.g5A,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n,a=V.Y6(r,s.shape),i=(0,ke.lb)(s.shape,a)[1],o=V.Ze(i);return{x:()=>{const t=s.shape.slice();a.forEach(e=>{t[e]=1});const n=(0,C.t)(e,t);return(0,b.y)((0,m.l)(n,(0,pt.S)(s.shape,"float32")),o)}}}},mt={kernelName:p.lNG,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{axis:r}=s,[a,i]=t,o=at(e,i,a,V.Y6(r,a.shape));return{x:()=>o.x()}}},gt={kernelName:p.LG0,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>(0,m.l)(e,(0,f.w)((0,se.I)(n,s),"float32")),b:()=>(0,m.l)(e,(0,f.w)((0,Ze.r)(n,s),"float32"))}}};var yt=n(7986);const bt={kernelName:p.x7F,inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:r}=n,a=r.map(e=>e[0]);return{x:()=>(0,yt.d)(e,a,s.shape)}}};var xt=n(5606);const vt={kernelName:p.BLA,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=(0,I.assertAndGetBroadcastShape)(n.shape,s.shape);return{a:()=>{const t=(0,I.getReductionAxes)(n.shape,r);return t.length>0?(0,C.t)((0,A.c)(e,t),n.shape):e},b:()=>{const t=(0,m.l)(e,(0,x.H)((0,xt.R)((0,b.y)(n,s)))),a=(0,I.getReductionAxes)(s.shape,r);return a.length>0?(0,C.t)((0,A.c)(t,a),s.shape):t}}}},wt={kernelName:p.xu7,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=(0,I.assertAndGetBroadcastShape)(n.shape,s.shape);return{a:()=>{const t=(0,m.l)(e,(0,f.w)(s,"float32")),a=(0,I.getReductionAxes)(n.shape,r);return a.length>0?(0,C.t)((0,A.c)(t,a),n.shape):t},b:()=>{const t=(0,m.l)(e,(0,f.w)(n,"float32")),a=(0,I.getReductionAxes)(s.shape,r);return a.length>0?(0,C.t)((0,A.c)(t,a),s.shape):t}}}},kt={kernelName:p.l0G,gradFunc:e=>({x:()=>(0,x.H)(e)})};var Tt=n(2855);const St={kernelName:p.urI,inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>(0,Tt.U)(n.shape,"float32")}}},Nt={kernelName:p.LWX,gradFunc:e=>({x:()=>(0,R.P)(e)})};var It=n(7261);const Ct={kernelName:p.mM$,saveAllInputs:!0,gradFunc:(e,t,n)=>{const{axis:s}=n;return(0,It.K)(e,s).map(e=>()=>e)}},At={kernelName:p.ODT,inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:r}=n,a=r.map(e=>e[0]);return{x:()=>(0,yt.d)(e,a,s.shape)}}};var Et=n(4010),$t=n(8990);const Rt={kernelName:p.pyJ,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,s,r]=t,a=n,i=s,o=I.assertAndGetBroadcastShape(a.shape,i.shape);return{a:()=>{const t=(0,f.w)(i,"float32");let n=(0,m.l)(e,(0,m.l)(t,(0,$t.n)(a,(0,T.j)(t,(0,v.d)(1)))));const s=I.getReductionAxes(a.shape,o);return s.length>0&&(n=(0,A.c)(n,s)),(0,C.t)(n,a.shape)},b:()=>{const t=(0,Ze.r)(a,0),n=(0,ae._)(t,(0,Et.R)(a),(0,R.P)(a));let s=(0,m.l)(e,(0,m.l)(r,n));const l=I.getReductionAxes(i.shape,o);return l.length>0&&(s=(0,A.c)(s,l)),(0,C.t)(s,i.shape)}}}},_t={kernelName:p.Ncv,inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,s]=t,r=(0,Ze.r)(n,0);return{x:()=>(0,ae._)(r,e,(0,m.l)(e,s)),alpha:()=>{let t=(0,ae._)(r,(0,R.P)(e),(0,m.l)(e,n));const a=(0,I.getReductionAxes)(s.shape,e.shape);return a.length>0&&(t=(0,A.c)(t,a)),(0,C.t)(t,s.shape)}}}};var Dt=n(302);const Ft={kernelName:p.kdj,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n;let a=[];return a=null==r?s.shape.map((e,t)=>t):"number"==typeof r?[r]:r,{x:()=>function(e,t,n){const s=e.shape.length,r=s-n.length,a=ke.Em(n,s);let i=e;null!=a&&(i=(0,Se.m)(e,a));const o=i.shape.slice(),l=o.splice(s-n.length,n.length).reduce((e,t)=>e*t,1);o.push(l);let u=function(e,t,n){const s=e.shape.slice();s[n]=1;const r=(0,C.t)(t,s),a=(0,Dt.L)(e,n,!0,!1),i=(0,Dt.L)(e,n,!0,!0),o=(0,m.l)(a,i);return(0,m.l)(r,o)}(i.reshape(o),t,r);if(u=u.reshape(i.shape),null!=a){const e=ke.gx(a);u=(0,Se.m)(u,e)}return u}(s,e,a)}}},Ot={kernelName:p.sDr,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=I.assertAndGetBroadcastShape(n.shape,s.shape);return{a:()=>{const t=(0,b.y)(e,(0,f.w)(s,"float32")),a=I.getReductionAxes(n.shape,r);return a.length>0?(0,C.t)((0,A.c)(t,a),n.shape):t},b:()=>{let t=(0,m.l)(e,(0,f.w)(n,"float32"));const a=I.getReductionAxes(s.shape,r);a.length>0&&(t=(0,C.t)((0,A.c)(t,a),s.shape));const i=(0,k.E)(s);return(0,x.H)((0,b.y)(t,(0,f.w)(i,"float32")))}}}},Mt={kernelName:p.huO,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,b.y)(e,(0,x.H)((0,k.E)(n)))}}},zt={kernelName:p.P_L,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=(0,m.l)((0,se.I)(n,6),(0,g.P)(n));return{x:()=>(0,m.l)(e,(0,f.w)(s,"float32"))}}},Lt={kernelName:p.fUj,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,m.l)(e,(0,f.w)((0,g.P)(n),"float32"))}}},Pt={kernelName:p.R23,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,C.t)(e,n.shape)}}},Bt={kernelName:p.hgw,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,r={dy:e,images:s};return{images:()=>B.T2.runKernel(p.FCQ,r,n)}}},Wt={kernelName:p.jOE,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,r={dy:e,images:s};return{images:()=>B.T2.runKernel(p.XQy,r,n)}}};var Vt=n(3262);const Ut={kernelName:p.D7i,gradFunc:(e,t,n)=>{const{dims:s}=n,r=(0,V.Y6)(s,e.shape);return{x:()=>(0,Vt.B)(e,r)}}},Gt={kernelName:p.hVg,gradFunc:e=>({x:()=>(0,R.P)(e)})},Ht={kernelName:p.TOR,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,x.H)((0,b.y)(e,(0,m.l)((0,$t.n)(n,1.5),2)))}}};var jt=n(9881);const qt={kernelName:p.l6P,inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>(0,f.w)((0,R.P)(n),"float32"),t:()=>(0,m.l)(e,(0,f.w)(n,e.dtype)),e:()=>(0,m.l)(e,(0,f.w)((0,jt.N)(n),e.dtype))}}};var Yt=n(8576);const Kt={kernelName:p.u$b,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=(0,Ze.r)(n,(0,v.d)(0)),s=(0,v.d)(Yt.j),r=(0,v.d)(Yt.X),a=(0,m.l)(e,r),i=(0,m.l)((0,m.l)(e,s),(0,Re.o)((0,f.w)(n,"float32")));return(0,ae._)(t,a,i)}}}},Xt={kernelName:p.vI1,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,m.l)(e,(0,m.l)(n,(0,T.j)((0,v.d)(1),n)))}}},Zt={kernelName:p.YVe,gradFunc:e=>({x:()=>(0,R.P)(e)})};var Qt=n(9907);const Jt={kernelName:p.hql,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,m.l)((0,Qt.g)((0,f.w)(n,"float32")),e)}}};var en=n(7451);const tn={kernelName:p.J3C,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,m.l)((0,en.y)((0,f.w)(n,"float32")),e)}}};var nn=n(5661),sn=n(4969);const rn={kernelName:p.JiE,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{begin:r,size:a}=n,i=s.shape,[o,l]=(0,sn.parseSliceParams)(s,r,a),u=[];for(let t=0;t<e.rank;t++)u.push([o[t],i[t]-o[t]-l[t]]);return{x:()=>(0,nn.e)(e,u)}}},an={kernelName:p.rFG,outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{dim:r}=n,a=(0,m.l)(e,s);return{logits:()=>(0,T.j)(a,(0,m.l)((0,A.c)(a,[r],!0),s))}}};var on=n(8968);const ln={kernelName:p.Fin,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,m.l)(e,(0,on.r)(n))}}};var un=n(9772);const cn={kernelName:p.A8B,gradFunc:(e,t,n)=>{const{blockShape:s,paddings:r}=n;return{x:()=>(0,un.G)(e,s,r)}}};var dn=n(5030);const hn={kernelName:p.Blb,gradFunc:(e,t,n)=>{const{axis:s}=n;return{x:()=>(0,dn.x)(e,s)}}},pn={kernelName:p.dFH,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,b.y)(e,(0,m.l)((0,w.R)((0,f.w)(n,"float32")),2))}}},fn={kernelName:p.M6A,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,m.l)(e,(0,m.l)((0,f.w)(n,"float32"),2))}}},mn={kernelName:p.Ddj,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=(0,v.d)(2);return{a:()=>(0,m.l)(e,(0,m.l)(r,(0,T.j)(n,s))),b:()=>(0,m.l)(e,(0,m.l)(r,(0,T.j)(s,n)))}}},gn={kernelName:p.pnw,gradFunc:e=>({x:()=>(0,R.P)(e)})},yn={kernelName:p.PbM,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=I.assertAndGetBroadcastShape(n.shape,s.shape);return{a:()=>{let t=e;const s=I.getReductionAxes(n.shape,r);return s.length>0&&(t=(0,A.c)(t,s)),(0,C.t)(t,n.shape)},b:()=>{let t=e;const n=I.getReductionAxes(s.shape,r);return n.length>0&&(t=(0,A.c)(t,n)),(0,C.t)((0,x.H)(t),s.shape)}}}},bn={kernelName:p.WuN,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,r=s.shape.slice(),{axis:a}=n;(0,V.Y6)(a,s.shape).forEach(e=>{r[e]=1});const i=(0,C.t)(e,r),o=(0,m.l)(i,(0,pt.S)(s.shape,"float32"));return{x:()=>o}}},xn={kernelName:p.oFs,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,b.y)(e,(0,k.E)((0,Qt.g)(n)))}}},vn={kernelName:p.iuW,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,m.l)((0,T.j)((0,v.d)(1),(0,k.E)(n)),e)}}},wn={kernelName:p.FAs,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{reps:r}=n;return{x:()=>{let t=(0,R.P)(s);if(1===s.rank)for(let n=0;n<r[0];++n)t=(0,O.W)(t,(0,yt.d)(e,[n*s.shape[0]],[s.shape[0]]));else if(2===s.rank)for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)t=(0,O.W)(t,(0,yt.d)(e,[n*s.shape[0],a*s.shape[1]],[s.shape[0],s.shape[1]]));else if(3===s.rank)for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)for(let i=0;i<r[2];++i)t=(0,O.W)(t,(0,yt.d)(e,[n*s.shape[0],a*s.shape[1],i*s.shape[2]],[s.shape[0],s.shape[1],s.shape[2]]));else{if(4!==s.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`);for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)for(let i=0;i<r[2];++i)for(let o=0;o<r[3];++o)t=(0,O.W)(t,(0,yt.d)(e,[n*s.shape[0],a*s.shape[1],i*s.shape[2],o*s.shape[3]],[s.shape[0],s.shape[1],s.shape[2],s.shape[3]]))}return t}}}},kn={kernelName:p.wx0,gradFunc:(e,t,n)=>{const s=n,{perm:r}=s,a=ke.gx(r);return{x:()=>(0,Se.m)(e,a)}}},Tn={kernelName:p.dXR,gradFunc:(e,t,n)=>{const s=n,{axis:r}=s;return{value:()=>(0,We.t)(e,r)}}};var Sn=n(8710),Nn=n(8229),In=n(178);const Cn={kernelName:p.pPe,inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=(0,In.P)(t,(0,R.P)(t)),s=(0,Nn.k)(e,n);let r=(0,ne.D)(t,(0,v.d)(0,"int32"));const a=s.rank-r.rank;for(let e=0;e<a;++e)r=(0,Sn.U)(r,e+1);r=(0,re.n)(r,(0,pt.S)(s.shape,"bool"));const i=(0,R.P)(s);return(0,ae._)(r,s,i)}(e,n)}}},An={kernelName:p.xJ3,gradFunc:e=>({x:()=>(0,R.P)(e)})};var En=n(7074);const $n=[y,S,N,E,$,_,D,F,M,z,L,P,j,Y,X,Q,J,ee,te,ie,oe,ue,fe,he,ye,xe,we,Ne,Ae,Ee,Ot,$e,_e,De,Fe,Oe,ze,Me,Be,Ue,je,qe,Ye,Ke,Xe,Qe,Je,et,tt,st,it,it,lt,ct,ht,ft,mt,gt,bt,vt,wt,kt,St,Nt,Ct,At,At,Rt,_t,Ft,Mt,zt,Lt,Pt,Bt,Wt,Ut,Gt,Ht,qt,Kt,Xt,Zt,Jt,tn,rn,an,ln,cn,cn,hn,hn,pn,mn,fn,gn,yn,bn,xn,vn,wn,kn,Tn,Cn,An];for(const e of $n)(0,En.kr)(e);var Rn=n(4888),_n=n(259);(0,_n.tp)().prototype.abs=function(){return this.throwIfDisposed(),(0,Rn.t)(this)};var Dn=n(2804);(0,_n.tp)().prototype.acos=function(){return this.throwIfDisposed(),(0,Dn.H)(this)};var Fn=n(7558);(0,_n.tp)().prototype.acosh=function(){return this.throwIfDisposed(),(0,Fn.F)(this)},(0,_n.tp)().prototype.add=function(e){return this.throwIfDisposed(),(0,O.W)(this,e)};var On=n(2307);(0,_n.tp)().prototype.all=function(e,t){return this.throwIfDisposed(),(0,On.Q)(this,e,t)};var Mn=n(9326);(0,_n.tp)().prototype.any=function(e,t){return this.throwIfDisposed(),(0,Mn.b)(this,e,t)};var zn=n(897);(0,_n.tp)().prototype.argMax=function(e){return this.throwIfDisposed(),(0,zn.F)(this,e)};var Ln=n(4339);(0,_n.tp)().prototype.argMin=function(e){return this.throwIfDisposed(),(0,Ln.X)(this,e)},(0,_n.tp)().prototype.asScalar=function(){return this.throwIfDisposed(),(0,V.vA)(1===this.size,()=>"The array must have only 1 element."),(0,C.t)(this,[])},(0,_n.tp)().prototype.asType=function(e){return this.throwIfDisposed(),(0,f.w)(this,e)},(0,_n.tp)().prototype.as1D=function(){return this.throwIfDisposed(),(0,C.t)(this,[this.size])},(0,_n.tp)().prototype.as2D=function(e,t){return this.throwIfDisposed(),(0,C.t)(this,[e,t])},(0,_n.tp)().prototype.as3D=function(e,t,n){return this.throwIfDisposed(),(0,C.t)(this,[e,t,n])},(0,_n.tp)().prototype.as4D=function(e,t,n,s){return this.throwIfDisposed(),(0,C.t)(this,[e,t,n,s])},(0,_n.tp)().prototype.as5D=function(e,t,n,s,r){return this.throwIfDisposed(),(0,C.t)(this,[e,t,n,s,r])};var Pn=n(6841);(0,_n.tp)().prototype.asin=function(){return this.throwIfDisposed(),(0,Pn.q)(this)};var Bn=n(269);(0,_n.tp)().prototype.asinh=function(){return this.throwIfDisposed(),(0,Bn.y)(this)};var Wn=n(9580);(0,_n.tp)().prototype.atan=function(){return this.throwIfDisposed(),(0,Wn.r)(this)};var Vn=n(1404);(0,_n.tp)().prototype.atan2=function(e){return this.throwIfDisposed(),(0,Vn.F)(this,e)};var Un=n(3774);(0,_n.tp)().prototype.atanh=function(){return this.throwIfDisposed(),(0,Un.r)(this)};var Gn=n(3909);(0,_n.tp)().prototype.avgPool=function(e,t,n,s){return this.throwIfDisposed(),(0,Gn.$)(this,e,t,n,s)},(0,_n.tp)().prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),(0,un.G)(this,e,t)};var Hn=n(9160);(0,_n.tp)().prototype.batchNorm=function(e,t,n,s,r){return this.throwIfDisposed(),(0,Hn.$)(this,e,t,n,s,r)};var jn=n(3567);(0,_n.tp)().prototype.broadcastTo=function(e){return this.throwIfDisposed(),(0,jn.h)(this,e)},(0,_n.tp)().prototype.cast=function(e){return this.throwIfDisposed(),(0,f.w)(this,e)};var qn=n(855);(0,_n.tp)().prototype.ceil=function(){return this.throwIfDisposed(),(0,qn.m)(this)};var Yn=n(6928);(0,_n.tp)().prototype.clipByValue=function(e,t){return this.throwIfDisposed(),(0,Yn.z)(this,e,t)},(0,_n.tp)().prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof _n.qY&&(e=[e]),(0,dn.x)([this,...e],t)};var Kn=n(3701);(0,_n.tp)().prototype.conv1d=function(e,t,n,s,r,a){return this.throwIfDisposed(),(0,Kn.k)(this,e,t,n,s,r,a)};var Xn=n(1106);(0,_n.tp)().prototype.conv2dTranspose=function(e,t,n,s,r){return this.throwIfDisposed(),(0,Xn.w)(this,e,t,n,s,r)},(0,_n.tp)().prototype.conv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),(0,pe.X)(this,e,t,n,s,r,a)},(0,_n.tp)().prototype.cos=function(){return this.throwIfDisposed(),(0,Qt.g)(this)},(0,_n.tp)().prototype.cosh=function(){return this.throwIfDisposed(),(0,en.y)(this)},(0,_n.tp)().prototype.cumprod=function(e,t,n){return this.throwIfDisposed(),(0,Dt.L)(this,e,t,n)},(0,_n.tp)().prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),(0,Te.r)(this,e,t,n)};var Zn=n(1216);(0,_n.tp)().prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),(0,Zn.R)(this,e,t)};var Qn=n(676);(0,_n.tp)().prototype.depthwiseConv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),(0,Qn.G)(this,e,t,n,s,r,a)};var Jn=n(3002);(0,_n.tp)().prototype.dilation2d=function(e,t,n,s,r){return this.throwIfDisposed(),(0,Jn.X)(this,e,t,n,s,r)};var es=n(919);(0,_n.tp)().prototype.divNoNan=function(e){return this.throwIfDisposed(),(0,es.e)(this,e)},(0,_n.tp)().prototype.div=function(e){return this.throwIfDisposed(),(0,b.y)(this,e)};var ts=n(9759);(0,_n.tp)().prototype.dot=function(e){return this.throwIfDisposed(),(0,ts.O)(this,e)};var ns=n(3416);(0,_n.tp)().prototype.elu=function(){return this.throwIfDisposed(),(0,ns.P)(this)},(0,_n.tp)().prototype.equal=function(e){return this.throwIfDisposed(),(0,rt.L)(this,e)};var ss=n(5207);(0,_n.tp)().prototype.erf=function(){return this.throwIfDisposed(),(0,ss.Y)(this)};var rs=n(4881);(0,_n.tp)().prototype.euclideanNorm=function(e,t){return this.throwIfDisposed(),(0,rs.p)(this,e,t)},(0,_n.tp)().prototype.exp=function(){return this.throwIfDisposed(),(0,Re.o)(this)},(0,_n.tp)().prototype.expandDims=function(e){return this.throwIfDisposed(),(0,Sn.U)(this,e)};var as=n(517);(0,_n.tp)().prototype.expm1=function(){return this.throwIfDisposed(),(0,as.I)(this)};var is=n(1361);(0,_n.tp)().prototype.fft=function(){return this.throwIfDisposed(),(0,is.h)(this)},(0,_n.tp)().prototype.flatten=function(){return this.throwIfDisposed(),(0,C.t)(this,[this.size])},(0,_n.tp)().prototype.floor=function(){return this.throwIfDisposed(),(0,xt.R)(this)};var os=n(8991);(0,_n.tp)().prototype.floorDiv=function(e){return this.throwIfDisposed(),(0,os.w)(this,e)},(0,_n.tp)().prototype.gather=function(e,t,n){return this.throwIfDisposed(),(0,Nn.k)(this,e,t,n)},(0,_n.tp)().prototype.greaterEqual=function(e){return this.throwIfDisposed(),(0,ne.D)(this,e)},(0,_n.tp)().prototype.greater=function(e){return this.throwIfDisposed(),(0,Ze.r)(this,e)};var ls=n(3108);(0,_n.tp)().prototype.ifft=function(){return this.throwIfDisposed(),(0,ls.K)(this)};var us=n(2292);(0,_n.tp)().prototype.irfft=function(){return this.throwIfDisposed(),(0,us.g)(this)};var cs=n(8318);(0,_n.tp)().prototype.isFinite=function(){return this.throwIfDisposed(),(0,cs.M)(this)};var ds=n(3454);(0,_n.tp)().prototype.isInf=function(){return this.throwIfDisposed(),(0,ds.E)(this)};var hs=n(6300);(0,_n.tp)().prototype.isNaN=function(){return this.throwIfDisposed(),(0,hs.y)(this)};var ps=n(6919);(0,_n.tp)().prototype.leakyRelu=function(e){return this.throwIfDisposed(),(0,ps.H)(this,e)},(0,_n.tp)().prototype.lessEqual=function(e){return this.throwIfDisposed(),(0,se.I)(this,e)},(0,_n.tp)().prototype.less=function(e){return this.throwIfDisposed(),(0,ot.M)(this,e)};var fs=n(3531);(0,_n.tp)().prototype.localResponseNormalization=function(e,t,n,s){return this.throwIfDisposed(),(0,fs.K)(this,e,t,n,s)};var ms=n(5645);(0,_n.tp)().prototype.logSigmoid=function(){return this.throwIfDisposed(),(0,ms.n)(this)};var gs=n(7991);(0,_n.tp)().prototype.logSoftmax=function(e){return this.throwIfDisposed(),(0,gs.H)(this,e)};var ys=n(3330);(0,_n.tp)().prototype.logSumExp=function(e,t){return this.throwIfDisposed(),(0,ys.V)(this,e,t)},(0,_n.tp)().prototype.log=function(){return this.throwIfDisposed(),(0,Et.R)(this)};var bs=n(2015);(0,_n.tp)().prototype.log1p=function(){return this.throwIfDisposed(),(0,bs.K)(this)},(0,_n.tp)().prototype.logicalAnd=function(e){return this.throwIfDisposed(),(0,re.n)(this,e)},(0,_n.tp)().prototype.logicalNot=function(){return this.throwIfDisposed(),(0,jt.N)(this)};var xs=n(9879);(0,_n.tp)().prototype.logicalOr=function(e){return this.throwIfDisposed(),(0,xs.z)(this,e)};var vs=n(9925);(0,_n.tp)().prototype.logicalXor=function(e){return this.throwIfDisposed(),(0,vs.r)(this,e)},(0,_n.tp)().prototype.matMul=function(e,t,n){return this.throwIfDisposed(),(0,K.N)(this,e,t,n)};var ws=n(6999);(0,_n.tp)().prototype.maxPool=function(e,t,n,s){return this.throwIfDisposed(),(0,ws.j)(this,e,t,n,s)};var ks=n(1938);(0,_n.tp)().prototype.max=function(e,t){return this.throwIfDisposed(),(0,ks.T)(this,e,t)},(0,_n.tp)().prototype.maximum=function(e){return this.throwIfDisposed(),(0,In.P)(this,e)};var Ts=n(2611);(0,_n.tp)().prototype.mean=function(e,t){return this.throwIfDisposed(),(0,Ts.i)(this,e,t)};var Ss=n(7436);(0,_n.tp)().prototype.min=function(e,t){return this.throwIfDisposed(),(0,Ss.j)(this,e,t)};var Ns=n(2644);(0,_n.tp)().prototype.minimum=function(e){return this.throwIfDisposed(),(0,Ns.B)(this,e)};var Is=n(6567);(0,_n.tp)().prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),(0,Is.F)(this,e,t)};var Cs=n(152);(0,_n.tp)().prototype.mod=function(e){return this.throwIfDisposed(),(0,Cs.z)(this,e)},(0,_n.tp)().prototype.mul=function(e){return this.throwIfDisposed(),(0,m.l)(this,e)},(0,_n.tp)().prototype.neg=function(){return this.throwIfDisposed(),(0,x.H)(this)};var As=n(2596);(0,_n.tp)().prototype.norm=function(e,t,n){return this.throwIfDisposed(),(0,As.x)(this,e,t,n)};var Es=n(2118);(0,_n.tp)().prototype.notEqual=function(e){return this.throwIfDisposed(),(0,Es.E)(this,e)};var $s=n(1760);(0,_n.tp)().prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),(0,$s.M)(this,e,t,n)};var Rs=n(9885);(0,_n.tp)().prototype.onesLike=function(){return this.throwIfDisposed(),(0,Rs.P)(this)},(0,_n.tp)().prototype.pad=function(e,t){return this.throwIfDisposed(),(0,nn.e)(this,e,t)};var _s=n(7872);(0,_n.tp)().prototype.pool=function(e,t,n,s,r,a){return this.throwIfDisposed(),(0,_s.d)(this,e,t,n,s,r,a)},(0,_n.tp)().prototype.pow=function(e){return this.throwIfDisposed(),(0,$t.n)(this,e)};var Ds=n(4394);(0,_n.tp)().prototype.prelu=function(e){return this.throwIfDisposed(),(0,Ds.N)(this,e)};var Fs=n(7771);(0,_n.tp)().prototype.prod=function(e,t){return this.throwIfDisposed(),(0,Fs._)(this,e,t)};var Os=n(9870);(0,_n.tp)().prototype.reciprocal=function(){return this.throwIfDisposed(),(0,Os.V)(this)};var Ms=n(112);(0,_n.tp)().prototype.relu=function(){return this.throwIfDisposed(),(0,Ms.V)(this)};var zs=n(3732);(0,_n.tp)().prototype.relu6=function(){return this.throwIfDisposed(),(0,zs.j)(this)},(0,_n.tp)().prototype.reshapeAs=function(e){return this.throwIfDisposed(),(0,C.t)(this,e.shape)},(0,_n.tp)().prototype.reshape=function(e){return this.throwIfDisposed(),(0,C.t)(this,e)};var Ls=n(4711);(0,_n.tp)().prototype.resizeBilinear=function(e,t,n){return this.throwIfDisposed(),(0,Ls.v)(this,e,t,n)};var Ps=n(2954);(0,_n.tp)().prototype.resizeNearestNeighbor=function(e,t,n){return this.throwIfDisposed(),(0,Ps.b)(this,e,t,n)},(0,_n.tp)().prototype.reverse=function(e){return this.throwIfDisposed(),(0,Vt.B)(this,e)};var Bs=n(8775);(0,_n.tp)().prototype.rfft=function(){return this.throwIfDisposed(),(0,Bs.z)(this)};var Ws=n(5912);(0,_n.tp)().prototype.round=function(){return this.throwIfDisposed(),(0,Ws.L)(this)},(0,_n.tp)().prototype.rsqrt=function(){return this.throwIfDisposed(),(0,Le.Z)(this)};var Vs=n(6325);(0,_n.tp)().prototype.selu=function(){return this.throwIfDisposed(),(0,Vs.W)(this)};var Us=n(9986);(0,_n.tp)().prototype.separableConv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),(0,Us.w)(this,e,t,n,s,r,a)},(0,_n.tp)().prototype.sigmoid=function(){return this.throwIfDisposed(),(0,on.r)(this)};var Gs=n(1115);(0,_n.tp)().prototype.sign=function(){return this.throwIfDisposed(),(0,Gs._)(this)},(0,_n.tp)().prototype.sin=function(){return this.throwIfDisposed(),(0,be.F)(this)},(0,_n.tp)().prototype.sinh=function(){return this.throwIfDisposed(),(0,ve.L)(this)},(0,_n.tp)().prototype.slice=function(e,t){return this.throwIfDisposed(),(0,yt.d)(this,e,t)};var Hs=n(6346);(0,_n.tp)().prototype.softmax=function(e){return this.throwIfDisposed(),(0,Hs.V)(this,e)};var js=n(6030);(0,_n.tp)().prototype.softplus=function(){return this.throwIfDisposed(),(0,js.l)(this)},(0,_n.tp)().prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),(0,Z.e)(this,e,t)},(0,_n.tp)().prototype.split=function(e,t){return this.throwIfDisposed(),(0,le.l)(this,e,t)},(0,_n.tp)().prototype.sqrt=function(){return this.throwIfDisposed(),(0,w.R)(this)},(0,_n.tp)().prototype.square=function(){return this.throwIfDisposed(),(0,k.E)(this)};var qs=n(3427);(0,_n.tp)().prototype.squaredDifference=function(e){return this.throwIfDisposed(),(0,qs.P)(this,e)};var Ys=n(5932);(0,_n.tp)().prototype.squeeze=function(e){return this.throwIfDisposed(),(0,Ys.r)(this,e)},(0,_n.tp)().prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof _n.qY?[this,e]:[this,...e];return(0,We.t)(n,t)},(0,_n.tp)().prototype.step=function(e){return this.throwIfDisposed(),(0,g.P)(this,e)};var Ks=n(5894);(0,_n.tp)().prototype.stridedSlice=function(e,t,n,s,r,a,i,o){return this.throwIfDisposed(),(0,Ks.Y)(this,e,t,n,s,r,a,i,o)},(0,_n.tp)().prototype.sub=function(e){return this.throwIfDisposed(),(0,T.j)(this,e)},(0,_n.tp)().prototype.sum=function(e,t){return this.throwIfDisposed(),(0,A.c)(this,e,t)};var Xs=n(7823);(0,_n.tp)().prototype.tan=function(){return this.throwIfDisposed(),(0,Xs.M)(this)};var Zs=n(7311);(0,_n.tp)().prototype.tanh=function(){return this.throwIfDisposed(),(0,Zs.y)(this)},(0,_n.tp)().prototype.tile=function(e){return this.throwIfDisposed(),(0,Pe.V)(this,e)},(0,_n.tp)().prototype.toBool=function(){return this.throwIfDisposed(),(0,f.w)(this,"bool")},(0,_n.tp)().prototype.toFloat=function(){return this.throwIfDisposed(),(0,f.w)(this,"float32")},(0,_n.tp)().prototype.toInt=function(){return this.throwIfDisposed(),(0,f.w)(this,"int32")};var Qs=n(1190);(0,_n.tp)().prototype.topk=function(e,t){return this.throwIfDisposed(),(0,Qs.r)(this,e,t)},(0,_n.tp)().prototype.transpose=function(e){return this.throwIfDisposed(),(0,Se.m)(this,e)};var Js=n(3937);(0,_n.tp)().prototype.unique=function(e){return this.throwIfDisposed(),(0,Js.A)(this,e)},(0,_n.tp)().prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),(0,Ve.z)(this,e,t)},(0,_n.tp)().prototype.unstack=function(e){return this.throwIfDisposed(),(0,It.K)(this,e)},(0,_n.tp)().prototype.where=function(e,t){return this.throwIfDisposed(),(0,ae._)(e,this,t)},(0,_n.tp)().prototype.zerosLike=function(){return this.throwIfDisposed(),(0,R.P)(this)};class er extends Error{constructor(e){super(e),Object.setPrototypeOf(this,er.prototype)}}class tr extends Error{constructor(e){super(e),Object.setPrototypeOf(this,tr.prototype)}}class nr extends Error{constructor(e){super(e),Object.setPrototypeOf(this,nr.prototype)}}class sr extends Error{constructor(e){super(e),Object.setPrototypeOf(this,sr.prototype)}}class rr extends Error{constructor(e){super(e),Object.setPrototypeOf(this,rr.prototype)}}Error;class ar{constructor(e){this.maxEntries=e||100,this.cache=new Map}get(e){let t;return this.cache.has(e)&&(t=this.cache.get(e),this.cache.delete(e),this.cache.set(e,t)),t}put(e,t){if(this.cache.has(e))this.cache.delete(e);else if(this.cache.size>=this.maxEntries){const e=this.cache.keys().next().value;this.cache.delete(e)}this.cache.set(e,t)}getMaxEntries(){return this.maxEntries}setMaxEntries(e){if(e<0)throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${e}.`);if(this.maxEntries>e)for(let t=0;t<this.maxEntries-e;t++){const e=this.cache.keys().next().value;this.cache.delete(e)}this.maxEntries=e}}function ir(e,t){if(Array.isArray(e)){let n=[];for(let s=0;s<t;s++)n=n.concat(e);return n}{const n=new Array(t);return n.fill(e),n}}function or(e,t){if(!e)throw new rr(t)}function lr(e,t){let n=0;for(const s of e)s===t&&n++;return n}function ur(e){return 1===e.length?e[0]:e}function cr(e){return Array.isArray(e)?e:[e]}function dr(e){const t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==t[0]?t:"private"+t}function hr(e){return e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,(e,t)=>t.toUpperCase())}let pr={};function fr(e){if(null==e)return null;const t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function mr(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach(e=>mr(e));else{const t=Object.keys(e);for(const n of t){const t=e[n];null!=t&&"object"==typeof t&&(Array.isArray(t)||"ndarray"!==t.type||"number"!=typeof t.value?mr(t):e[n]=t.value)}}}function gr(e,t={},n={},s="object",r=!1){if("string"==typeof e){const r=e;let a;if(r in n)a=n[r];else if(r in pr)a=pr[r];else if(a=t[r],null==a)throw new nr(`Unknown ${s}: ${e}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const a=e;if(null==a.className||null==a.config)throw new nr(`${s}: Improper config format: ${JSON.stringify(a)}.\n'className' and 'config' must set.`);const i=a.className;let o,l;if(i in n?[o,l]=n[i]:i in pr?[o,l]=pr.className:i in t&&([o,l]=t[i]),null==o)throw new nr(`Unknown ${s}: ${i}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const e={};for(const t of Object.keys(pr))e[t]=pr[t];for(const t of Object.keys(n))e[t]=n[t];a.config.customObjects=e;const t=Object.assign({},pr);for(const e of Object.keys(n))pr[e]=n[e];mr(a.config);const s=l(o,a.config,n,r);return pr=Object.assign({},t),s}{const e=Object.assign({},pr);for(const e of Object.keys(n))pr[e]=n[e];const t=new o(a.config);return pr=Object.assign({},e),t}}}function yr(e,t){return-1*function(e,t){return e<t?-1:e>t?1:0}(e,t)}function br(e){if(null==e)return e;const t=[];for(const n of e)-1===t.indexOf(n)&&t.push(n);return t}function xr(e){if(null==e)throw new nr(`Invalid value in obj: ${JSON.stringify(e)}`);for(const t in e)if(e.hasOwnProperty(t))return!1;return!0}function vr(e,t,n){if(null!=n&&e.indexOf(n)<0)throw new nr(`${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`)}function wr(e,t,n=0,s=1/0){return or(n>=0),or(s>=n),Array.isArray(e)&&e.length>=n&&e.length<=s&&e.every(e=>typeof e===t)}function kr(e,t){Array.isArray(e)?(h.util.assert(e.length>0,()=>`${t} is unexpectedly an empty array.`),e.forEach((e,n)=>kr(e,`element ${n+1} of ${t}`))):h.util.assert(Number.isInteger(e)&&e>0,()=>`Expected ${t} to be a positive integer, but got ${Tr(e)}.`)}function Tr(e){return null===e?"null":Array.isArray(e)?"["+e.map(e=>Tr(e)).join(",")+"]":"string"==typeof e?`"${e}"`:`${e}`}function Sr(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}let Nr=0;function Ir(){return Nr++}const Cr={};function Ar(e=""){return e in Cr||(Cr[e]=0),Cr[e]+=1,e+Cr[e].toString()}const Er=["channelsFirst","channelsLast"],$r=["nearest","bilinear"],Rr=["valid","same","causal"],_r=["max","avg"],Dr=["sum","mul","concat","ave"],Fr=new Map;function Or(e){vr(Er,"DataFormat",e)}function Mr(e){vr(Rr,"PaddingMode",e)}function zr(e){vr(_r,"PoolMode",e)}const Lr=[];function Pr(e,t){Lr.push(e);try{const e=t();return Lr.pop(),e}catch(e){throw Lr.pop(),e}}function Br(e){if(!Ur(e))throw new Error("Not a valid tensor name: '"+e+"'");return(0===Lr.length?"":Lr.join("/")+"/")+e}function Wr(e){if(!Ur(e))throw new Error("Not a valid tensor name: '"+e+"'");Fr.has(e)||Fr.set(e,0);const t=Fr.get(e);if(Fr.set(e,Fr.get(e)+1),t>0){const n=`${e}_${t}`;return Fr.set(n,1),n}return e}const Vr=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function Ur(e){return!!e.match(Vr)}function Gr(e){return e===parseInt(e.toString(),10)}function Hr(e,t,n){null==t&&(t=0),null==n&&(n=e.length);let s=1;for(let r=t;r<n;++r)s*=e[r];return s}function jr(e){if(0===e.length)return Number.NaN;let t=Number.POSITIVE_INFINITY;for(let n=0;n<e.length;n++){const s=e[n];s<t&&(t=s)}return t}function qr(e){if(0===e.length)return Number.NaN;let t=Number.NEGATIVE_INFINITY;for(let n=0;n<e.length;n++){const s=e[n];s>t&&(t=s)}return t}function Yr(e,t){if(t<e)throw new nr(`end (${t}) < begin (${e}) is forbidden.`);const n=[];for(let s=e;s<t;++s)n.push(s);return n}let Kr;function Xr(){return null==Kr&&(Kr=(0,h.backend)().epsilon()),Kr}function Zr(e,t){return h.cast(e,t)}function Qr(e,t=-1){const n=e.shape.slice();return t<0&&(t=n.length+t+1),n.splice(t,0,1),h.reshape(e,n)}function Jr(e,t,n){return(0,h.tidy)(()=>{switch(e.rank){case 1:return h.slice1d(e,t,n);case 2:return h.slice2d(e,[t,0],[n,e.shape[1]]);case 3:return h.slice3d(e,[t,0,0],[n,e.shape[1],e.shape[2]]);case 4:return h.slice4d(e,[t,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3]]);case 5:return h.slice(e,[t,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return h.slice(e,[t,0,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new nr(`sliceAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}})}function ea(e,t,n){return(0,h.tidy)(()=>{switch(e.rank){case 1:return h.slice1d(e,t,n);case 2:return h.slice2d(e,[0,t],[e.shape[0],n]);case 3:return h.slice3d(e,[0,0,t],[e.shape[0],e.shape[1],n]);case 4:return h.slice4d(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],n]);default:throw new nr(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}})}function ta(e,t,n,s){return(0,h.tidy)(()=>{switch(e.rank){case 1:return h.slice1d(e,t,n);case 2:switch(s){case 1:return Jr(e,t,n);case 2:return ea(e,t,n);default:throw new nr(`The axis is not within the rank of the tensor ${s}`)}case 3:switch(s){case 1:return Jr(e,t,n);case 2:return h.slice3d(e,[0,t,0],[e.shape[0],n,e.shape[2]]);case 3:return ea(e,t,n);default:throw new nr(`The axis is not within the rank of the tensor ${s}`)}case 4:switch(s){case 1:return Jr(e,t,n);case 2:return h.slice4d(e,[0,t,0,0],[e.shape[0],n,e.shape[2],e.shape[3]]);case 3:return h.slice4d(e,[0,0,t,0],[e.shape[0],e.shape[1],n,e.shape[3]]);case 4:return ea(e,t,n);default:throw new nr(`The axis is not within the rank of the tensor ${s}`)}default:throw new nr(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}})}function na(e,t=-1){let n;return t<0&&(n=e[0].rank,t=0!==n?n:0),t===e[0].rank&&(t=-1),h.concat(e,t)}function sa(e,t){switch(e.rank){case 1:return h.concat1d([e,t]);case 2:return h.concat2d([e,t],0);case 3:return h.concat3d([e,t],0);case 4:return h.concat4d([e,t],0);default:throw new nr(`concatAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}function ra(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new nr(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`);return h.tile(e,t)}function aa(e,t=0,n=1,s,r){return h.randomNormal(e,t,n,s,r)}function ia(e,t,n,s){if(e.rank<2||t.rank<2)throw new sr(`dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${t.shape}`);if(t.rank>=3&&e.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new sr(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = ${t.shape}`);if(2===e.rank&&2===t.rank){const r=!1,a=!1;return h.fused.matMul({a:e,b:t,transposeA:r,transposeB:a,bias:s?ua(e.rank,s,"channelsLast"):null,activation:n})}{const r=e.shape.slice(),a=r.pop();e=h.reshape(e,[-1,a]);const i=t.shape.slice(),o=i.pop(),l=i.pop(),u=[...i,o],c=Array.from({length:t.rank},(e,n)=>0===n?t.rank-2:n<=t.rank-2?n-1:n);t=h.reshape(h.transpose(t,c),[l,-1]);const d=[...r,...u],p=!1,f=!1;return h.reshape(h.fused.matMul({a:e,b:t,transposeA:p,transposeB:f,bias:s?ua(e.rank,s,"channelsLast"):null,activation:n}),d)}}function oa(e,t,n){return(0,h.tidy)(()=>(t=Array.isArray(t)?(0,h.tensor1d)(t,"int32"):h.cast(t,"int32"),h.gather(e,t,n)))}function la(e){return h.mul(e,e)}function ua(e,t,n){const s=t.shape;if(1!==t.rank&&t.rank!==e)throw new nr(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${e}`);if(5===e){if("channelsFirst"===n)return 1===s.length?h.reshape(t,[1,s[0],1,1,1]):h.reshape(t,[1,s[3],s[0],s[1],s[2]]);if("channelsLast"===n)return 1===s.length?h.reshape(t,[1,1,1,1,s[0]]):h.reshape(t,[1].concat(s))}else if(4===e){if("channelsFirst"===n)return 1===s.length?h.reshape(t,[1,s[0],1,1]):h.reshape(t,[1,s[2],s[0],s[1]]);if("channelsLast"===n)return 1===s.length?h.reshape(t,[1,1,1,s[0]]):h.reshape(t,[1].concat(s))}else if(3===e){if("channelsFirst"===n)return 1===s.length?h.reshape(t,[1,s[0],1]):h.reshape(t,[1,s[1],s[0]]);if("channelsLast"===n)return 1===s.length?h.reshape(t,[1,1,s[0]]):h.reshape(t,[1].concat(s))}else if(e<3)return t;throw new nr(`Unsupported input rank by biasAdd: ${t.rank}`)}function ca(e,t,n){return(0,h.tidy)(()=>(null==n&&(n="channelsLast"),Or(n),h.add(e,ua(e.rank,t,n))))}function da(e,t,n,s){return(0,h.tidy)(()=>h.dropout(e,t,n,s))}function ha(e,t,n=!1){return n?e():t()}const pa=["fanIn","fanOut","fanAvg"],fa=["normal","uniform","truncatedNormal"];class ma extends h.serialization.Serializable{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class ga extends ma{apply(e,t){return(0,h.zeros)(e,t)}}ga.className="Zeros",h.serialization.registerClass(ga);class ya extends ma{apply(e,t){return(0,h.ones)(e,t)}}ya.className="Ones",h.serialization.registerClass(ya);class ba extends ma{constructor(e){if(super(),"object"!=typeof e)throw new nr(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new nr(`config must have value set but got ${e}`);this.value=e.value}apply(e,t){return(0,h.tidy)(()=>(0,h.mul)((0,h.scalar)(this.value),(0,h.ones)(e,t)))}getConfig(){return{value:this.value}}}ba.className="Constant",h.serialization.registerClass(ba);class xa extends ma{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return(0,h.randomUniform)(e,this.minval,this.maxval,t,this.seed)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}xa.className="RandomUniform",h.serialization.registerClass(xa);class va extends ma{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new sr(`randomNormal does not support dType ${t}.`);return aa(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}va.className="RandomNormal",h.serialization.registerClass(va);class wa extends ma{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new sr(`truncatedNormal does not support dType ${t}.`);return(0,h.truncatedNormal)(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}wa.className="TruncatedNormal",h.serialization.registerClass(wa);class ka extends ma{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,t){return(0,h.tidy)(()=>{if(2!==e.length||e[0]!==e[1])throw new nr("Identity matrix initializer can only be used for 2D square matrices.");return(0,h.mul)(this.gain,(0,h.eye)(e[0]))})}getConfig(){return{gain:this.gain}}}ka.className="Identity",h.serialization.registerClass(ka);class Ta extends ma{constructor(e){if(super(),e.scale<0)throw new nr(`scale must be a positive float. Got: ${e.scale}`);var t;this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,t=this.mode,vr(pa,"FanMode",t),this.distribution=null==e.distribution?"normal":e.distribution,function(e){vr(fa,"Distribution",e)}(this.distribution),this.seed=e.seed}apply(e,t){const n=function(e,t="channelsLast"){let n,s;if(Or(t),2===e.length)n=e[0],s=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){const t=Hr(e,2);n=e[1]*t,s=e[0]*t}else if("channelsLast"===t){const t=Hr(e,0,e.length-2);n=e[e.length-2]*t,s=e[e.length-1]*t}}else{const t=Hr(e);n=Math.sqrt(t),s=Math.sqrt(t)}return[n,s]}(e),s=n[0],r=n[1];let a=this.scale;if("fanIn"===this.mode?a/=Math.max(1,s):"fanOut"===this.mode?a/=Math.max(1,r):a/=Math.max(1,(s+r)/2),"normal"===this.distribution){const n=Math.sqrt(a);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new sr(`${this.getClassName()} does not support dType ${t}.`);return(0,h.truncatedNormal)(e,0,n,t,this.seed)}{const n=Math.sqrt(3*a);return(0,h.randomUniform)(e,-n,n,t,this.seed)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}Ta.className="VarianceScaling",h.serialization.registerClass(Ta);class Sa extends Ta{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Ta.className}}Sa.className="GlorotUniform",h.serialization.registerClass(Sa);class Na extends Ta{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Ta.className}}Na.className="GlorotNormal",h.serialization.registerClass(Na);class Ia extends Ta{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Ta.className}}Ia.className="HeNormal",h.serialization.registerClass(Ia);class Ca extends Ta{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Ta.className}}Ca.className="HeUniform",h.serialization.registerClass(Ca);class Aa extends Ta{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Ta.className}}Aa.className="LeCunNormal",h.serialization.registerClass(Aa);class Ea extends Ta{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Ta.className}}Ea.className="LeCunUniform",h.serialization.registerClass(Ea);class $a extends ma{constructor(e){super(),this.DEFAULT_GAIN=1,this.ELEMENTS_WARN_SLOW=2e3,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed}apply(e,t){return(0,h.tidy)(()=>{if(e.length<2)throw new sr("Shape must be at least 2D.");if("int32"!==t&&"float32"!==t&&void 0!==t)throw new TypeError(`Unsupported data type ${t}.`);const n=h.util.sizeFromShape(e.slice(0,-1)),s=e[e.length-1],r=n*s;r>this.ELEMENTS_WARN_SLOW&&console.warn(`Orthogonal initializer is being called on a matrix with more than ${this.ELEMENTS_WARN_SLOW} (${r}) elements: Slowness may result.`);const a=aa([Math.max(s,n),Math.min(s,n)],0,1,t,this.seed),i=h.linalg.qr(a,!1);let o=i[0];const l=i[1].flatten().stridedSlice([0],[Math.min(s,n)*Math.min(s,n)],[Math.min(s,n)+1]);return o=(0,h.mul)(o,l.sign()),n<s&&(o=o.transpose()),(0,h.mul)((0,h.scalar)(this.gain),o.reshape(e))})}getConfig(){return{gain:this.gain,seed:this.seed}}}$a.className="Orthogonal",h.serialization.registerClass($a);const Ra={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function _a(e,t={}){return gr(e,h.serialization.SerializationMap.getMap().classNameMap,t,"initializer")}function Da(e){return fr(e)}function Fa(e){if("string"==typeof e){const t=e in Ra?Ra[e]:e;if("GlorotNormal"===t)return new Na;if("GlorotUniform"===t)return new Sa;if("HeNormal"===t)return new Ia;if("HeUniform"===t)return new Ca;if("LeCunNormal"===t)return new Aa;if("LeCunUniform"===t)return new Ea;{const e={};return e.className=t,e.config={},_a(e)}}return e instanceof ma?e:_a(e)}function Oa(e){return Array.isArray(e)&&Array.isArray(e[0])}function Ma(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function za(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new nr(`Expected Tensor length to be 1; got ${e.length}`);t=e[0]}else t=e;return t}function La(e){if(Array.isArray(e)&&Array.isArray(e[0])){if(1===e.length)return e[0];throw new nr(`Expected exactly 1 Shape; got ${e.length}`)}return e}function Pa(e){let t=0;for(const n of e)0===n.shape.length?t+=1:t+=n.shape.reduce((e,t)=>e*t);return t}const Ba="Variable";class Wa{constructor(e,t="float32",n=Ba,s=!0,r=null){this.dtype=null==t?"float32":t,this.shape=e.shape,this.id=Ir(),n=null==n?Ba:n,this.originalName=Br(n),this.name=Wr(this.originalName),this.trainable_=s,this.constraint=r,this.val=h.variable(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function Va(e){return e.map(e=>e.read())}function Ua(e){e.forEach(e=>{e[0].write(e[1])})}class Ga{constructor(e){this.dtype=e.dtype,this.shape=e.shape,null!=e.shape?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class Ha{constructor(e,t,n,s,r,a,i){this.dtype=e,this.shape=t,this.sourceLayer=n,this.inputs=s,this.callArgs=r,this.outputTensorIndex=i,this.id=Ir(),null!=a&&(this.originalName=Br(a),this.name=Wr(this.originalName)),this.rank=t.length}}let ja=0;class qa{constructor(e,t){this.callArgs=t,this.id=ja++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(const t of e.inboundLayers)null!=t&&t.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){const e=[];for(const t of this.inboundLayers)null!=t?e.push(t.name):e.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let Ya=0;class Ka extends h.serialization.Serializable{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=Ya++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){const e=this.getClassName();t=dr(e)+"_"+Ar(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let n=null;null!=e.batchSize&&(n=e.batchSize),t=[n].concat(e.inputShape)}this.batchInputShape=t;let n=e.dtype;null==n&&(n=e.inputDType),null==n&&(n="float32"),this.dtype=n}null!=e.weights?this.initialWeights=e.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new tr(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new nr(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return ur(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return ur(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new er(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new er(`Layer ${this.name} is not connected, no input to return.`);return ur(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new er(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new er(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return ur(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map(e=>e())}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach(t=>t.trainable=e),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter(e=>e.trainable):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter(e=>!e.trainable).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){const t=cr(e);if(null==this.inputSpec||0===this.inputSpec.length)return;const n=cr(this.inputSpec);if(t.length!==n.length)throw new nr(`Layer ${this.name} expects ${n.length} inputs, but it received ${t.length} input tensors. Input received: ${e}`);for(let e=0;e<t.length;e++){const s=t[e],r=n[e];if(null==r)continue;const a=s.rank;if(null!=r.ndim&&a!==r.ndim)throw new nr(`Input ${e} is incompatible with layer ${this.name}: expected ndim=${r.ndim}, found ndim=${a}`);if(null!=r.maxNDim&&a>r.maxNDim)throw new nr(`Input ${e} is incompatible with layer ${this.name}: expected max_ndim=${r.maxNDim}, found ndim=${a}`);if(null!=r.minNDim&&a<r.minNDim)throw new nr(`Input ${e} is incompatible with layer ${this.name}: expected min_ndim=${r.minNDim}, found ndim=${a}.`);if(null!=r.dtype&&s.dtype!==r.dtype)throw new nr(`Input ${e} is incompatible with layer ${this.name} : expected dtype=${r.dtype}, found dtype=${s.dtype}.`);if(r.axes){const t=s.shape;for(const n in r.axes){const s=Number(n),a=r.axes[n],i=s>=0?t[s]:t[t.length+s];if(null!=a&&-1===[a,null].indexOf(i))throw new nr(`Input ${e} is incompatible with layer ${this.name}: expected axis ${s} of input shape to have value ${a} but got shape ${t}.`)}}if(null!=r.shape)for(let t=0;t<r.shape.length;++t){const n=r.shape[t],a=s.shape[t];if(null!=n&&null!=a&&n!==a)throw new nr(`Input ${e} is incompatible with layer ${this.name}: expected shape=${r.shape}, found shape=${s.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();const n=cr(e),s=function(e){let t=!0;for(const n of cr(e))if(!(n instanceof Ha)){t=!1;break}return t}(e),r=function(e){let t=!0;for(const n of cr(e))if(n instanceof Ha){t=!1;break}return t}(e);if(s===r)throw new nr("Arguments to apply() must be all SymbolicTensors or all Tensors");return Pr(this.name,()=>{if(!this.built){this.assertInputCompatibility(e);const t=[];for(const n of cr(e))t.push(n.shape);this.build(ur(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&r&&(this._refCount=1)}if(this.assertInputCompatibility(e),r){let s=this.call(e,t);this.supportsMasking&&this.setMaskMetadata(e,s);const r=cr(s),a=[];for(let e of r)-1!==n.indexOf(e)&&(e=e.clone()),a.push(e);if(s=ur(a),null!=this.activityRegularizer)throw new sr("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}{const n=function(e){e=cr(e);const t=[];for(const n of e)t.push(n.shape);return ur(t)}(e),s=this.computeOutputShape(n);let r;const a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?n[0]:n),r=null!=s&&s.length>0&&Array.isArray(s[0])?s.map((n,s)=>new Ha(a,n,this,cr(e),t,this.name,s)):new Ha(a,s,this,cr(e),t,this.name),this.addInboundNode(e,r,null,null,n,s,t),this._refCount++,null!=this.activityRegularizer)throw new sr("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}})}warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach((n,s)=>{null!=n&&null!=e[s]&&e[s]!==n&&(t=!0)}),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new er(`The layer ${this.name} has never been called and thus has no defined output shape.`);const e=[];for(const t of this.inboundNodes){const n=JSON.stringify(t.outputShapes);-1===e.indexOf(n)&&e.push(n)}if(1===e.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new er(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new tr(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return Pa(this.weights)}build(e){this.built=!0}getWeights(e=!1){return Va(e?this.trainableWeights:this.weights)}setWeights(e){(0,h.tidy)(()=>{const t=this.weights;if(t.length!==e.length)throw new nr(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(0===t.length)return;const n=[],s=Va(t);for(let r=0;r<s.length;++r){const a=s[r],i=t[r],o=e[r];if(!h.util.arraysEqual(a.shape,o.shape))throw new nr(`Layer weight shape ${a.shape} not compatible with provided weight shape ${o.shape}`);n.push([i,o])}Ua(n)})}addWeight(e,t,n,s,r,a,i,o){if(-1!==this._addedWeightNames.indexOf(e))throw new nr(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(s=null!=o?o():Fa("zeros"));const l=s.apply(t,n),u=new Wa(l,n,e,a,i);return l.dispose(),null!=r&&this.addLoss(()=>r.apply(u.read())),null==a&&(a=!0),a?this._trainableWeights.push(u):this._nonTrainableWeights.push(u),u}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){null==e||Array.isArray(e)&&0===e.length||(e=cr(e),void 0!==this._losses&&null!==this._losses&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(null!=t){if(!Array.isArray(t))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);t.forEach(e=>{if(null!=e)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)})}return null}return t}setMaskMetadata(e,t,n){if(!this.supportsMasking)return;const s=this.computeMask(e,n),r=cr(t),a=cr(s);if(r.length!==a.length)throw new Error(`${this.name} outputs ${r.length} tensors but ${r.length} masks for those tensors`);for(let e=0;e<r.length;e++)r[e].kerasMask=a[e]}addInboundNode(e,t,n,s,r,a,i=null){const o=cr(e);t=cr(t),n=cr(n),s=cr(s),r=Ma(r),a=Ma(a);const l=[],u=[],c=[];for(const e of o)l.push(e.sourceLayer),u.push(e.nodeIndex),c.push(e.tensorIndex);new qa({outboundLayer:this,inboundLayers:l,nodeIndices:u,tensorIndices:c,inputTensors:o,outputTensors:t,inputMasks:n,outputMasks:s,inputShapes:r,outputShapes:a},i);for(let e=0;e<t.length;e++)t[e].sourceLayer=this,t[e].nodeIndex=this.inboundNodes.length-1,t[e].tensorIndex=e}getConfig(){const e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach(e=>e.dispose()),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return 0===--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}function Xa(e,t,n){if((null==t||null!=n&&n>0)&&(t=e.sourceLayer,n=e.nodeIndex),0===t.inboundNodes.length)return[e];{const e=t.inboundNodes[n];if(0===e.inboundLayers.length)return e.inputTensors;{const t=[];for(let n=0;n<e.inboundLayers.length;n++){const s=Xa(e.inputTensors[n],e.inboundLayers[n],e.nodeIndices[n]);for(const e of s)-1===t.indexOf(e)&&t.push(e)}return t}}}class Za extends Ka{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:Ar("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new nr("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t){if(null==e.inputShape)throw new nr("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new nr("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=e.dtype||"float32";this.batchInputShape=t,this.dtype=n,this.inputSpec=[{shape:t}];const s=new Ha(this.dtype,this.batchInputShape,this,[],{},this.name);s.nodeIndex=0,s.tensorIndex=0,new qa({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[s],outputTensors:[s],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new nr(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}function Qa(e){if(null==e.batchShape&&null==e.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new nr("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let n=e.dtype;return null==n&&(n="float32"),new Za({batchInputShape:t,name:e.name,dtype:n,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}Za.className="InputLayer",h.serialization.registerClass(Za);class Ja{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof Ja)for(const t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(const t of e)this.add(t.key,t.value)}}add(e,t,n){if(null!=this.id2Value[e.id])throw new nr(`Duplicate key: name=${e.name}, id=${e.id}`);return this.id2Value[e.id]=function(e,t){if(null==e.dtype||e.dtype===t.dtype)return t;try{return(0,h.cast)(t,e.dtype)}catch(n){throw new nr(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`)}}(e,t),this.name2Id[e.name]=e.id,null!=n&&(this.id2Mask[e.id]=n),this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return null!=this.id2Value[e.id]}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof Ha){if(null==this.id2Value[e.id])throw new nr(`Nonexistent key: ${e.name}`);return this.id2Value[e.id]}{const t=this.name2Id[e];if(null==t)throw new nr(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof Ha){if(null==this.id2Value[e.id])throw new nr(`Nonexistent key: ${e.name}`);return this.id2Mask[e.id]}{const t=this.name2Id[e];if(null==t)throw new nr(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){null!=this.id2Mask&&(0,h.dispose)(this.id2Mask)}}const ei=new ar,ti=new ar;function ni(e,t,n,s){const r=null!=n&&n.training,a=Array.isArray(e),i=a?e:[e],o=i.map(e=>e.name),l=[],u=t.names();for(const e of o)-1!==u.indexOf(e)?l.push(t.getValue(e)):l.push(null);null!=s&&(s.maxNumTensors=-1/0,s.minNumTensors=1/0);const c=o.join(",")+"|"+t.names().sort().join(",");let d,p=ei.get(c);if(null==p){const e=function(e,t){h.util.assert(null!=e&&e.length>0,()=>"Expected at least one fetch, got none");let n=[],s={};if(1===e.length){const r=ri(e[0],t);n=r.sorted,s=r.recipientMap}else{const r=new Set;for(const a of e){const{sorted:e,recipientMap:i}=ri(a,t);for(const t of e)r.has(t.name)||(n.push(t),r.add(t.name));for(const e in i)null==s[e]&&(s[e]=new Set),i[e].forEach(t=>s[e].add(t))}}return{sorted:n,recipientCounts:si(s)}}(i,t);p=e.sorted,d=e.recipientCounts,ei.put(c,p),ti.put(c,d)}d={},r||Object.assign(d,ti.get(c));const f=new Ja(t);for(let e=0;e<p.length;++e){if(null!=s){const e=(0,h.memory)().numTensors;e>s.maxNumTensors&&(s.maxNumTensors=e),e<s.minNumTensors&&(s.minNumTensors=e)}const a=p[e],i=a.sourceLayer;if(i instanceof Za)continue;const u=[],c=[],m=[];let g=!1;for(const e of a.inputs){const n=f.getValue(e),s=f.getMask(e);u.push(n),c.push(s),null!=s&&(g=!0),r||(d[e.name]--,0!==d[e.name]||t.hasKey(e)||-1!==o.indexOf(e.name)||n.isDisposed||!0===e.sourceLayer.stateful||m.push(n))}g&&((n=n||{}).mask=c[0]);const y=cr(i.apply(u,n));let b=null;i.supportsMasking&&(b=i.computeMask(u,c));const x=ai(a),v=Array.isArray(x)?x:[x];for(let e=0;e<v.length;++e){f.hasKey(v[e])||f.add(v[e],y[e],Array.isArray(b)?b[0]:b);const t=o.indexOf(v[e].name);-1!==t&&(l[t]=y[e])}r||(0,h.dispose)(m)}return f.disposeMasks(),a?l:l[0]}function si(e){const t={};for(const n in e)t[n]=e[n].size;return t}function ri(e,t){const n=new Set,s=[],r={};for(const e of t.names())n.add(e);const a=[],i=[];for(a.push(e);a.length>0;){const e=a[a.length-1];if(n.has(e.name)){a.pop();continue}const t=i[i.length-1]===a.length-1;if(0===e.inputs.length||t)a.pop(),s.push(e),n.add(e.name),t&&i.pop();else{i.push(a.length-1);for(const t of e.inputs)null==r[t.name]&&(r[t.name]=new Set),r[t.name].add(e.name),n.has(t.name)||a.push(t)}}return{sorted:s,recipientMap:r}}function ai(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let n=null;for(let t=0;t<e.sourceLayer.inboundNodes.length;++t)for(const s of e.sourceLayer.inboundNodes[t].outputTensors)if(s.id===e.id){n=t;break}t=e.sourceLayer.getOutputAt(n)}return t}function ii(e,t){return(0,h.tidy)(()=>h.sqrt(h.sum(h.mul(e,e),t,!0)))}(0,h.env)().registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES",()=>100,function(e){null!=ei&&ei.setMaxEntries(e),null!=ti&&ti.setMaxEntries(e)});class oi extends h.serialization.Serializable{getConfig(){return{}}}class li extends oi{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return(0,h.tidy)(()=>{const t=ii(e,this.axis),n=h.clipByValue(t,0,this.maxValue);return h.mul(e,h.div(n,h.add(Xr(),t)))})}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}li.className="MaxNorm",h.serialization.registerClass(li);class ui extends oi{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return(0,h.tidy)(()=>h.div(e,h.add(Xr(),ii(e,this.axis))))}getConfig(){return{axis:this.axis}}}ui.className="UnitNorm",h.serialization.registerClass(ui);class ci extends oi{apply(e){return h.relu(e)}}ci.className="NonNeg",h.serialization.registerClass(ci);class di extends oi{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return(0,h.tidy)(()=>{const t=ii(e,this.axis),n=h.add(h.mul(this.rate,h.clipByValue(t,this.minValue,this.maxValue)),h.mul(1-this.rate,t));return h.mul(e,h.div(n,h.add(Xr(),t)))})}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}di.className="MinMaxNorm",h.serialization.registerClass(di);const hi={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function pi(e){return fr(e)}function fi(e,t={}){return gr(e,h.serialization.SerializationMap.getMap().classNameMap,t,"constraint")}function mi(e){return null==e?null:"string"==typeof e?fi({className:e in hi?hi[e]:e,config:{}}):e instanceof oi?e:fi(e)}function gi(e){return new li(e)}function yi(e){return new ui(e)}function bi(){return new ci}function xi(e){return new di(e)}function vi(){return new ga}function wi(){return new ya}function ki(e){return new ba(e)}function Ti(e){return new xa(e)}function Si(e){return new va(e)}function Ni(e){return new wa(e)}function Ii(e){return new ka(e)}function Ci(e){return new Ta(e)}function Ai(e){return new Sa(e)}function Ei(e){return new Na(e)}function $i(e){return new Ia(e)}function Ri(e){return new Ca(e)}function _i(e){return new Aa(e)}function Di(e){return new Ea(e)}function Fi(e){return new $a(e)}async function Oi(e){if(null==e)return;const t=[],n=[],s=[];for(const r in e){const a=e[r];if("number"!=typeof a){const e=a;t.push(e.data()),n.push(r),s.push(e)}}if(t.length>0){const r=await Promise.all(t);for(let t=0;t<r.length;++t)e[n[t]]=r[t][0];(0,h.dispose)(s)}}function Mi(e){if(null!=e)for(const t in e){const n=e[t];"number"!=typeof n&&n.dispose()}}var zi;!function(e){e[e.SILENT=0]="SILENT",e[e.VERBOSE=1]="VERBOSE"}(zi||(zi={}));class Li{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class Pi{constructor(e,t=10){null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(const t of this.callbacks)t.setParams(e)}setModel(e){for(const t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochBegin(e,t)}async onEpochEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochEnd(e,t)}async onBatchBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchBegin(e,t)}async onBatchEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchEnd(e,t)}async onTrainBegin(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainBegin(e)}async onTrainEnd(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainEnd(e)}}class Bi extends Li{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){null==t&&(t={});const n=null==t.size?0:t.size;this.seen+=n;for(const e in t){const s=t[e];if("number"==typeof s)this.totals.hasOwnProperty(e)||(this.totals[e]=0),this.totals[e]=this.totals[e]+s*n;else{let t;e in this.totals?t=this.totals[e]:this.totals[e]=0;const r=(0,h.tidy)(()=>(0,h.add)(this.totals[e],(0,h.mul)(s,n)));this.totals[e]=r,null!=t&&t.dispose()}}}async onEpochEnd(e,t){if(null!=t)for(const e of this.params.metrics)null!=this.totals[e]&&("number"==typeof this.totals[e]?t[e]=this.totals[e]/this.seen:(0,h.tidy)(()=>{const n=(0,h.mul)((0,h.div)(1,this.seen),this.totals[e]);t[e]=n,this.totals[e].dispose(),(0,h.keep)(t[e])}))}}class Wi extends Li{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){null==t&&(t={}),this.epoch.push(e);for(const e in t)null==this.history[e]&&(this.history[e]=[]),this.history[e].push(t[e])}async syncData(){const e=[],t=[],n=[];for(const s in this.history){const r=this.history[s];for(let a=0;a<r.length;++a)if("number"!=typeof r[a]){const i=r[a];e.push(i.data()),t.push(s),n.push(a)}}const s=await Promise.all(e);for(let e=0;e<s.length;++e)this.history[t[e]][n[e]].dispose(),this.history[t[e]][n[e]]=s[e][0]}}class Vi extends Li{constructor(e,t){if(super(),this.currentEpoch=0,this.nowFunc=e.nowFunc,this.nextFrameFunc=e.nextFrameFunc||h.nextFrame,this.yieldEvery=t||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=e.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");h.util.isNumber(this.yieldEvery)&&(this.maybeWait=function(e,t,n){let s,r=null!=n?n():h.util.now();return(...a)=>{const i=null!=n?n():h.util.now();return i-r<t||(r=i,s=e(...a)),s}}(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,n){const s=[];null!=this.yield&&(await Oi(n),s.push(this.yield(e,t,n))),s.push(this.nextFrameFunc()),await Promise.all(s)}async onEpochBegin(e,t){this.currentEpoch=e,null!=this.epochBegin&&(await Oi(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){const n=[];null!=this.epochEnd&&(await Oi(t),n.push(this.epochEnd(e,t))),"epoch"===this.yieldEvery&&n.push(this.nextFrameFunc()),await Promise.all(n)}async onBatchBegin(e,t){null!=this.batchBegin&&(await Oi(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){const n=[];null!=this.batchEnd&&(await Oi(t),n.push(this.batchEnd(e,t))),"batch"===this.yieldEvery?n.push(this.nextFrameFunc()):h.util.isNumber(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(n)}async onTrainBegin(e){null!=this.trainBegin&&(await Oi(e),await this.trainBegin(e))}async onTrainEnd(e){null!=this.trainEnd&&(await Oi(e),await this.trainEnd(e))}}function Ui(e,t){return null==e&&(e={}),e instanceof Li?[e]:Array.isArray(e)&&e[0]instanceof Li?e:cr(e).map(e=>new Vi(e,t))}class Gi{constructor(){}static registerCallbackConstructor(e,t){h.util.assert(e>=0&&Number.isInteger(e),()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`),Gi.checkForDuplicate(t),null==Gi.constructors[e]&&(Gi.constructors[e]=[]),Gi.constructors[e].push(t)}static checkForDuplicate(e){for(const t in Gi.constructors)Gi.constructors[+t].forEach(t=>{if(t===e)throw new nr("Duplicate callback constructor.")})}static clear(){Gi.constructors={}}static createCallbacks(e){const t=[];for(const n in Gi.constructors){const s=+n;e>=s&&t.push(...Gi.constructors[s])}return t.map(e=>new e)}}function Hi(e,t,n,s,r,a,i,o,l){const u=new Wi,c=[new Bi,...Gi.createCallbacks(t)];null!=e&&c.push(...e),c.push(u);const d=new Pi(c);return d.setParams({epochs:n,initialEpoch:s,samples:r,steps:a,batchSize:i,verbose:t,doValidation:o,metrics:l}),{callbackList:d,history:u}}function ji(e,t={},n=!1){return gr(e,h.serialization.SerializationMap.getMap().classNameMap,t,"layer",n)}function qi(e,t){return(0,h.tidy)(()=>{"float32"!==e.dtype&&(e=h.cast(e,"float32"));const n=h.sum(la(e),t,!0),s=h.fill(n.shape,Xr()),r=h.sqrt(h.maximum(n,s));return h.div(e,r)})}function Yi(e,t){return(0,h.tidy)(()=>h.mean(la(h.sub(t,e)),-1))}function Ki(e,t){return(0,h.tidy)(()=>h.mean(h.abs(h.sub(t,e)),-1))}function Xi(e,t){return(0,h.tidy)(()=>{const n=h.sub(e,t),s=h.clipByValue(h.abs(e),Xr(),Number.MAX_VALUE),r=h.abs(h.div(n,s));return h.mul(100,h.mean(r,-1))})}function Zi(e,t,n=!1){return(0,h.tidy)(()=>{if(n)t=h.softmax(t);else{const e=h.sum(t,t.shape.length-1,!0);t=h.div(t,e)}return t=h.clipByValue(t,Xr(),1-Xr()),h.neg(h.sum(h.mul(h.cast(e,"float32"),h.log(t)),t.shape.length-1))})}function Qi(e,t,n=!1){return(0,h.tidy)(()=>{const s=h.cast(h.floor(function(e){const t=[Hr(e.shape)];return h.reshape(e,t)}(e)),"int32"),r=(t=h.clipByValue(t,Xr(),1-Xr())).shape;return Zi(h.reshape(h.oneHot(s,r[r.length-1]),r),t,n)})}function Ji(e,t){return(0,h.tidy)(()=>{let n;return n=h.clipByValue(t,Xr(),1-Xr()),n=h.log(h.div(n,h.sub(1,n))),h.mean(function(e,t){if(!h.util.arraysEqual(e.shape,t.shape))throw new nr(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`);return(0,h.tidy)(()=>{const n=h.relu(t),s=h.neg(h.abs(t));return h.add(h.sub(n,h.mul(t,e)),h.log1p(h.exp(s)))})}(e,n),-1)})}function eo(e,t){return(0,h.tidy)(()=>{const n=qi(e,-1),s=qi(t,-1),r=h.mul(n,s);return h.neg(h.sum(r,-1))})}Gi.constructors={};const to={meanSquaredError:Yi,meanAbsoluteError:Ki,meanAbsolutePercentageError:Xi,meanSquaredLogarithmicError:function(e,t){return(0,h.tidy)(()=>{const n=h.clipByValue(t,Xr(),Number.MAX_VALUE),s=h.log(h.add(1,n)),r=h.clipByValue(e,Xr(),Number.MAX_VALUE),a=h.log(h.add(1,r));return h.mean(la(h.sub(s,a)),-1)})},squaredHinge:function(e,t){return(0,h.tidy)(()=>{const n=h.maximum(0,h.sub(1,h.mul(e,t)));return h.mean(la(n),-1)})},hinge:function(e,t){return(0,h.tidy)(()=>{const n=h.maximum(0,h.sub(1,h.mul(e,t)));return h.mean(n,-1)})},categoricalHinge:function(e,t){return(0,h.tidy)(()=>{const n=h.sum(h.mul(e,t),-1),s=h.max(h.mul(h.sub(1,e),t),-1);return h.maximum(0,h.add(1,h.sub(s,n)))})},logcosh:function(e,t){return(0,h.tidy)(()=>{const n=Math.log(2),s=h.sub(t,e),r=h.sub(h.add(s,h.softplus(h.mul(-2,s))),n);return h.mean(r,-1)})},categoricalCrossentropy:Zi,sparseCategoricalCrossentropy:Qi,binaryCrossentropy:Ji,kullbackLeiblerDivergence:function(e,t){return(0,h.tidy)(()=>{const n=h.clipByValue(e,Xr(),1),s=h.clipByValue(t,Xr(),1);return h.sum(h.mul(e,h.log(h.div(n,s))),-1)})},poisson:function(e,t){return(0,h.tidy)(()=>{const n=h.log(h.add(Xr(),t));return h.mean(h.sub(t,h.mul(e,n)),-1)})},cosineProximity:eo};function no(e){if("string"==typeof e){if(e in to)return to[e];let t=`Unknown loss ${e}`;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new nr(t)}return e}function so(e,t){return(0,h.tidy)(()=>{const n=h.mul(.5,h.onesLike(t)),s=Zr(h.greater(t,n),e.dtype);return h.mean(h.equal(e,s),-1)})}function ro(e,t){return(0,h.tidy)(()=>Zr(h.equal(h.argMax(e,-1),h.argMax(t,-1)),"float32"))}function ao(e,t){return(0,h.tidy)(()=>h.cast(h.sum(h.logicalAnd(h.equal(e,1),h.equal(t,1))),"float32"))}function io(e,t){return(0,h.tidy)(()=>{const n=ao(e,t),s=function(e,t){return(0,h.tidy)(()=>h.cast(h.sum(h.logicalAnd(h.equal(e,0),h.equal(t,1))),"float32"))}(e,t),r=h.add(n,s);return h.cast(h.where(h.greater(r,0),h.div(n,r),0),"float32")})}function oo(e,t){return Ji(e,t)}function lo(e,t){return e.rank===t.rank&&(e=h.squeeze(e,[e.rank-1])),(t=h.argMax(t,-1)).dtype!==e.dtype&&(t=h.cast(t,e.dtype)),h.cast(h.equal(e,t),"float32")}const uo=Zi,co=Qi,ho={binaryAccuracy:so,categoricalAccuracy:ro,precision:io,categoricalCrossentropy:uo,sparseCategoricalCrossentropy:co,mse:Yi,MSE:Yi,mae:Ki,MAE:Ki,mape:Xi,MAPE:Xi,cosine:eo};function po(e){if("string"==typeof e&&e in ho)return ho[e];if("string"!=typeof e&&null!=e)return e;throw new nr(`Unknown metric ${e}`)}function fo(e){if(or(null!==e,`Unknown LossOrMetricFn ${e}`),"string"==typeof e)return e;{let t;for(const n of Object.keys(to))if(to[n]===e){t=n;break}if(void 0!==t)return t;for(const n of Object.keys(ho))if(ho[n]===e){t=n;break}return void 0!==t?t:e.name}}function mo(e,t,n=!1){if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!go(e))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(e);n.length>1048576&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function go(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const t=Object.keys(e);for(const n of t){if("string"!=typeof n)return!1;if(!go(e[n]))return!1}return!0}if(Array.isArray(e)){for(const t of e)if(!go(t))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}function yo(e,t,n=console.log){let s="";for(let n=0;n<e.length;++n)n>0&&(s=s.slice(0,s.length-1)+" "),s+=e[n],s=s.slice(0,t[n]),s+=" ".repeat(t[n]-s.length);n(s)}function bo(e,t,n){let s,r;try{r=e.inboundNodes.map(e=>JSON.stringify(e.inputShapes)).join(",")}catch(e){r="multiple"}try{s=JSON.stringify(e.outputShape)}catch(e){s="multiple"}yo([`${e.name} (${e.getClassName()})`,r,s,e.countParams().toString()],t,n)}function xo(e,t,n,s){let r,a;try{a=e.inboundNodes.map(e=>JSON.stringify(e.inputShapes)).join(",")}catch(e){a="multiple"}try{r=JSON.stringify(e.outputShape)}catch(e){r="multiple"}const i=[];for(const t of e.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(t)))for(let e=0;e<t.inboundLayers.length;++e){const n=t.inboundLayers[e].name,s=t.nodeIndices[e],r=t.tensorIndices[e];i.push(`${n}[${s}][${r}]`)}const o=e.name,l=e.getClassName(),u=0===i.length?"":i[0];yo([`${o} (${l})`,a,r,e.countParams().toString(),u],t,s);for(let e=1;e<i.length;++e)yo(["","","","",i[e]],t,s)}function vo(e,t,n){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof n}function wo(e,t){if(null===e)return null;if("string"==typeof e)return hr(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let r=0;r<s;++r){const s=e[r];vo(t,r,s)?n.push(s):n.push(wo(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n];if("name"===n&&"string"==typeof s)t[n]=s;else{const e=hr(n);t[e]=wo(s,e)}}return t}}function ko(e,t){if(null==e)return null;if("string"==typeof e)return dr(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let r=0;r<s;++r){const s=e[r];vo(t,r,s)?n.push(s):n.push(ko(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n];t[dr(n)]="name"!==n&&"className"!==n||"string"!=typeof s?ko(s,n):s}return t}}const To="4.22.0";class So extends Ka{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,null==this.name){const e=this.getClassName().toLowerCase();this.name=Ar(e)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(e.inputs)?this.inputs=e.inputs.slice():this.inputs=[e.inputs],Array.isArray(e.outputs)?this.outputs=e.outputs.slice():this.outputs=[e.outputs],br(this.inputs).length!==this.inputs.length)throw new nr(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map(e=>e.name)}`);br(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map(e=>e.name)}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const e of this.outputs){const t=e.sourceLayer,n=e.nodeIndex,s=e.tensorIndex;this.outputLayers.push(t),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(s)}for(const e of this.inputs){const t=e.sourceLayer,n=e.nodeIndex,s=e.tensorIndex;or(0===n,"input layer has >1 nodes"),or(0===s,"input layer has >1 tensors"),this.inputLayers.push(t),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(s)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t];if(!(n instanceof Za))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${t} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const e of this.outputLayers)this.outputNames.push(e.name);this.internalInputShapes=this.inputs.map(e=>e.shape),this.internalOutputShapes=this.outputs.map(e=>e.shape);const t={},n={},s={},r={},a={},i=[],o=(e,t,n,s,r,l)=>{null!=s&&null!=r&&null!=l||(s=e.sourceLayer,r=e.nodeIndex,l=e.tensorIndex);const u=s.inboundNodes[r];if(-1!==n.indexOf(u))throw new tr(`The tensor ${e.name} at layer "${s.name}" is part of a cycle.`);if(-1!==t.indexOf(u))return;this.containerNodes.add(So.nodeKey(s,r)),s.id in a||(a[s.id]=Object.keys(a).length),-1===n.indexOf(u)&&n.push(u);const c=u.inboundLayers.length;for(let e=0;e<c;e++){const s=u.inputTensors[e],r=u.inboundLayers[e],a=u.nodeIndices[e],i=u.tensorIndices[e];o(s,t,n,r,a,i)}for(t.push(u);n.indexOf(u)>=0;)n.splice(n.indexOf(u),1);i.push(u)},l=[],u=[];for(const e of this.outputs)o(e,l,u);const c=i.slice().reverse();for(const e of c){n[e.id]=e,e.id in t||(t[e.id]=0);let a=t[e.id];const i=null==s[e.outboundLayer.id]?0:s[e.outboundLayer.id];a=Math.max(a,i),s[e.outboundLayer.id]=a,r[e.outboundLayer.id]=e.outboundLayer,t[e.id]=a;for(let s=0;s<e.inboundLayers.length;s++){const r=e.inboundLayers[s],i=e.nodeIndices[s],o=r.inboundNodes[i],l=null==t[o.id]?0:t[o.id];t[o.id]=Math.max(a+1,l),n[o.id]=o}}const d={};for(const e in t){const s=t[e];s in d||(d[s]=[]),d[s].push(n[e])}const h={};for(const e in s){const t=s[e];t in h||(h[t]=[]),h[t].push(r[e])}let p=Object.keys(h).map(e=>parseInt(e,10)).sort(yr);this.layers=[];for(const e of p){const t=h[e];t.sort((e,t)=>{const n=a[e.id],s=a[t.id];return n<s?-1:n>s?1:0});for(const e of t)e instanceof So&&this.internalContainerRefs.push(e),this.layers.push(e)}this.layersByDepth=h,p=Object.keys(d).map(e=>parseInt(e,10)).sort(yr);const f=this.inputs.slice(),m=[];for(const e of p)for(const t of d[e]){const e=t.outboundLayer;if(null!=e){for(const n of t.inputTensors)if(-1===f.indexOf(n))throw new tr(`Graph disconnected: cannot obtain value for tensor ${n} at layer "${e.name}". The following previous layers were accessed without issue: ${m}`);for(const e of t.outputTensors)f.push(e);m.push(e.name)}}this.nodesByDepth=d;const g=this.layers.map(e=>e.name);for(const e of g){const t=g.filter(t=>t===e).length;if(1!==t)throw new tr(`The name "${e}" is used ${t} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new qa({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map(e=>null),outputMasks:this.outputs.map(e=>null),inputShapes:this.inputs.map(e=>e.shape),outputShapes:this.outputs.map(e=>e.shape)}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const e={refCountAfterDispose:null,numDisposedVariables:0};if(0===--this._refCount){for(const t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(const t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach(t=>{t._trainableWeights.forEach(t=>t.trainable=e)}),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new nr("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(const t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.layers)t.push(...e.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){const n={};let s=0;const r=(e=>{const t=Object.keys(e);if(0===t.length)return!1;const n=t[0].split("/");return!isNaN(parseInt(n[n.length-1],10))})(e);r&&this.parseWeights(e);for(const e of this.layers)for(const[t,a]of e.weights.entries()){const e=r?`${a.name.split("/").slice(0,-1).join("/")+"/"}${t}`:a.originalName;if(null!=n[e])throw new nr(`Duplicate weight name: ${e}`);n[e]=a,s++}const a=[];for(const s in e){let r=s;if(null==n[s]){const e=s.split("/");r=e.slice(0,-2).concat([e[e.length-1]]).join("/")}if(null!=n[r])a.push([n[r],e[s]]);else if(t)throw new nr(`Provided weight data has no target variable: ${s}`);delete n[r]}if(t){const e=[];for(const t in n)e.push(t);if(e.length>0)throw new nr(`${e.length} of ${s} weights are not set: ${e}`)}Ua(a)}parseWeights(e){for(const t in Object.keys(e)){const n=t.split("/"),s=["vars","layer_checkpoint_dependencies"],r=n.map(e=>e.startsWith("_")?e.slice(1):e).filter(e=>!s.includes(e)).join("/");r!==t&&(e[r]=e[t],delete e[t])}}updatedConfig(){const e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion=`tfjs-layers ${To}`,t.backend="TensorFlow.js",t}toJSON(e,t=!0){const n=ko(this.updatedConfig());return t?JSON.stringify(n):n}call(e,t){return(0,h.tidy)(()=>{e=cr(e);const n=new Ja;for(let t=0;t<this.inputs.length;++t)n.add(this.inputs[t],e[t]);return ni(this.outputs,n,t)})}computeMask(e,t){return(0,h.tidy)(()=>{let n;return e=cr(e),n=null==t?ir(null,e.length):cr(t),this.runInternalGraph(e,n)[1]})}computeOutputShape(e){const t=Ma(e);if(t.length!==this.inputLayers.length)throw new nr(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let e=0;e<t.length;e++){const s=this.inputLayers[e],r=t[e];n[s.name+"_0_0"]=r}const s=Object.keys(this.nodesByDepth).map(e=>parseInt(e,10)).sort(yr);if(s.length>1)for(const e of s){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer;if(-1!==this.inputLayers.map(e=>e.id).indexOf(t.id))continue;const s=[];for(let t=0;t<e.inboundLayers.length;t++){const r=e.inboundLayers[t],a=e.nodeIndices[t],i=e.tensorIndices[t],o=n[`${r.name}_${a}_${i}`];s.push(o)}const r=Ma(t.computeOutputShape(ur(s))),a=t.inboundNodes.indexOf(e);for(let e=0;e<r.length;e++)n[`${t.name}_${a}_${e}`]=r[e]}}const r=[],a=[];for(let e=0;e<this.outputLayers.length;e++){const t=this.outputLayers[e],n=this.outputLayersNodeIndices[e],s=this.outputLayersTensorIndices[e],r=`${t.name}_${n}_${s}`;a.push(r)}for(let e=0;e<a.length;e++){const t=a[e];or(t in n),r.push(n[t])}return ur(r)}runInternalGraph(e,t){null==t&&(t=ir(null,e.length));const n={};for(let s=0;s<this.inputs.length;++s){const r=this.inputs[s],a=e[s],i=t[s];n[r.id]=[a,i]}const s=Object.keys(this.nodesByDepth).map(e=>parseInt(e,10)).sort(yr);for(const e of s){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer,s=e.inputTensors,r=e.outputTensors,a=new Array;for(const e of s)e.id in n&&a.push(n[e.id]);if(a.length===s.length){let s,i,o,l,u={};if(null!=e.callArgs&&(u=e.callArgs),1===a.length){const[e,n]=a[0];null==u.mask&&(u.mask=n),o=cr(t.call(e,u)),l=cr(t.computeMask(e,n)),s=[e],i=[n]}else s=a.map(e=>e[0]),i=a.map(e=>e[1]),null==u.mask&&(u.mask=i),o=cr(t.call(s,u)),l=cr(t.computeMask(s,i));if(t.activityRegularizer)throw new sr("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let e=0;e<r.length;++e){const t=r[e],s=o[e],a=l[e];n[t.id]=[s,a]}}}}const r=[],a=[],i=[];for(const e of this.outputs){or(e.id in n,`Could not compute output ${e.name} : ${e.id}`);const[t,s]=n[e.id];i.push(t.shape),r.push(t),a.push(s)}return[r,a,i]}buildNodeConversionMap(e){const t={};let n;for(const e of this.layers){n=e instanceof So?1:0;for(let s=0;s<e.inboundNodes.length;s++){const r=So.nodeKey(e,s);this.containerNodes.has(r)&&(t[r]=n,n+=1)}}return t}getLayer(e,t){if(null!=t)return this.findLayer(t);if(null==e)throw new nr("Provide either a layer name or layer index");if("number"==typeof e)return this.findLayer(e);for(const t of this.layers)if(t.name===e)return t;throw new nr(`No such layer: ${e}`)}findLayer(e){if(this.layers.length<=e)throw new nr(`Was asked to retrieve layer at index ${e}, but model only has ${this.layers.length} layer(s).`);return this.layers[e]}calculateLosses(){return(0,h.tidy)(()=>{const e=[];for(const t of this.layers)for(let n=0;n<t.inboundNodes.length;++n){const s=So.nodeKey(t,n);this.containerNodes.has(s)&&e.push(...t.calculateLosses())}return e})}getConfig(){const e={name:this.name},t=this.buildNodeConversionMap(this.layers),n=[];for(const e of this.layers){const s=e.getClassName(),r=e.getConfig(),a=[];for(let n=0;n<e.inboundNodes.length;n++){const s=e.inboundNodes[n],r=So.nodeKey(e,n);let i={};if(this.containerNodes.has(r)){if(s.callArgs)try{JSON.stringify(s.callArgs),i=s.callArgs}catch(t){console.warn(`Layer ${e.name} was passed non-serializable keyword arguments: ${s.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),i={}}if(s.inboundLayers.length>0){const e=[];for(let n=0;n<s.inboundLayers.length;n++){const r=s.inboundLayers[n],a=s.nodeIndices[n],o=s.tensorIndices[n];let l=t[So.nodeKey(r,a)];null==l&&(l=0),e.push([r.name,l,o,i])}a.push(e)}}}const i={};i.name=e.name,i.className=s,i.config=r,i.inboundNodes=a,n.push(i)}e.layers=n;const s=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e],r=this.inputLayersNodeIndices[e],a=So.nodeKey(n,r);if(!this.containerNodes.has(a))continue;let i=t[a];null==i&&(i=0);const o=this.inputLayersTensorIndices[e];s.push([n.name,i,o])}e.inputLayers=s;const r=[];for(let e=0;e<this.outputLayers.length;e++){const n=this.outputLayers[e],s=this.outputLayersNodeIndices[e],a=So.nodeKey(n,s);if(!this.containerNodes.has(a))continue;let i=t[a];null==i&&(i=0);const o=this.outputLayersTensorIndices[e];r.push([n.name,i,o])}return e.outputLayers=r,e}static fromConfig(e,t,n={},s=!1){const r={},a={};function i(e,t){e.name in a?a[e.name].push(t):a[e.name]=[t]}function o(e,t){const n=[];let s;for(const a of t){const o=a[0],l=a[1],u=a[2];if(s=null==a[3]?{}:a[3],!(o in r))return void i(e,t);const c=r[o];if(c.inboundNodes.length<=l)return void i(e,t);const d=c.inboundNodes[l];n.push(d.outputTensors[u])}n.length>0&&e.apply(ur(n),s)}function l(e){const n=e.name,a=ji(e,null!=t.customObjects?t.customObjects:{});a.setFastWeightInitDuringBuild(s),r[n]=a,e.inboundNodes.forEach(e=>{if(!(e instanceof Array))throw new nr(`Corrupted configuration, expected array for nodeData: ${e}`);i(a,e)})}const u=t.name,c=t.layers;for(const e of c)l(e);for(;!xr(a);)for(const e of c){const t=r[e.name];if(t.name in a){const e=a[t.name];delete a[t.name];for(const n of e)o(t,n)}}const d=[],h=[],p=t.inputLayers;for(const e of p){const t=e[0],n=e[1],s=e[2];or(t in r);const a=r[t].inboundNodes[n].outputTensors;d.push(a[s])}const f=t.outputLayers;for(const e of f){const t=e[0],n=e[1],s=e[2];or(t in r);const a=r[t].inboundNodes[n].outputTensors;h.push(a[s])}return new e({inputs:d,outputs:h,name:u})}get stateful(){if(this._stateful)throw new nr("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const e of this.layers)if(e.stateful)return!0;return!1}resetStates(){(0,h.tidy)(()=>{this.layers.forEach(e=>{e.stateful&&e.resetStates()})})}}function No(e,t){return function(e,t,n){const s=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map(e=>null);if(1===s)return Array.isArray(e)&&1===e.length?e:"object"==typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==s)throw new Error(`Provided ${n} is an array of ${e.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){const n=[];return t.forEach(t=>{t in e?n.push(e[t]):n.push(null)}),n}throw new Error(`The model has multiple (${s}) outputs, so ${n} must be either an array with ${s} elements or an object with ${t} keys. Provided ${n} not understood: ${JSON.stringify(e)}`)}(e,t,"classWeight")}async function Io(e,t,n,s){if(null!=t||null!=s)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const t=(0,h.tidy)(()=>{if(1===e.shape.length)return(0,h.clone)(e);if(2===e.shape.length){if(e.shape[1]>1){const t=1;return(0,h.argMax)(e,t)}if(1===e.shape[1])return(0,h.reshape)(e,[e.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)}),s=Array.from(await t.data());(0,h.dispose)(t);const r=[];return s.forEach(e=>{if(null==n[e])throw new Error(`classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`);r.push(n[e])}),(0,h.tensor1d)(r,"float32")}return null}function Co(e,t){return(0,h.mul)(e,t)}function Ao(e,t){let n,s;const r=t;n=r.xs,s=r.ys,h.util.assert(null!=n&&null!=s,()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`);const a=Eo("input",e.inputNames,n),i=Eo("output",e.outputNames,s),o=a[0].shape[0];h.util.assert(a.length===e.inputs.length,()=>`LayersModel has ${e.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: ${JSON.stringify(e.inputNames)})`),h.util.assert(i.length===e.outputs.length,()=>`LayersModel has ${e.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: ${JSON.stringify(e.outputNames)})`);for(let t=0;t<a.length;t++)h.util.assert(a[t].shape[0]===o,()=>`Batch size mismatch: input ${e.inputNames[t]} has ${a[t].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`);for(let t=0;t<i.length;t++)h.util.assert(i[t].shape[0]===o,()=>`Batch size mismatch: output ${e.outputNames[t]} has ${i[t].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`);return{xs:a,ys:i}}function Eo(e,t,n){if(n instanceof h.Tensor)return[n];if(Array.isArray(n))return h.util.assert(n.length===t.length,()=>`Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`),n;{const s=[];for(const r of t){if(null==n[r])throw new nr(`The feature data generated by the dataset lacks the required ${e} key '${r}'.`);s.push(n[r])}return s}}function $o(e){return"function"==typeof e.iterator}function Ro(e){h.util.assert(e>0&&Number.isInteger(e),()=>`batchSize is required to be a positive integer, but got ${e}`)}function _o(e,t,n){return null==e?[null]:Array.isArray(e)?e.map(e=>Jr(e,t,n-t)):Jr(e,t,n-t)}function Do(e,t){return h.tidy(()=>null==e?null:Array.isArray(e)?e.map(e=>Do(e,t)):oa(e,"int32"===t.dtype?t:h.cast(t,"int32")))}function Fo(e,t){const n=[];let s=0,r=null;for(;s<e;)r=s+t,r>=e&&(r=e),n.push([s,r]),s=r;return n}function Oo(e){const t=[];e instanceof h.Tensor&&(e=[e]);for(let n=0;n<e.length;++n){const s=e[n];if(1===s.rank)t.push(Qr(s,1));else{if(0===s.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(s)}}return t}function Mo(e,t){if(null==e)return;const n=[];if(t instanceof h.Tensor)n.push(t.id);else if(Array.isArray(t))t.forEach(e=>n.push(e.id));else if(null!=t)for(const e in t){const s=t[e];n.push(s.id)}const s=[];if(e instanceof h.Tensor)-1===n.indexOf(e.id)&&s.push(e);else if(Array.isArray(e))e.forEach(e=>{-1===n.indexOf(e.id)&&s.push(e)});else if(null!=e)for(const t in e){const r=e[t];-1===n.indexOf(r.id)&&s.push(r)}s.forEach(e=>{e.isDisposed||e.dispose()})}function zo(e){return Array.isArray(e)}function Lo(e){return!function(e){return e instanceof h.Tensor}(e)&&!zo(e)}function Po(e,t,n,s=!0,r=""){if(null==t||0===t.length){if(null!=e){let t=!1;if(zo(e)&&e.length>0)t=!0;else if(Lo(e)){for(const n in e)if(e.hasOwnProperty(n)){t=!0;break}}else t=!0;if(t)throw new nr(`Error when checking model ${r} expected no data, but got ${e}`)}return[]}if(null==e)return t.map(e=>null);let a;if(Lo(e)){a=[];for(const n of t){if(null==e[n])throw new nr(`No data provided for "${n}". Need data for each key in: ${t}`);a.push(e[n])}}else if(zo(e)){if(e.length!==t.length)throw new nr(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${e}`);a=e}else{if(t.length>1)throw new nr(`The model ${r} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${e.shape}`);a=[e]}if(a=Oo(a),null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=a[e];if(i.shape.length!==n[e].length)throw new nr(`Error when checking ${r}: expected ${t[e]} to have ${n[e].length} dimension(s). but got array with shape ${i.shape}`);for(let t=0;t<n[e].length;++t){if(0===t&&!s)continue;const a=i.shape[t],o=n[e][t];if(null!=o&&o>=0&&a!==o)throw new nr(`${r} expected a batch of elements where each example has shape [${n[e].slice(1,n[e].length)}] (i.e.,tensor shape [*,${n[e].slice(1,n[e].length)}]) but the ${r} received an input with ${i.shape[0]} examples, each with shape [${i.shape.slice(1,i.shape.length)}] (tensor shape [${i.shape}])`)}}return a}function Bo(e,t,n,s=!0,r=""){let a;if(Array.isArray(e)){if(e.length!==t.length)throw new nr(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`);a=e}else{if(t.length>1)throw new nr(`The model expects ${t.length} ${r} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(e.shape)}.`);a=[e]}if(null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=a[e];if(i.shape.length!==n[e].length)throw new nr(`Error when checking ${r}: expected ${t[e]} to have ${n[e].length} dimension(s), but got array with shape ${JSON.stringify(i.shape)}`);for(let a=0;a<n[e].length;++a){if(0===a&&!s)continue;const o=i.shape[a],l=n[e][a];if(null!=l&&l!==o)throw new nr(`Error when checking ${r}: expected ${t[e]} to have shape ${JSON.stringify(n[e])} but got array with shape ${JSON.stringify(i.shape)}.`)}}}class Wo extends So{constructor(e){super(e),this.isTraining=!1}summary(e,t,n=console.log){if(!this.built)throw new nr("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");!function(e,t,n,s=console.log){const r=function(e){let t=!0;const n=[],s=[];for(const t in e.nodesByDepth)n.push(e.nodesByDepth[t]);for(const e of n){if(e.length>1||1===e.length&&e[0].inboundLayers.length>1){t=!1;break}s.push(...e)}if(t)for(const n of e.layers){let e=!1;for(const r of n.inboundNodes)if(-1!==s.indexOf(r)){if(e){t=!1;break}e=!0}if(!t)break}return t}(e),a=["Layer (type)","Input Shape","Output shape","Param #"];let i;if(r?(t=t||90,n=n||[.32,.61,.89,1]):(t=t||115,n=n||[.24,.48,.7,.8,1]),n[n.length-1]<=1&&(n=n.map(e=>Math.floor(t*e))),!r){a.push("Receives inputs"),i=[];for(const t in e.nodesByDepth)i.push(...e.nodesByDepth[t])}s("_".repeat(t)),yo(a,n,s),s("=".repeat(t));const o=e.layers;for(let e=0;e<o.length;++e)r?bo(o[e],n,s):xo(o[e],n,i,s),s((e===o.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();const l=function(e){let t;return t=null!=e.collectedTrainableWeights?Pa(e.collectedTrainableWeights):Pa(e.trainableWeights),t}(e),u=Pa(e.nonTrainableWeights);s(`Total params: ${l+u}`),s(`Trainable params: ${l}`),s(`Non-trainable params: ${u}`),s("_".repeat(t))}(this,e,t,n)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function(e){const t={Adagrad:()=>h.train.adagrad(.01),Adadelta:()=>h.train.adadelta(1,.95,Xr()),Adam:()=>h.train.adam(.001,.9,.999,Xr()),Adamax:()=>h.train.adamax(.002,.9,.999,Xr(),0),RMSProp:()=>h.train.rmsprop(.001,.9,0,Xr()),SGD:()=>h.train.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new nr(`Unknown Optimizer ${e}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof h.Optimizer))throw new nr("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new nr(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);const n=e.loss;t=n.map(e=>no(e))}else{const n=no(e.loss);this.outputs.forEach(e=>{t.push(n)})}else{e.loss=e.loss;for(const t in e.loss)if(-1===this.outputNames.indexOf(t))throw new nr(`Unknown entry in loss dictionary: "${t}". Only expected the following keys: ${this.outputNames}`);for(const n of this.outputNames)null==e.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),t.push(no(e.loss[n]))}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let e=0;e<this.outputs.length;++e){const t=this.internalOutputShapes[e],n=this.outputNames[e];this.feedOutputNames.push(n),this.feedOutputShapes.push(t),this.feedLossFns.push(this.lossFunctions[e])}const n=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],Pr("loss",()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;const t=this.lossFunctions[e];this.outputs.length>1&&(this.metricsTensors.push([t,e]),this.metricsNames.push(this.outputNames[e]+"_loss"))}});const s=function(e,t){if(null==e||Array.isArray(e)&&0===e.length)return t.map(e=>[]);let n;if("string"==typeof e||"function"==typeof e)n=[e];else{if(!Array.isArray(e)&&"object"!=typeof e)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${e}`);n=e}if(Array.isArray(n))return t.map(e=>n);{const e=[];for(const s of t){let t=n.hasOwnProperty(s)?n[s]:[];Array.isArray(t)||(t=[t]),e.push(t)}return e}}(e.metrics,this.outputNames),r=(e,t,n)=>{this.outputNames.length>1&&(t=this.outputNames[e]+"_"+t),this.metricsNames.push(t),this.metricsTensors.push([n,e])};Pr("metric",()=>{for(let e=0;e<this.outputs.length;++e)-1===n.indexOf(e)&&(t=>{let n,s,a;for(const i of t){if("string"==typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){const t=this.internalOutputShapes[e];let r;1===t[t.length-1]||this.lossFunctions[e]===Ji?-1!==["accuracy","acc"].indexOf(i)?s=so:-1!==["crossentropy","ce"].indexOf(i)&&(s=oo):this.lossFunctions[e]===Qi?-1!==["accuracy","acc"].indexOf(i)?s=lo:-1!==["crossentropy","ce"].indexOf(i)&&(s=co):-1!==["accuracy","acc"].indexOf(i)?s=ro:-1!==["crossentropy","ce"].indexOf(i)&&(s=uo),-1!==["accuracy","acc"].indexOf(i)?r="acc":-1!==["crossentropy","ce"].indexOf(i)&&(r="ce"),a=s,n=""+r}else{const e=po(i);a=e,n=""+fo(i)}let t;Pr(n,()=>{t=a}),r(e,n,t)}})(s[e])}),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,n={}){const s=null==n.batchSize?32:n.batchSize;Ro(s);const r=this.standardizeUserDataXY(e,t,!0,s);try{const e=r[0].concat(r[1]);this.makeTestFunction();const t=this.testFunction;return ur(this.testLoop(t,e,s,n.verbose,n.steps))}finally{Mo(r[0],e),Mo(r[1],t)}}async evaluateDataset(e,t){return this.makeTestFunction(),async function(e,t,n){const s=null!=(n=n||{}).batches,r=e.testFunction;let a=[];if(n.verbose>0)throw new sr("Verbose mode is not implemented yet.");h.util.assert(!s||n.batches>0&&Number.isInteger(n.batches),()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(n.batches)}`);const i="function"==typeof t.next?t:await t.iterator();let o=0,l=0;for(;!s||l<n.batches;){const t=await i.next();if(a=h.tidy(()=>{if(t.value){const{xs:n,ys:s}=Ao(e,t.value),i=n.concat(s),u=h.tidy(()=>r(i));if(h.dispose(i),0===l)for(let e=0;e<u.length;++e)a.push((0,h.scalar)(0));const c=i[0].shape[0];for(let e=0;e<u.length;++e){const t=u[e],n=a[e];a[e]=h.tidy(()=>h.add(a[e],h.mul(c,t))),l>0&&h.dispose(n)}h.dispose(u),o+=c,++l}return a}),t.done){s&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let e=0;e<a.length;++e){const t=a[e];a[e]=h.div(a[e],o),h.dispose(t)}return ur(a)}(this,e,t)}checkNumSamples(e,t,n,s="steps"){let r;if(null!=n){if(r=null,null!=t)throw new nr(`If ${s} is set, batchSize must be null or undefined.Got batchSize = ${t}`)}else{if(null==e)throw new nr(`Either the input data should have a defined shape, or ${s} shoud be specified.`);r=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return r}execute(e,t){if(Array.isArray(t)&&0===t.length)throw new nr("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(t),s=n?t:[t],r=this.retrieveSymbolicTensors(s),a=new Ja;if(e instanceof h.Tensor&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new nr(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let t=0;t<this.inputs.length;++t)a.add(this.inputs[t],e[t])}else for(const t of this.inputs){const n=e[t.name];if(null==n)throw new nr(`No value is provided for the model's input ${t.name}`);a.add(t,n)}const i=ni(r,a);return n?i:i[0]}retrieveSymbolicTensors(e){const t=ir(null,e.length);let n=e.length;for(const s of this.layers){const r=Array.isArray(s.output)?s.output:[s.output],a=r.map(e=>e.name);for(let s=0;s<e.length;++s){const i=a.indexOf(e[s]);if(-1!==i&&(t[s]=r[i],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw t.forEach((t,s)=>{null==t&&n.push(e[s])}),new nr(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return t}predictLoop(e,t=32,n=!1){return h.tidy(()=>{const s=this.checkNumSamples(e);if(n)throw new sr("Verbose predictLoop() is not implemented yet.");const r=Fo(s,t),a=this.outputs.map(e=>[]);for(let t=0;t<r.length;++t)h.tidy(()=>{const n=r[t][0],s=r[t][1],a=_o(e,n,s),i=[];if(Array.isArray(a))for(let e=0;e<a.length;++e)i.push({key:this.inputs[e],value:a[e]});else i.push({key:this.inputs[0],value:a});const o=new Ja(i);return ni(this.outputs,o)}).forEach((e,t)=>a[t].push(e));return ur(a.map(e=>h.concat(e,0)))})}predict(e,t={}){const n=Oo(e);Bo(n,this.inputNames,this.feedInputShapes,!1);try{const e=null==t.batchSize?32:t.batchSize;return Ro(e),this.predictLoop(n,e)}finally{Mo(n,e)}}predictOnBatch(e){Bo(e,this.inputNames,this.feedInputShapes,!0);const t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,n=!0,s){if(null==this.optimizer_)throw new tr("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const r=[];for(let e=0;e<this.feedOutputShapes.length;++e){const t=this.feedOutputShapes[e];this.feedLossFns[e]===Qi?r.push(t.slice(0,t.length-1).concat([1])):r.push(t)}if(function(e,t){const n=br(e.map(e=>e.shape[0]));n.sort();const s=br(t.map(e=>e.shape[0]));if(s.sort(),n.length>1)throw new nr(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map(e=>e.shape))}`);if(s.length>1)throw new nr(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map(e=>e.shape))}`);if(n.length>0&&s.length>0&&!h.util.arraysEqual(n,s))throw new nr(`Input Tensors should have the same number of samples as target Tensors. Found ${n[0]} input sample(s) and ${s[0]} target sample(s).`)}(e=Po(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=Po(t,this.feedOutputNames,r,!1,"target")),function(e,t,n){const s=[Yi,Ji,Zi];for(let r=0;r<e.length;++r){const a=e[r],i=t[r],o=n[r];if(null!=i){if(i===Zi&&1===a.shape[a.shape.length-1])throw new nr(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==s.indexOf(i)){const e=a.shape.slice(1),t=o.slice(1);for(let n=0;n<e.length;++n){const s=e[n],r=t[n];if(null!=r&&s!==r)throw new nr(`A target Tensor with shape ${a.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=s&&s>0&&e[0].shape[0]%s!==0)throw new nr(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${s}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,n,s,r=!0,a){const[i,o]=this.standardizeUserDataXY(e,t,r,a);if(null!=n)throw new Error("sample weight is not supported yet.");let l=null;if(null!=s){const e=No(s,this.outputNames);l=[];for(let t=0;t<e.length;++t)l.push(await Io(o[t],null,e[t]))}return[i,o,l]}testLoop(e,t,n,s=0,r){return h.tidy(()=>{const a=this.checkNumSamples(t,n,r,"steps"),i=[];if(s>0)throw new sr("Verbose mode is not implemented yet.");if(null!=r)throw new sr("steps mode in testLoop() is not implemented yet");{const s=Fo(a,n),r=(0,h.tensor1d)(Yr(0,a));for(let n=0;n<s.length;++n){const a=s[n][0],o=s[n][1],l=Jr(r,a,o-a),u=Do(t,l),c=e(u);if(0===n)for(let e=0;e<c.length;++e)i.push((0,h.scalar)(0));for(let e=0;e<c.length;++e){const t=c[e];i[e]=h.add(i[e],h.mul(o-a,t))}}for(let e=0;e<i.length;++e)i[e]=h.div(i[e],a)}return i})}getDedupedMetricsNames(){const e=this.metricsNames,t=[];for(let n=0;n<e.length;++n){const s=e[n];let r=s;lr(e,s)>1&&(r+=`_${lr(e.slice(0,n),s)}`),t.push(r)}return t}makeTrainFunction(){return e=>{const t=[],n=e.slice(0,this.inputs.length),s=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),r=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),a=[],i=this.collectedTrainableWeights.map(e=>e.read());return[this.optimizer_.minimize(()=>{const e=[];for(let t=0;t<this.inputs.length;++t)e.push({key:this.inputs[t],value:n[t]});const i=new Ja(e),o=ni(this.outputs,i,{training:!0});let l;for(let e=0;e<this.lossFunctions.length;++e){let n=(0,this.lossFunctions[e])(s[e],o[e]);null!=r[e]&&(n=Co(n,r[e]));const a=h.mean(n);t.push(a),l=0===e?n:h.add(l,n)}for(let e=0;e<this.metricsTensors.length;++e){let n;if(this.outputs.length>1&&e<this.outputs.length)n=t[e];else{const t=this.metricsTensors[e][0],r=this.metricsTensors[e][1];n=h.mean(t(s[r],o[r]))}h.keep(n),a.push(n)}return l=h.mean(l),this.calculateLosses().forEach(e=>{l=h.add(l,e)}),l},!0,i)].concat(a)}}makeTestFunction(){this.testFunction=e=>h.tidy(()=>{const t=[];let n;const s=e.slice(0,this.inputs.length),r=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=[];for(let e=0;e<this.inputs.length;++e)a.push({key:this.inputs[e],value:s[e]});const i=new Ja(a),o=ni(this.outputs,i);for(let e=0;e<this.lossFunctions.length;++e){const s=this.lossFunctions[e],a=h.mean(s(r[e],o[e]));n=0===e?a:h.add(n,a),t.push(n)}for(let e=0;e<this.metricsTensors.length;++e){const n=this.metricsTensors[e][0],s=this.metricsTensors[e][1],a=h.mean(n(r[s],o[s]));t.push(a)}return t})}async fit(e,t,n={}){if(this.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let s,r,a,i,o,l,u,c,d;this.isTraining=!0;try{const h=null==n.batchSize?32:n.batchSize;Ro(h);const p=!1,f=await this.standardizeUserData(e,t,n.sampleWeight,n.classWeight,p,h);s=f[0],r=f[1],d=f[2];let m,g=!1;if(null!=n.validationData&&n.validationData.length>0){if(g=!0,2!==n.validationData.length)throw 3===n.validationData.length?new sr("validationData including sample weights is not supported yet."):new nr(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${n.validationData} is invalid.`);o=n.validationData[0],l=n.validationData[1];const e=!0,t=await this.standardizeUserData(o,l,null,null,e,h);u=t[0],c=t[1],m=u.concat(c)}else if(null!=n.validationSplit&&n.validationSplit>0&&n.validationSplit<1){g=!0;const e=Math.floor(s[0].shape[0]*(1-n.validationSplit)),t=s[0].shape[0];u=_o(s,e,t),a=s,s=_o(s,0,e),c=_o(r,e,t),i=r,r=_o(r,0,e),m=u.concat(c)}else null!=n.validationSteps&&(g=!0);const y=s.concat(r).concat(d);this.checkTrainableWeightsConsistency();const b=this.makeTrainFunction(),x=this.getDedupedMetricsNames();let v,w;g?(this.makeTestFunction(),v=this.testFunction,w=x.slice().concat(x.map(e=>"val_"+e))):(v=null,m=[],w=x.slice());const k=Ui(n.callbacks,n.yieldEvery);return await this.fitLoop(b,y,x,h,n.epochs,n.verbose,k,v,m,n.shuffle,w,n.initialEpoch,null,null)}finally{this.isTraining=!1,Mo(s,e),Mo(r,t),Mo(a,e),Mo(i,t),Mo(u,o),Mo(c,l),null!=d&&h.dispose(d)}}async fitLoop(e,t,n,s,r,a,i,o,l,u,c,d,p,f){null==s&&(s=32),null==r&&(r=1),null==u&&(u=!0),null==d&&(d=0);let m=!1;if(null!=o&&null!=l&&(m=!0),null!=f&&(m=!0,null==p))throw new nr("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const g=this.checkNumSamples(t,s,p,"steps_per_epoch");let y;null!=g&&(y=Yr(0,g)),null==a&&(a=1);const{callbackList:b,history:x}=Hi(i,a,r,d,g,p,s,m,c);b.setModel(this),this.history=x,await b.onTrainBegin(),this.stopTraining_=!1;for(let a=d;a<r;++a){await b.onEpochBegin(a);const r={};if(null!=p)throw new sr("stepsPerEpoch mode is not implemented yet.");{if("batch"===u)throw new sr("batch shuffling is not implemneted yet");u&&h.util.shuffle(y);const a=(0,h.tensor1d)(y),i=Fo(g,s);for(let u=0;u<i.length;++u){const c={};if(await b.onBatchBegin(u,c),h.tidy(()=>{const d=i[u][0],p=i[u][1],f=Jr(a,d,p-d);c.batch=u,c.size=p-d;const g=Do(t,f),y=e(g);for(let e=0;e<n.length;++e){const t=n[e],s=y[e];c[t]=s,h.keep(s)}if(u===i.length-1&&m){const e=this.testLoop(o,l,s);for(let t=0;t<n.length;++t){const s=n[t],a=e[t];h.keep(a),r["val_"+s]=a}}}),await b.onBatchEnd(u,c),Mi(c),this.stopTraining_)break}a.dispose()}if(await b.onEpochEnd(a,r),this.stopTraining_)break}return await b.onTrainEnd(),await this.history.syncData(),this.history}async fitDataset(e,t){return async function(e,t,n){const s=null!=n.batchesPerEpoch;if(h.util.assert(null!=e.optimizer,()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."),h.util.assert(null!=n,()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."),h.util.assert(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`),h.util.assert(!s||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`),h.util.assert(null==n.validationSplit,()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."),e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{const r=null!=n.validationData;let a,i;if(r)if($o(n.validationData))h.util.assert(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`);else{const e=function(e){if(3===e.length)throw new sr("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(n.validationData);a=e.xs,i=e.ys}const o=e.makeTrainFunction(),l=e.getDedupedMetricsNames();let u;u=r?l.slice().concat(l.map(e=>"val_"+e)):l.slice();const c=Ui(n.callbacks,n.yieldEvery),d=null==n.verbose?1:n.verbose,{callbackList:p,history:f}=Hi(c,d,n.epochs,null,null,function(e,t){let n=null;return null!=t.batchesPerEpoch?n=t.batchesPerEpoch:Number.isFinite(e.size)&&(n=e.size),n}(t,n),null,r,u);p.setModel(e),e.history=f,await p.onTrainBegin(),e.stopTraining_=!1;let m=null==n.initialEpoch?0:n.initialEpoch,g=await t.iterator();for(;m<n.epochs;){const u={};await p.onEpochBegin(m);let c=0,d=0;for(s||(g=await t.iterator());!s||c<n.batchesPerEpoch;){const t=await g.next();if(s&&t.done){console.warn(`You provided \`batchesPerEpoch\` as ${n.batchesPerEpoch}, but your dataset iterator ran out of data after ${c} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, `+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=t.value){const{xs:s,ys:r}=Ao(e,t.value),a={};a.batch=d,a.size=s[0].shape[0],await p.onBatchBegin(d,a);const i=[];if(null!=n.classWeight){const t=No(n.classWeight,e.outputNames);for(let e=0;e<t.length;++e)i.push(await Io(r[e],null,t[e]))}const u=s.concat(r).concat(i),f=o(u);h.dispose(u);for(let e=0;e<l.length;++e){const t=l[e],n=f[e];a[t]=n,h.keep(n)}await p.onBatchEnd(d,a),Mi(a),d++,c++}if(s?c>=n.batchesPerEpoch:t.done){if(r){let t;t=$o(n.validationData)?cr(await e.evaluateDataset(n.validationData,{batches:n.validationBatches})):cr(e.evaluate(a,i,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<e.metricsNames.length;++n)u[`val_${e.metricsNames[n]}`]=t[n]}break}if(e.stopTraining_)break}if(await p.onEpochEnd(m,u),m++,e.stopTraining_)break}return await p.onTrainEnd(),await e.history.syncData(),e.history}finally{e.isTraining=!1}}(this,e,t)}async trainOnBatch(e,t){const n=await this.standardizeUserData(e,t),s=n[0],r=n[1],a=this.makeTrainFunction()(s.concat(r)),i=[];for(const e of a){const t=await e.data();i.push(t[0])}return h.dispose(a),Mo(n[0],e),Mo(n[1],t),ur(i)}getNamedWeights(e){const t=[],n=null!=e&&e.trainableOnly,s=n?this.trainableWeights:this.weights,r=this.getWeights(n);for(let e=0;e<s.length;++e)n&&!s[e].trainable||t.push({name:s[e].originalName,tensor:r[e]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const t=h.memory().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-h.memory().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=dr(this.loss);else if(Array.isArray(this.loss)){for(const e of this.loss)if("string"!=typeof e)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map(e=>dr(e))}else{const t=Object.keys(this.loss);e={};const n=this.loss;for(const s of t){if("string"!=typeof n[s])throw new Error("Serialization of non-string loss is not supported.");e[s]=dr(n[s])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[dr(fo(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map(e=>dr(fo(e)));{const e={};for(const t in this.metrics)e[t]=dr(fo(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const t=ji(wo(e.optimizer_config));let n,s;if("string"==typeof e.loss)n=hr(e.loss);else if(Array.isArray(e.loss))n=e.loss.map(e=>hr(e));else if(null!=e.loss){n={};for(const t in e.loss)n[t]=hr(e.loss[t])}if(Array.isArray(e.metrics))s=e.metrics.map(e=>hr(e));else if(null!=e.metrics){s={};for(const t in e.metrics)s[t]=hr(e.metrics[t])}this.compile({loss:n,metrics:s,optimizer:t})}async save(e,t){if("string"==typeof e){const t=h.io.getSaveHandlers(e);if(0===t.length)throw new nr(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new nr(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new nr("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await h.io.encodeWeights(this.getNamedWeights(t)),s={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:`TensorFlow.js tfjs-layers v${To}`,convertedBy:null};if(null!=t&&t.includeOptimizer&&null!=this.optimizer){s.trainingConfig=this.getTrainingConfig();const e="optimizer",{data:t,specs:r}=await h.io.encodeWeights(await this.optimizer.getWeights(),e);n.specs.push(...r),n.data=h.io.concatenateArrayBuffers([n.data,t])}if(null!=this.userDefinedMetadata){const e=!0;mo(this.userDefinedMetadata,this.name,e),s.userDefinedMetadata=this.userDefinedMetadata}return s.weightData=n.data,s.weightSpecs=n.specs,e.save(s)}setUserDefinedMetadata(e){mo(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}Wo.className="Model",h.serialization.registerClass(Wo);class Vo extends Wo{}async function Uo(e,t){"modelTopology"in e||(e={modelTopology:e});let n=e.modelTopology;null!=n.model_config&&(n=n.model_config);const s=ji(wo(n),t);if(null!=e.weightsManifest){const t=await h.io.loadWeights(e.weightsManifest,e.pathPrefix,s.weights.map(e=>e.originalName)),n={};for(const e of s.weights)n[e.originalName]=t[e.originalName];s.loadWeights(n),(0,h.dispose)(t)}return s}async function Go(e,t){if(null==t&&(t={}),"string"==typeof e){const n=h.io.getLoadHandlers(e,t);if(0===n.length)n.push(h.io.browserHTTPRequest(e,t));else if(n.length>1)throw new nr(`Found more than one (${n.length}) load handlers for URL '${e}'`);e=n[0]}return async function(e,t,n){if(null==n&&(n={}),null==e.load)throw new nr("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const s=await e.load();let r=s.modelTopology;null!=r.model_config&&(r=r.model_config);const a=null==n.strict||n.strict,i=null!=s.weightData&&null!=s.weightSpecs&&a,o=ji(wo(r),void 0,i),l=s.trainingConfig;if(null!=l&&o.loadTrainingConfig(l),null!=s.userDefinedMetadata&&o.setUserDefinedMetadata(s.userDefinedMetadata),null!=s.weightData){if(null==s.weightSpecs)throw new nr("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");const{modelWeights:e,optimizerWeights:t}=function(e,t){const n=h.io.decodeWeights(e,t),s={},r=[];return t.forEach(e=>{"optimizer"===e.group?r.push({name:e.name,tensor:n[e.name]}):s[e.name]=n[e.name]}),{modelWeights:s,optimizerWeights:r}}(s.weightData,s.weightSpecs);o.loadWeights(e,a),null!=o.optimizer&&t.length>0&&await o.optimizer.setWeights(t),(0,h.dispose)(e),(0,h.dispose)(t.map(e=>e.tensor))}return o}(e,0,t)}Vo.className="Functional",h.serialization.registerClass(Vo);class Ho extends Wo{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:Ar("sequential_"),null!=e.layers)for(const t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some(e=>e<0))throw new nr(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const t=e instanceof Ho||e instanceof Wo;let n;if(t){if(n=e,1!==n.outputs.length)throw new nr("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new nr("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new nr("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const t=Qa({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(t)}if(t)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==e.inboundNodes.length)throw new nr(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new nr("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=Xa(this.outputs[0])}this.inboundNodes=[],new qa({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:ir(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(e=>e.shape),outputShapes:this.outputs[0].shape})}else{const t=e.apply(this.outputs[0]);if(Array.isArray(t))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if(La(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new Wo({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,n=console.log){this.built||this.build(),super.summary(e,t,n)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,t,n={}){if(!this.built)throw new tr("The model needs to be compiled before being used.");return this.model.evaluate(e,t,n)}async evaluateDataset(e,t){if(!this.built)throw new tr("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return null==this.model&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,n={}){if(!this.built)throw new tr("The model needs to be compiled before being used.");return this.model.fit(e,t,n)}async fitDataset(e,t){if(!this.built)throw new tr("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t,n={},s=!1){let r,a={};if(t instanceof Array){if(null==t[0].className||"Merge"===t[0].className)throw new nr("Legacy serialization format not supported yet.");r=t}else h.util.assert(null!=t.layers,()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."),r=t.layers,delete t.layers,a=t;const i=new e(a);if(!(i instanceof Ho))throw new sr(`Sequential.fromConfig called on non-Sequential input: ${i}`);for(const e of r){const t=ji(e,void 0,s);s&&t.setFastWeightInitDuringBuild(!0),i.add(t)}return i}set stopTraining(e){if(null==this.model)throw new nr("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new nr("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const t of this.layers){const n={};n.className=t.getClassName(),n.config=t.getConfig(),e.push(n)}return{name:this.name,layers:e}}}function jo(e){return new Wo(e)}function qo(e){return new Ho(e)}function Yo(e){return Qa(e)}function Ko(e,t){Gi.registerCallbackConstructor(e,t)}Ho.className="Sequential",h.serialization.registerClass(Ho);class Xo extends h.serialization.Serializable{getConfig(){return{}}}class Zo extends Xo{apply(e,t=1){return function(e,t=1){if(1!==t)throw new sr(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return h.elu(e)}(e,t)}}Zo.className="elu",h.serialization.registerClass(Zo);class Qo extends Xo{apply(e){return h.selu(e)}}Qo.className="selu",h.serialization.registerClass(Qo);class Jo extends Xo{apply(e){return h.relu(e)}}Jo.className="relu",h.serialization.registerClass(Jo);class el extends Xo{apply(e){return(0,h.tidy)(()=>h.minimum(6,h.relu(e)))}}el.className="relu6",h.serialization.registerClass(el);class tl extends Xo{apply(e){return e}}tl.className="linear",h.serialization.registerClass(tl);class nl extends Xo{apply(e){return h.sigmoid(e)}}nl.className="sigmoid",h.serialization.registerClass(nl);class sl extends Xo{apply(e){return function(e){return(0,h.tidy)(()=>{const t=h.add(.5,h.mul(.2,e));return h.clipByValue(t,0,1)})}(e)}}sl.className="hardSigmoid",h.serialization.registerClass(sl);class rl extends Xo{apply(e){return h.softplus(e)}}rl.className="softplus",h.serialization.registerClass(rl);class al extends Xo{apply(e){return function(e){return(0,h.tidy)(()=>h.div(e,h.add(h.abs(e),1)))}(e)}}al.className="softsign",h.serialization.registerClass(al);class il extends Xo{apply(e){return h.tanh(e)}}il.className="tanh",h.serialization.registerClass(il);class ol extends Xo{apply(e,t=-1){return h.softmax(e,t)}}ol.className="softmax",h.serialization.registerClass(ol);class ll extends Xo{apply(e,t=-1){return h.logSoftmax(e,t)}}ll.className="logSoftmax",h.serialization.registerClass(ll);class ul extends Xo{apply(e){return(0,h.tidy)(()=>h.tidy(()=>{const t=Math.sqrt(2),n=h.mul(.5,h.add(1,h.erf(h.div(e,t))));return h.mul(e,n)}))}}ul.className="gelu",h.serialization.registerClass(ul);class cl extends Xo{apply(e){return(0,h.tidy)(()=>h.mul(.5,h.mul(e,h.add(1,h.tanh(h.mul(h.sqrt(h.div(2,Math.PI)),h.add(e,h.mul(.044715,h.pow(e,3)))))))))}}cl.className="gelu_new",h.serialization.registerClass(cl);class dl extends Xo{apply(e){return(0,h.tidy)(()=>h.mul(e,h.tanh(h.softplus(e))))}}dl.className="mish",h.serialization.registerClass(dl);class hl extends Xo{apply(e,t=1){return(0,h.tidy)(()=>h.mul(h.sigmoid(h.mul(e,t)),e))}}function pl(e){return e.getClassName()}function fl(e,t={}){return gr(e,h.serialization.SerializationMap.getMap().classNameMap,t,"activation")}function ml(e){if(null==e){return fl({className:"linear",config:{}})}if("string"==typeof e){const t={};return t.className=e,t.config={},fl(t)}return e instanceof Xo?e:fl(e)}function gl(e){if(null!=e&&"object"!=typeof e)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e}`)}hl.className="swish",h.serialization.registerClass(hl);class yl extends h.serialization.Serializable{}class bl extends yl{constructor(e){super(),gl(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return(0,h.tidy)(()=>{let t=(0,h.zeros)([1]);return this.hasL1&&(t=(0,h.add)(t,(0,h.sum)(h.mul(this.l1,(0,h.abs)(e))))),this.hasL2&&(t=(0,h.add)(t,(0,h.sum)(h.mul(this.l2,la(e))))),h.reshape(t,[])})}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}bl.className="L1L2",h.serialization.registerClass(bl);const xl={l1l2:"L1L2"};function vl(e){return fr(e)}function wl(e,t={}){return gr(e,h.serialization.SerializationMap.getMap().classNameMap,t,"regularizer")}function kl(e){return null==e?null:"string"==typeof e?wl({className:e in xl?xl[e]:e,config:{}}):e instanceof yl?e:wl(e)}class Tl extends Ka{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,t){e=za(e);let n=(0,h.relu)(e);return null!=this.maxValue&&(n=(0,h.clipByValue)(n,0,this.maxValue)),n}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}Tl.className="ReLU",h.serialization.registerClass(Tl);class Sl extends Ka{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=za(e);return(0,h.leakyRelu)(n,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}Sl.className="LeakyReLU",h.serialization.registerClass(Sl);class Nl extends Ka{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=Fa(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=kl(e.alphaRegularizer),this.alphaConstraint=mi(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new nr(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const t=(e=La(e)).slice(1);if(null!=this.sharedAxes)for(const e of this.sharedAxes)t[e-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let t=1;t<e.length;++t)n[t]=e[t];this.inputSpec=[new Ga({ndim:e.length,axes:n})],this.built=!0}call(e,t){return e=za(e),(0,h.prelu)(e,this.alpha.read())}getConfig(){const e={alphaInitializer:Da(this.alphaInitializer),alphaRegularizer:vl(this.alphaRegularizer),alphaConstraint:pi(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}Nl.className="PReLU",h.serialization.registerClass(Nl);class Il extends Ka{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new sr(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=za(e);return(0,h.elu)(n)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}Il.className="ELU",h.serialization.registerClass(Il);class Cl extends Ka{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,t){const n=za(e);return(0,h.mul)(n,(0,h.cast)((0,h.greater)(n,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}Cl.className="ThresholdedReLU",h.serialization.registerClass(Cl);class Al extends Ka{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new ol).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){return(0,h.tidy)(()=>{let n=za(e);const s=t.mask;if(null!=s){const e=(0,h.mul)((0,h.sub)((0,h.ones)(n.shape),(0,h.cast)(s,n.dtype)),(0,h.scalar)(-1e9));n=(0,h.add)(n,e)}return this.axis instanceof Array?this.axis.length>1?(0,h.exp)((0,h.sub)(n,(0,h.logSumExp)(n,this.axis,!0))):this.softmax(n,this.axis[0]):this.softmax(n,this.axis)})}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function El(e,t,n){if("number"==typeof e)return ir(e,t);if(e.length!==t)throw new nr(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);for(let s=0;s<t;++s){const r=e[s];if(!Gr(r))throw new nr(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number ${r}`)}return e}function $l(e,t,n,s,r=1){if(null==e)return e;let a;return a="same"===n?e:e-(t+(t-1)*(r-1))+1,Math.floor((a+s-1)/s)}function Rl(e,t,n,s){if(null==e)return null;if("valid"===s)e=e*t+qr([n-t,0]);else{if("same"!==s)throw new nr(`Unsupport padding mode: ${s}.`);e*=t}return e}function _l(e,t){return(0,h.tidy)(()=>(Or(t),"channelsFirst"===t?h.transpose(e,[0,2,3,1]):e))}function Dl(e,t){return(0,h.tidy)(()=>(Or(t),"channelsFirst"===t?h.transpose(e,[0,2,3,4,1]):e))}function Fl(e,t,n,s=[1,1],r="valid",a,i,o=null){return(0,h.tidy)(()=>{if(null==a&&(a="channelsLast"),Or(a),3!==e.rank&&4!==e.rank)throw new nr(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`);if(3!==t.rank&&4!==t.rank)throw new nr(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`);let l=_l(e,a);if("causal"===r)throw new sr("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=h.fused.conv2d({x:l,filter:t,strides:s,pad:"same"===r?"same":"valid",dilations:i,dataFormat:"NHWC",bias:n,activation:o}),"channelsFirst"===a&&(l=h.transpose(l,[0,3,1,2])),l})}Al.className="Softmax",h.serialization.registerClass(Al);class Ol extends Ka{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",Ol.verifyArgs(t),this.rank=e,kr(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new sr(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=El(t.kernelSize,e,"kernelSize"),this.strides=El(null==t.strides?1:t.strides,e,"strides"),this.padding=null==t.padding?"valid":t.padding,Mr(this.padding),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Or(this.dataFormat),this.activation=ml(t.activation),this.useBias=null==t.useBias||t.useBias,this.biasInitializer=Fa(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=mi(t.biasConstraint),this.biasRegularizer=kl(t.biasRegularizer),this.activityRegularizer=kl(t.activityRegularizer),this.dilationRate=El(null==t.dilationRate?1:t.dilationRate,e,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new nr(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new nr(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new nr(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(e){if(or("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!wr(e.kernelSize,"number",1,3))throw new nr(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){const e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:pl(this.activation),useBias:this.useBias,biasInitializer:Da(this.biasInitializer),biasRegularizer:vl(this.biasRegularizer),activityRegularizer:vl(this.activityRegularizer),biasConstraint:pi(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class Ml extends Ol{constructor(e,t){super(e,t),this.kernel=null,Ml.verifyArgs(t),this.filters=t.filters,kr(this.filters,"filters"),this.kernelInitializer=Fa(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=mi(t.kernelConstraint),this.kernelRegularizer=kl(t.kernelRegularizer)}build(e){e=La(e);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new nr(`The channel dimension of the input should be defined. Found ${e[t]}`);const n=e[t],s=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:n}}],this.built=!0}call(e,t){return(0,h.tidy)(()=>{let t;e=za(e);const n=null==this.bias?null:this.bias.read(),s=Sr(this.activation.getClassName());if(null!=s&&2===this.rank)t=Fl(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,s);else{if(1===this.rank)t=function(e,t,n,s=1,r="valid",a,i=1){return(0,h.tidy)(()=>{if(null==a&&(a="channelsLast"),Or(a),3!==e.shape.length)throw new nr(`The input of a conv1dWithBias operation should be 3, but is ${e.shape.length} instead.`);if(3!==t.shape.length)throw new nr(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=n&&1!==n.shape.length)throw new nr(`The bias for a conv1dWithBias operation should be 1, but is ${n.shape.length} instead`);if("channelsFirst"===a&&(e=h.transpose(e,[0,2,1])),"causal"===r)throw new sr("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let o=h.conv1d(e,t,s,"same"===r?"same":"valid","NWC",i);return null!=n&&(o=ca(o,n)),o})}(e,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)t=Fl(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new sr("convolutions greater than 3D are not implemented yet.");t=function(e,t,n,s=[1,1,1],r="valid",a,i){return(0,h.tidy)(()=>{if(null==a&&(a="channelsLast"),Or(a),4!==e.rank&&5!==e.rank)throw new nr(`conv3dWithBias expects input to be of rank 4 or 5, but received ${e.rank}.`);if(4!==t.rank&&5!==t.rank)throw new nr(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${e.rank}.`);let o=Dl(e,a);if("causal"===r)throw new sr("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return o=h.conv3d(o,t,s,"same"===r?"same":"valid","NDHWC",i),null!=n&&(o=ca(o,n)),"channelsFirst"===a&&(o=h.transpose(o,[0,4,1,2,3])),o})}(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(t=this.activation.apply(t))}return t})}computeOutputShape(e){e=La(e);const t=[],n="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2);for(let e=0;e<n.length;++e){const s=$l(n[e],this.kernelSize[e],this.padding,this.strides[e],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[e]);t.push(s)}let s=[e[0]];return"channelsLast"===this.dataFormat?(s=s.concat(t),s.push(this.filters)):(s.push(this.filters),s=s.concat(t)),s}getConfig(){const e={filters:this.filters,kernelInitializer:Da(this.kernelInitializer),kernelRegularizer:vl(this.kernelRegularizer),kernelConstraint:pi(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new nr(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`)}}class zl extends Ml{constructor(e){super(2,e),zl.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!wr(e.kernelSize,"number",1,2))throw new nr(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}zl.className="Conv2D",h.serialization.registerClass(zl);class Ll extends Ml{constructor(e){super(3,e),Ll.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new nr(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}Ll.className="Conv3D",h.serialization.registerClass(Ll);class Pl extends zl{constructor(e){if(super(e),this.inputSpec=[new Ga({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new nr(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=La(e)).length)throw new nr("Input should have rank 4; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new nr("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],s=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Ga({ndim:4,axes:{[t]:n}})],this.built=!0}call(e,t){return h.tidy(()=>{let t=za(e);if(4!==t.shape.length)throw new nr(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,s=n[0];let r,a;"channelsFirst"===this.dataFormat?(r=2,a=3):(r=1,a=2);const i=n[r],o=n[a],l=this.kernelSize[0],u=this.kernelSize[1],c=this.strides[0],d=this.strides[1],p=[s,Rl(i,c,l,this.padding),Rl(o,d,u,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=h.transpose(t,[0,2,3,1]));let f=h.conv2dTranspose(t,this.kernel.read(),p,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(f=h.transpose(f,[0,3,1,2])),null!=this.bias&&(f=ca(f,this.bias.read(),this.dataFormat)),null!=this.activation&&(f=this.activation.apply(f)),f})}computeOutputShape(e){const t=(e=La(e)).slice();let n,s,r;"channelsFirst"===this.dataFormat?(n=1,s=2,r=3):(n=3,s=1,r=2);const a=this.kernelSize[0],i=this.kernelSize[1],o=this.strides[0],l=this.strides[1];return t[n]=this.filters,t[s]=Rl(t[s],o,a,this.padding),t[r]=Rl(t[r],l,i,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}Pl.className="Conv2DTranspose",h.serialization.registerClass(Pl);class Bl extends Ll{constructor(e){if(super(e),this.inputSpec=[new Ga({ndim:5})],"same"!==this.padding&&"valid"!==this.padding)throw new nr(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(5!==(e=La(e)).length)throw new nr("Input should have rank 5; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new nr("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],s=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Ga({ndim:5,axes:{[t]:n}})],this.built=!0}call(e,t){return h.tidy(()=>{let t=za(e);if(5!==t.shape.length)throw new nr(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,s=n[0];let r,a,i;"channelsFirst"===this.dataFormat?(i=2,r=3,a=4):(i=1,r=2,a=3);const o=n[i],l=n[r],u=n[a],c=this.kernelSize[0],d=this.kernelSize[1],p=this.kernelSize[2],f=this.strides[0],m=this.strides[1],g=this.strides[2],y=[s,Rl(o,f,c,this.padding),Rl(l,m,d,this.padding),Rl(u,g,p,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=h.transpose(t,[0,2,3,4,1]));let b=h.conv3dTranspose(t,this.kernel.read(),y,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(b=h.transpose(b,[0,4,1,2,3])),null!==this.bias&&(b=ca(b,this.bias.read(),this.dataFormat)),null!==this.activation&&(b=this.activation.apply(b)),b})}computeOutputShape(e){const t=(e=La(e)).slice();let n,s,r,a;"channelsFirst"===this.dataFormat?(n=1,s=2,r=3,a=4):(n=4,s=1,r=2,a=3);const i=this.kernelSize[0],o=this.kernelSize[1],l=this.kernelSize[2],u=this.strides[0],c=this.strides[1],d=this.strides[2];return t[n]=this.filters,t[s]=Rl(t[s],u,i,this.padding),t[r]=Rl(t[r],c,o,this.padding),t[a]=Rl(t[a],d,l,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}Bl.className="Conv3DTranspose",h.serialization.registerClass(Bl);class Wl extends Ml{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==t.filters)throw new nr("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=t.kernelInitializer||null!=t.kernelRegularizer||null!=t.kernelConstraint)throw new nr("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=t.padding&&"same"!==t.padding&&"valid"!==t.padding)throw new nr(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=Fa(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=kl(t.depthwiseRegularizer),this.depthwiseConstraint=mi(t.depthwiseConstraint),this.pointwiseInitializer=Fa(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=kl(t.pointwiseRegularizer),this.pointwiseConstraint=mi(t.pointwiseConstraint)}build(e){if((e=La(e)).length<this.rank+2)throw new nr(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new nr(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);const n=e[t],s=this.kernelSize.concat([n,this.depthMultiplier]),r=[];for(let e=0;e<this.rank;++e)r.push(1);r.push(n*this.depthMultiplier,this.filters);const a=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",s,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,a,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",r,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,a,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,a,this.biasConstraint):this.bias=null,this.inputSpec=[new Ga({ndim:this.rank+2,axes:{[t]:n}})],this.built=!0}call(e,t){return(0,h.tidy)(()=>{let t;if(e=za(e),1===this.rank)throw new sr("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=h.transpose(e,[0,2,3,1])),t=h.separableConv2d(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(t=ca(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),"channelsFirst"===this.dataFormat&&(t=h.transpose(t,[0,3,1,2])),t})}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=Da(this.depthwiseInitializer),e.pointwiseInitializer=Da(this.pointwiseInitializer),e.depthwiseRegularizer=vl(this.depthwiseRegularizer),e.pointwiseRegularizer=vl(this.pointwiseRegularizer),e.depthwiseConstraint=pi(this.depthwiseConstraint),e.pointwiseConstraint=pi(this.pointwiseConstraint),e}}Wl.className="SeparableConv";class Vl extends Wl{constructor(e){super(2,e)}}Vl.className="SeparableConv2D",h.serialization.registerClass(Vl);class Ul extends Ml{constructor(e){super(1,e),Ul.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!wr(e.kernelSize,"number",1,1))throw new nr(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}Ul.className="Conv1D",h.serialization.registerClass(Ul);class Gl extends Ka{constructor(e){super(e),"number"==typeof e.cropping?this.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?this.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:this.cropping=e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return(0,h.tidy)(()=>{if(e=za(e),"channelsLast"===this.dataFormat){const t=ta(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return ta(t,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const t=ta(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return ta(t,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}})}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}Gl.className="Cropping2D",h.serialization.registerClass(Gl);class Hl extends Ka{constructor(e){var t;super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Or(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,t=this.interpolation,vr($r,"InterpolationFormat",t)}computeOutputShape(e){if("channelsFirst"===this.dataFormat){const t=null==e[2]?null:this.size[0]*e[2],n=null==e[3]?null:this.size[1]*e[3];return[e[0],e[1],t,n]}{const t=null==e[1]?null:this.size[0]*e[1],n=null==e[2]?null:this.size[1]*e[2];return[e[0],t,n,e[3]]}}call(e,t){return h.tidy(()=>{let t=za(e);const n=t.shape;if("channelsFirst"===this.dataFormat){t=h.transpose(t,[0,2,3,1]);const e=this.size[0]*n[2],s=this.size[1]*n[3],r="nearest"===this.interpolation?h.image.resizeNearestNeighbor(t,[e,s]):h.image.resizeBilinear(t,[e,s]);return h.transpose(r,[0,3,1,2])}{const e=this.size[0]*n[1],s=this.size[1]*n[2];return"nearest"===this.interpolation?h.image.resizeNearestNeighbor(t,[e,s]):h.image.resizeBilinear(t,[e,s])}})}getConfig(){const e={size:this.size,dataFormat:this.dataFormat,interpolation:this.interpolation},t=super.getConfig();return Object.assign(e,t),e}}Hl.className="UpSampling2D",h.serialization.registerClass(Hl);class jl extends Ol{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=Fa(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=mi(e.depthwiseConstraint),this.depthwiseRegularizer=kl(e.depthwiseRegularizer)}build(e){if((e=La(e)).length<4)throw new nr(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new nr(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);const n=e[t],s=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",s,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return(0,h.tidy)(()=>{let t=function(e,t,n=[1,1],s="valid",r,a){return(0,h.tidy)(()=>{null==r&&(r="channelsLast"),Or(r);let i=_l(e,r);if(4!==e.rank)throw new nr(`Input for depthwiseConv2d is required to be 4-D, but is instead ${e.rank}-D`);if(4!==t.rank)throw new nr(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return i=h.depthwiseConv2d(i,t,n,"same"===s?"same":"valid","NHWC",a),"channelsFirst"===r&&(i=h.transpose(i,[0,3,1,2])),i})}(e=za(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(t=ca(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),t})}computeOutputShape(e){e=La(e);const t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,r=$l(t,this.kernelSize[0],this.padding,this.strides[0]),a=$l(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],s,r,a]:[e[0],r,a,s]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=Da(this.depthwiseInitializer),e.depthwiseRegularizer=vl(this.depthwiseRegularizer),e.depthwiseConstraint=pi(this.depthwiseRegularizer),e}}function ql(e,t,n,s){if(Array.isArray(e)){if(null!=t||null!=n)throw new nr("When inputs is an array, neither initialState or constants should be provided");null!=s&&(n=e.slice(e.length-s,e.length),e=e.slice(0,e.length-s)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function r(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=r(t),constants:n=r(n)}}function Yl(e,t,n,s=!1,r,a,i=!1,o=!1){return h.tidy(()=>{const l=t.shape.length;if(l<3)throw new nr(`Input should be at least 3D, but is ${l}D.`);const u=[1,0].concat(Yr(2,l));if(t=h.transpose(t,u),null!=a)throw new sr("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=r&&((r=h.cast(h.cast(r,"bool"),"float32")).rank===l-1&&(r=h.expandDims(r,-1)),r=h.transpose(r,u)),s&&(t=h.reverse(t,0),null!=r&&(r=h.reverse(r,0)));const c=[];let d,p=n;const f=t.shape[0],m=h.unstack(t);let g,y;null!=r&&(g=h.unstack(r));for(let t=0;t<f;++t){const n=m[t],s=h.tidy(()=>e(n,p));if(null==r)d=s[0],p=s[1];else{const e=h.tidy(()=>{const e=g[t],n=h.sub(h.onesLike(e),e);return{output:h.add(h.mul(s[0],e),h.mul(p[0],n)),newStates:p.map((t,r)=>h.add(h.mul(s[1][r],e),h.mul(t,n)))}});d=e.output,p=e.newStates}o&&c.push(d)}if(o){const e=1;y=h.stack(c,e)}return[d,y,p]})}jl.className="DepthwiseConv2D",h.serialization.registerClass(jl);class Kl extends Ka{constructor(e){let t;if(super(e),null==e.cell)throw new nr("cell property is missing for the constructor of RNN.");if(t=Array.isArray(e.cell)?new su({cells:e.cell}):e.cell,null==t.stateSize)throw new nr("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new Ga({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){return null==this.states_?Yr(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map(e=>null):this.states_}setStates(e){this.states_=e}computeOutputShape(e){Oa(e)&&(e=e[0]);let t=this.cell.stateSize;Array.isArray(t)||(t=[t]);const n=t[0];let s;if(s=this.returnSequences?[e[0],e[1],n]:[e[0],n],this.returnState){const n=[];for(const s of t)n.push([e[0],s]);return[s].concat(n)}return s}computeMask(e,t){return h.tidy(()=>{Array.isArray(t)&&(t=t[0]);const e=this.returnSequences?t:null;if(this.returnState){const t=this.states.map(e=>null);return[e].concat(t)}return e})}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let n=0;n<e;++n)t.push(null);return t}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new sr("Constants support is not implemented in RNN yet.");Oa(e)&&(e=e[0]);const t=this.stateful?e[0]:null,n=e.slice(2);this.inputSpec[0]=new Ga({shape:[t,null,...n]});const s=[e[0]].concat(e.slice(2));let r;if(this.cell.build(s),r=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!h.util.arraysEqual(this.stateSpec.map(e=>e.shape[e.shape.length-1]),r))throw new nr(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=r.map(e=>new Ga({shape:[null,e]}));this.stateful&&this.resetStates()}resetStates(e,t=!1){(0,h.tidy)(()=>{if(!this.stateful)throw new er("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new nr("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(e=>h.zeros([n,e])):this.states_=[h.zeros([n,this.cell.stateSize])];else if(null==e)h.dispose(this.states_),null!=this.keptStates&&(h.dispose(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(e=>h.zeros([n,e])):this.states_[0]=h.zeros([n,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new nr(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===t?this.keptStates.push(this.states_.slice()):h.dispose(this.states_);for(let t=0;t<this.states_.length;++t){const s=e[t],r=Array.isArray(this.cell.stateSize)?this.cell.stateSize[t]:this.cell.stateSize,a=[n,r];if(!h.util.arraysEqual(s.shape,a))throw new nr(`State ${t} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${s.shape}`);this.states_[t]=s}}this.states_=this.states_.map(e=>h.keep(e.clone()))})}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const r=ql(e,n,s,this.numConstants);e=r.inputs,n=r.initialState,s=r.constants;let a=[],i=[];if(null!=n){t.initialState=n,a=a.concat(n),this.stateSpec=[];for(const e of n)this.stateSpec.push(new Ga({shape:e.shape}));i=i.concat(this.stateSpec)}if(null!=s&&(t.constants=s,a=a.concat(s),this.numConstants=s.length),a[0]instanceof Ha){const n=[e].concat(a),s=this.inputSpec.concat(i),r=this.inputSpec;this.inputSpec=s;const o=super.apply(n,t);return this.inputSpec=r,o}return super.apply(e,t)}call(e,t){return(0,h.tidy)(()=>{const n=null==t?null:t.mask,s=null==t?null:t.training;let r=null==t?null:t.initialState;e=za(e),null==r&&(r=this.stateful?this.states_:this.getInitialState(e));const a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(r.length!==a)throw new nr(`RNN Layer has ${a} state(s) but was passed ${r.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const i={training:s},o=Yl((e,t)=>{const n=this.cell.call([e].concat(t),i);return[n[0],n.slice(1)]},e,r,this.goBackwards,n,null,this.unroll,this.returnSequences),l=o[0],u=o[1],c=o[2];this.stateful&&this.resetStates(c,s);const d=this.returnSequences?u:l;return this.returnState?[d].concat(c):d})}getInitialState(e){return(0,h.tidy)(()=>{let t=h.zeros(e.shape);return t=h.sum(t,[1,2]),t=Qr(t),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(e=>e>1?ra(t,[1,e]):t):this.cell.stateSize>1?[ra(t,[1,this.cell.stateSize])]:[t]})}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===Kl.className&&(t.cell={className:this.cell.getClassName(),config:n}),Object.assign(Object.assign(Object.assign({},n),e),t)}static fromConfig(e,t,n={}){const s=ji(t.cell,n);return new e(Object.assign(t,{cell:s}))}}Kl.className="RNN",h.serialization.registerClass(Kl);class Xl extends Ka{}class Zl extends Xl{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,kr(this.units,"units"),this.activation=ml(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Fa(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Fa(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Fa(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=kl(e.kernelRegularizer),this.recurrentRegularizer=kl(e.recurrentRegularizer),this.biasRegularizer=kl(e.biasRegularizer),this.kernelConstraint=mi(e.kernelConstraint),this.recurrentConstraint=mi(e.recurrentConstraint),this.biasConstraint=mi(e.biasConstraint),this.dropout=jr([1,qr([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=jr([1,qr([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=La(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return(0,h.tidy)(()=>{if(2!==e.length)throw new nr(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let n=e[1];e=e[0];const s=null!=t.training&&t.training;let r;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=ru({ones:()=>h.onesLike(e),rate:this.dropout,training:s,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=ru({ones:()=>h.onesLike(n),rate:this.recurrentDropout,training:s,dropoutFunc:this.dropoutFunc}));const a=this.dropoutMask,i=this.recurrentDropoutMask;r=ia(null!=a?h.mul(e,a):e,this.kernel.read()),null!=this.bias&&(r=ca(r,this.bias.read())),null!=i&&(n=h.mul(n,i));let o=h.add(r,ia(n,this.recurrentKernel.read()));return null!=this.activation&&(o=this.activation.apply(o)),[o,o]})}getConfig(){const e=super.getConfig(),t={units:this.units,activation:pl(this.activation),useBias:this.useBias,kernelInitializer:Da(this.kernelInitializer),recurrentInitializer:Da(this.recurrentInitializer),biasInitializer:Da(this.biasInitializer),kernelRegularizer:vl(this.kernelRegularizer),recurrentRegularizer:vl(this.recurrentRegularizer),biasRegularizer:vl(this.biasRegularizer),activityRegularizer:vl(this.activityRegularizer),kernelConstraint:pi(this.kernelConstraint),recurrentConstraint:pi(this.recurrentConstraint),biasConstraint:pi(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign(Object.assign({},e),t)}}Zl.className="SimpleRNNCell",h.serialization.registerClass(Zl);class Ql extends Kl{constructor(e){e.cell=new Zl(e),super(e)}call(e,t){return(0,h.tidy)(()=>{null!=this.cell.dropoutMask&&(h.dispose(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(h.dispose(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})})}static fromConfig(e,t){return new e(t)}}Ql.className="SimpleRNN",h.serialization.registerClass(Ql);class Jl extends Xl{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new nr("GRUCell does not support reset_after parameter set to true.");this.units=e.units,kr(this.units,"units"),this.activation=ml(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=ml(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Fa(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Fa(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Fa(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=kl(e.kernelRegularizer),this.recurrentRegularizer=kl(e.recurrentRegularizer),this.biasRegularizer=kl(e.biasRegularizer),this.kernelConstraint=mi(e.kernelConstraint),this.recurrentConstraint=mi(e.recurrentConstraint),this.biasConstraint=mi(e.biasConstraint),this.dropout=jr([1,qr([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=jr([1,qr([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){const t=(e=La(e))[e.length-1];this.kernel=this.addWeight("kernel",[t,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return(0,h.tidy)(()=>{if(2!==e.length)throw new nr(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const n=null!=t.training&&t.training;let s=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=ru({ones:()=>h.onesLike(e),rate:this.dropout,training:n,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=ru({ones:()=>h.onesLike(s),rate:this.recurrentDropout,training:n,count:3,dropoutFunc:this.dropoutFunc}));const r=this.dropoutMask,a=this.recurrentDropoutMask;let i,o,l;0<this.dropout&&this.dropout<1&&(e=h.mul(e,r[0]));let u=ia(e,this.kernel.read());this.useBias&&(u=ca(u,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(s=h.mul(s,a[0]));const c=this.recurrentKernel.read(),[d,p]=h.split(c,[2*this.units,this.units],c.rank-1),f=ia(s,d),[m,g,y]=h.split(u,3,u.rank-1),[b,x]=h.split(f,2,f.rank-1);i=this.recurrentActivation.apply(h.add(m,b)),o=this.recurrentActivation.apply(h.add(g,x));const v=ia(h.mul(o,s),p);l=this.activation.apply(h.add(y,v));const w=h.add(h.mul(i,s),h.mul(h.add(1,h.neg(i)),l));return[w,w]})}getConfig(){const e=super.getConfig(),t={units:this.units,activation:pl(this.activation),recurrentActivation:pl(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Da(this.kernelInitializer),recurrentInitializer:Da(this.recurrentInitializer),biasInitializer:Da(this.biasInitializer),kernelRegularizer:vl(this.kernelRegularizer),recurrentRegularizer:vl(this.recurrentRegularizer),biasRegularizer:vl(this.biasRegularizer),activityRegularizer:vl(this.activityRegularizer),kernelConstraint:pi(this.kernelConstraint),recurrentConstraint:pi(this.recurrentConstraint),biasConstraint:pi(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign(Object.assign({},e),t)}}Jl.className="GRUCell",h.serialization.registerClass(Jl);class eu extends Kl{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new Jl(e),super(e)}call(e,t){return(0,h.tidy)(()=>{null!=this.cell.dropoutMask&&(h.dispose(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(h.dispose(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})})}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}eu.className="GRU",h.serialization.registerClass(eu);class tu extends Xl{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,kr(this.units,"units"),this.activation=ml(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=ml(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Fa(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Fa(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Fa(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=kl(e.kernelRegularizer),this.recurrentRegularizer=kl(e.recurrentRegularizer),this.biasRegularizer=kl(e.biasRegularizer),this.kernelConstraint=mi(e.kernelConstraint),this.recurrentConstraint=mi(e.recurrentConstraint),this.biasConstraint=mi(e.biasConstraint),this.dropout=jr([1,qr([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=jr([1,qr([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;const n=(e=La(e))[e.length-1];let s;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const e=this.biasInitializer,n=this.units;s=new((t=class extends ma{apply(t,s){const r=e.apply([n]),a=(new ya).apply([n]),i=e.apply([2*n]);return sa(sa(r,a),i)}}).className="CustomInit",t)}else s=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,s,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return(0,h.tidy)(()=>{const n=null!=t.training&&t.training;if(3!==e.length)throw new nr(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let s=e[1];const r=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=ru({ones:()=>h.onesLike(e),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=ru({ones:()=>h.onesLike(s),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const a=this.dropoutMask,i=this.recurrentDropoutMask;let o,l,u,c;0<this.dropout&&this.dropout<1&&(e=h.mul(e,a[0]));let d=ia(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(s=h.mul(s,i[0])),d=h.add(d,ia(s,this.recurrentKernel.read())),this.useBias&&(d=ca(d,this.bias.read()));const[p,f,m,g]=h.split(d,4,d.rank-1);o=this.recurrentActivation.apply(p),l=this.recurrentActivation.apply(f),u=h.add(h.mul(l,r),h.mul(o,this.activation.apply(m))),c=this.recurrentActivation.apply(g);const y=h.mul(c,this.activation.apply(u));return[y,y,u]})}getConfig(){const e=super.getConfig(),t={units:this.units,activation:pl(this.activation),recurrentActivation:pl(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Da(this.kernelInitializer),recurrentInitializer:Da(this.recurrentInitializer),biasInitializer:Da(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:vl(this.kernelRegularizer),recurrentRegularizer:vl(this.recurrentRegularizer),biasRegularizer:vl(this.biasRegularizer),activityRegularizer:vl(this.activityRegularizer),kernelConstraint:pi(this.kernelConstraint),recurrentConstraint:pi(this.recurrentConstraint),biasConstraint:pi(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign(Object.assign({},e),t)}}tu.className="LSTMCell",h.serialization.registerClass(tu);class nu extends Kl{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new tu(e),super(e)}call(e,t){return(0,h.tidy)(()=>{null!=this.cell.dropoutMask&&(h.dispose(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(h.dispose(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})})}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}nu.className="LSTM",h.serialization.registerClass(nu);class su extends Xl{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return(0,h.tidy)(()=>{let n=e.slice(1);const s=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?s.push(n.splice(0,e.stateSize.length)):s.push(n.splice(0,1));s.reverse();const r=[];let a;for(let i=0;i<this.cells.length;++i){const o=this.cells[i];n=s[i],a=0===i?[e[0]].concat(n):[a[0]].concat(n),a=o.call(a,t),r.push(a.slice(1))}n=[];for(const e of r.slice().reverse())n.push(...e);return[a[0]].concat(n)})}build(e){let t;Oa(e)&&(e=e[0]),this.cells.forEach((n,s)=>{Pr(`RNNCell_${s}`,()=>{n.build(e),t=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,e=[e[0],t]})}),this.built=!0}getConfig(){const e=super.getConfig(),t={cells:this.cells.map(e=>({className:e.getClassName(),config:e.getConfig()}))};return Object.assign(Object.assign({},e),t)}static fromConfig(e,t,n={}){const s=[];for(const e of t.cells)s.push(ji(e,n));return new e({cells:s})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t.concat(e)}return e}getWeights(){const e=[];for(const t of this.cells)e.push(...t.weights);return Va(e)}setWeights(e){const t=[];for(const n of this.cells){const s=n.weights.length,r=e.splice(s);for(let e=0;e<n.weights.length;++e)t.push([n.weights[e],r[e]])}Ua(t)}}function ru(e){const{ones:t,rate:n,training:s=!1,count:r=1,dropoutFunc:a}=e,i=()=>null!=a?a(t(),n):da(t(),n),o=()=>ha(i,t,s);return!r||r<=1?h.keep(o().clone()):Array(r).fill(void 0).map(o).map(e=>h.keep(e.clone()))}su.className="StackedRNNCells",h.serialization.registerClass(su);class au extends Kl{constructor(e){if(e.unroll)throw new sr("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new sr("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new Ga({ndim:5})]}call(e,t){return h.tidy(()=>{if(null!=this.cell.dropoutMask&&(h.dispose(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(h.dispose(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new nr("ConvRNN2D cell does not support constants");const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})})}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return h.tidy(()=>{const{stateSize:t}=this.cell,n=e.shape,s=this.computeSingleOutputShape(n),r=[s[0],...s.slice(2)],a=h.zeros(r);return Array.isArray(t)?Array(t.length).fill(a):[a]})}resetStates(e,t=!1){h.tidy(()=>{if(!this.stateful)throw new er("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,s=this.computeSingleOutputShape(n),r=[s[0],...s.slice(2)];if(null==n[0])throw new nr("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>h.zeros(r)):this.states_=[h.zeros(r)];else if(null==e)h.dispose(this.states_),null!=this.keptStates&&(h.dispose(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>h.zeros(r)):this.states_[0]=h.zeros(r);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new nr(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t?this.keptStates.push(this.states_.slice()):h.dispose(this.states_);for(let t=0;t<this.states_.length;++t){const n=e[t],s=r;if(!h.util.arraysEqual(n.shape,s))throw new nr(`State ${t} is incompatible with layer ${this.name}: expected shape=${s}, received shape=${n.shape}`);this.states_[t]=n}}this.states_=this.states_.map(e=>h.keep(e.clone()))})}computeSingleOutputShape(e){const{dataFormat:t,filters:n,kernelSize:s,padding:r,strides:a,dilationRate:i}=this.cell,o="channelsFirst"===t,l=e[o?3:2],u=e[o?4:3],c=$l(l,s[0],r,a[0],i[0]),d=$l(u,s[1],r,a[1],i[1]);return[...e.slice(0,2),...o?[n,c,d]:[c,d,n]]}}au.className="ConvRNN2D";class iu extends tu{constructor(e){const{filters:t,kernelSize:n,strides:s,padding:r,dataFormat:a,dilationRate:i}=e;super(Object.assign(Object.assign({},e),{units:t})),this.filters=t,kr(this.filters,"filters"),this.kernelSize=El(n,2,"kernelSize"),this.kernelSize.forEach(e=>kr(e,"kernelSize")),this.strides=El(s||1,2,"strides"),this.strides.forEach(e=>kr(e,"strides")),this.padding=r||"valid",Mr(this.padding),this.dataFormat=a||"channelsLast",Or(this.dataFormat),this.dilationRate=El(i||1,2,"dilationRate"),this.dilationRate.forEach(e=>kr(e,"dilationRate"))}build(e){var t;e=La(e);const n="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[n])throw new nr(`The channel dimension of the input should be defined. Found ${e[n]}`);const s=e[n],r=this.kernelSize.concat([s,4*this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const a=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",a,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let e;if(this.unitForgetBias){const n=this.biasInitializer,s=this.filters;e=new((t=class extends ma{apply(e,t){return na([n.apply([s]),h.ones([s]),n.apply([2*s])])}}).className="CustomInit",t)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,e,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return h.tidy(()=>{if(3!==e.length)throw new nr(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const n=t.training||!1,s=e[0],r=e[1],a=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=ru({ones:()=>h.onesLike(s),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const i=this.dropoutMask,o=(e,t,n)=>t&&t[n]?h.mul(t[n],e):e;let l=o(s,i,0),u=o(s,i,1),c=o(s,i,2),d=o(s,i,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=ru({ones:()=>h.onesLike(r),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const p=this.recurrentDropoutMask;let f=o(r,p,0),m=o(r,p,1),g=o(r,p,2),y=o(r,p,3);const[b,x,v,w]=h.split(this.kernel.read(),4,3),[k,T,S,N]=this.useBias?h.split(this.bias.read(),4):[null,null,null,null];l=this.inputConv(l,b,k,this.padding),u=this.inputConv(u,x,T,this.padding),c=this.inputConv(c,v,S,this.padding),d=this.inputConv(d,w,N,this.padding);const[I,C,A,E]=h.split(this.recurrentKernel.read(),4,3);f=this.recurrentConv(f,I),m=this.recurrentConv(m,C),g=this.recurrentConv(g,A),y=this.recurrentConv(y,E);const $=this.recurrentActivation.apply(h.add(l,f)),R=this.recurrentActivation.apply(h.add(u,m)),_=h.add(h.mul(R,a),h.mul($,this.activation.apply(h.add(c,g)))),D=h.mul(this.recurrentActivation.apply(h.add(d,y)),this.activation.apply(_));return[D,D,_]})}getConfig(){const e=super.getConfig(),{units:t}=e,n=function(e,t){var n={};for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&t.indexOf(s)<0&&(n[s]=e[s]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(s=Object.getOwnPropertySymbols(e);r<s.length;r++)t.indexOf(s[r])<0&&Object.prototype.propertyIsEnumerable.call(e,s[r])&&(n[s[r]]=e[s[r]])}return n}(e,["units"]),s={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign(Object.assign({},n),s)}inputConv(e,t,n,s){const r=h.conv2d(e,t,this.strides,s||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?ca(r,n,this.dataFormat):r}recurrentConv(e,t){return h.conv2d(e,t,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}iu.className="ConvLSTM2DCell",h.serialization.registerClass(iu);class ou extends au{constructor(e){const t=new iu(e);super(Object.assign(Object.assign({},e),{cell:t}))}static fromConfig(e,t){return new e(t)}}ou.className="ConvLSTM2D",h.serialization.registerClass(ou);class lu extends Ka{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const t=e.shape,n=[];for(let e=0;e<this.noiseShape.length;++e)n.push(null==this.noiseShape[e]?t[e]:this.noiseShape[e]);return n}call(e,t){return(0,h.tidy)(()=>{this.invokeCallHook(e,t);const n=za(e);if(0<this.rate&&this.rate<1){const e=null!=t.training&&t.training,s=this.getNoiseShape(n);return ha(()=>da(n,this.rate,s,this.seed),()=>n,e)}return e})}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}lu.className="Dropout",h.serialization.registerClass(lu);class uu extends lu{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const t=e.shape;return[t[0],1,t[2]]}}uu.className="SpatialDropout1D",h.serialization.registerClass(uu);class cu extends Ka{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,kr(this.units,"units"),this.activation=ml(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=Fa(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=Fa(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=mi(e.kernelConstraint),this.biasConstraint=mi(e.biasConstraint),this.kernelRegularizer=kl(e.kernelRegularizer),this.biasRegularizer=kl(e.biasRegularizer),this.activityRegularizer=kl(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const t=(e=La(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){const t=(e=La(e)).slice();return t[t.length-1]=this.units,t}call(e,t){return(0,h.tidy)(()=>{this.invokeCallHook(e,t);const n=za(e),s=Sr(this.activation.getClassName());let r;return null!=s?r=ia(n,this.kernel.read(),s,this.bias?this.bias.read():null):(r=ia(n,this.kernel.read()),null!=this.bias&&(r=ca(r,this.bias.read())),null!=this.activation&&(r=this.activation.apply(r))),r})}getConfig(){const e={units:this.units,activation:pl(this.activation),useBias:this.useBias,kernelInitializer:Da(this.kernelInitializer),biasInitializer:Da(this.biasInitializer),kernelRegularizer:vl(this.kernelRegularizer),biasRegularizer:vl(this.biasRegularizer),activityRegularizer:vl(this.activityRegularizer),kernelConstraint:pi(this.kernelConstraint),biasConstraint:pi(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}cu.className="Dense",h.serialization.registerClass(cu);class du extends Ka{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=La(e);for(const t of e.slice(1))if(null==t)throw new nr(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],Hr(e,1)]}call(e,t){return(0,h.tidy)(()=>{this.invokeCallHook(e,t);let n=za(e);if("channelsFirst"===this.dataFormat&&n.rank>1){const e=[0];for(let t=2;t<n.rank;++t)e.push(t);e.push(1),n=(0,h.transpose)(n,e)}return function(e){if(e.rank<=1)throw new nr(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`);const t=[e.shape[0],Hr(e.shape,1)];return h.reshape(e,t)}(n)})}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const t=super.getConfig();return Object.assign(e,t),e}}du.className="Flatten",h.serialization.registerClass(du);class hu extends Ka{constructor(e){super(e),this.supportsMasking=!0,this.activation=ml(e.activation)}call(e,t){return(0,h.tidy)(()=>{this.invokeCallHook(e,t);const n=za(e);return this.activation.apply(n)})}getConfig(){const e={activation:pl(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}hu.className="Activation",h.serialization.registerClass(hu);class pu extends Ka{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return(0,h.tidy)(()=>{return e=za(e),t=e,n=this.n,(0,h.tidy)(()=>{if(2!==t.shape.length)throw new nr(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);return ra(Qr(t,1),[1,n,1])});var t,n})}getConfig(){const e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}pu.className="RepeatVector",h.serialization.registerClass(pu);class fu extends Ka{constructor(e){super(e),this.targetShape=e.targetShape;for(let e=0;e<this.targetShape.length;++e)this.isUnknown(this.targetShape[e])&&(this.targetShape[e]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,t){const n="Total size of new array must be unchanged.",s=t.slice();let r=1,a=null;for(let e=0;e<s.length;++e){const t=s[e];if(this.isUnknown(t)){if(null!==a)throw new nr("Can only specifiy one unknown dimension.");a=e}else r*=t}const i=Hr(e);if(null!==a){if(0===r||i%r!==0)throw new nr(n);s[a]=i/r}else if(i!==r)throw new nr(n);return s}computeOutputShape(e){let t=!1;for(let n=0;n<e.length;++n)if(this.isUnknown(e[n])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return(0,h.tidy)(()=>{this.invokeCallHook(e,t);const n=za(e),s=n.shape,r=s.slice(0,1).concat(this.fixUnknownDimension(s.slice(1),this.targetShape));return(0,h.reshape)(n,r)})}getConfig(){const e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}fu.className="Reshape",h.serialization.registerClass(fu);class mu extends Ka{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const t=Yr(1,e.dims.length+1);if(!h.util.arraysEqual(e.dims.slice().sort(),t))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new Ga({ndim:this.dims.length+1})]}computeOutputShape(e){const t=(e=La(e)).slice();return this.dims.forEach((n,s)=>{t[s+1]=e[n]}),t}call(e,t){return(0,h.transpose)(za(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}mu.className="Permute",h.serialization.registerClass(mu);class gu extends Ka{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){const n=za(e);return(0,h.any)((0,h.notEqual)(n,this.maskValue),-1)}call(e,t){return(0,h.tidy)(()=>{this.invokeCallHook(e,t);const n=za(e),s=(0,h.any)((0,h.notEqual)(n,this.maskValue),-1,!0);return(0,h.mul)(n,(0,h.cast)(s,n.dtype))})}}gu.className="Masking",h.serialization.registerClass(gu);class yu extends Ka{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let t=null;null!=e.batchSize&&(t=e.batchSize),null==e.inputLength?this.batchInputShape=[t,null]:this.batchInputShape=[t].concat(cr(e.inputLength))}this.inputDim=e.inputDim,kr(this.inputDim,"inputDim"),this.outputDim=e.outputDim,kr(this.outputDim,"outputDim"),this.embeddingsInitializer=Fa(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=kl(e.embeddingsRegularizer),this.activityRegularizer=kl(e.activityRegularizer),this.embeddingsConstraint=mi(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return(0,h.tidy)(()=>this.maskZero?(e=za(e),(0,h.notEqual)(e,(0,h.zerosLike)(e))):null)}computeOutputShape(e){if(e=La(e),null==this.inputLength)return[...e,this.outputDim];const t=cr(this.inputLength);if(t.length!==e.length-1)throw new nr(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let n=0;for(let s=0;s<t.length;++s){const r=t[s],a=e[s+1];if(null!=r&&null!=a&&r!==a)throw new nr(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==r&&(t[n]=a),n++}}return[e[0],...t,this.outputDim]}call(e,t){return(0,h.tidy)(()=>{this.invokeCallHook(e,t);let n=za(e);"int32"!==n.dtype&&(n=Zr(n,"int32"));const s=oa(this.embeddings.read(),(0,h.reshape)(n,[n.size]));return(0,h.reshape)(s,La(this.computeOutputShape(n.shape)))})}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:Da(this.embeddingsInitializer),embeddingsRegularizer:vl(this.embeddingsRegularizer),activityRegularizer:vl(this.activityRegularizer),embeddingsConstraint:pi(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}yu.className="Embedding",h.serialization.registerClass(yu);class bu extends Ka{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new sr}computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;const n=e.slice(0,e.length-t.length);for(let s=0;s<t.length;++s){const r=e[e.length-t.length+s],a=t[s];if(null==r||null==a||r<0||a<0)n.push(null);else if(1===r)n.push(a);else if(1===a)n.push(r);else{if(r!==a)throw new nr("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));n.push(r)}}return n}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[La(e)]),e.length<2)throw new nr(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(const n of e)null!=n&&null!==n[0]&&t.push(n[0]);if(t=br(t),t.length>1)throw new nr(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let n=null==e[0]?null:e[0].slice(1);for(let t=1;t<e.length;++t){const s=null==e[t]?null:e[t].slice(1);n=this.computeElementwiseOpOutputShape(n,s)}const s=e.map(e=>e.length);-1===e.indexOf(null)&&1===br(s).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(e,t){return(0,h.tidy)(()=>{if(this.reshapeRequired){const t=[],n=e.map(e=>e.rank);if(-1===n.indexOf(null)){const s=qr(n);for(let n of e){const e=n.rank;for(let t=0;t<s-e;++t)n=Qr(n,1);t.push(n)}return this.mergeFunction(t)}{let n=!1;for(const s of e){const e=s.rank;if(null==e){const e=s.shape,r=e[0],a=e.slice(1).concat([r]);let i=h.reshape(s,[r].concat(Hr(e.slice(1))));i=h.transpose(i,[1,0]),i=h.reshape(i,a),t.push(i),n=!0}else if(e>1){const r=Yr(1,e).concat([0]);t.push(h.transpose(s,r)),n=!0}else t.push(s)}let s=this.mergeFunction(t);const r=s.rank;if(n)if(null==r){const e=s.shape,t=e[e.length-1],n=[t].concat(e.slice(0,e.length-1));s=h.reshape(h.transpose(h.reshape(s,[-1,t]),[1,0]),n)}else if(r>1){const e=[r-1].concat(Yr(0,r-1));s=h.transpose(s,e)}return s}}return this.mergeFunction(e)})}computeOutputShape(e){let t;t=null==e[0]?null:e[0].slice(1);for(let n=1;n<e.length;++n){const s=null==e[n]?null:e[n].slice(1);t=this.computeElementwiseOpOutputShape(t,s)}let n=[];for(const t of e)null!=t&&null!==t[0]&&n.push(t[0]);return n=br(n),t=1===n.length?n.concat(t):[null].concat(t),t}computeMask(e,t){return h.tidy(()=>{if(null==t)return null;if(!Array.isArray(t))throw new nr("`mask` should be an Array");if(!Array.isArray(e))throw new nr("`inputs` should be an Array");if(t.length!==e.length)throw new nr(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every(e=>null==e))return null;let n=(t=t.map(e=>null==e?e:h.expandDims(e,0)))[0];for(let e=1;e<t.length-1;++e)n=h.logicalAnd(n,t[e]);return n})}}class xu extends bu{constructor(e){super(e)}mergeFunction(e){return(0,h.tidy)(()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=h.add(t,e[n]);return t})}}xu.className="Add",h.serialization.registerClass(xu);class vu extends bu{constructor(e){super(e)}mergeFunction(e){return(0,h.tidy)(()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=h.mul(t,e[n]);return t})}}vu.className="Multiply",h.serialization.registerClass(vu);class wu extends bu{constructor(e){super(e)}mergeFunction(e){return(0,h.tidy)(()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=h.add(t,e[n]);return h.mul(1/e.length,t)})}}wu.className="Average",h.serialization.registerClass(wu);class ku extends bu{constructor(e){super(e)}mergeFunction(e){return(0,h.tidy)(()=>{let t=e[0];for(let n=1;n<e.length;++n)t=h.maximum(t,e[n]);return t})}}ku.className="Maximum",h.serialization.registerClass(ku);class Tu extends bu{constructor(e){super(e)}mergeFunction(e){return(0,h.tidy)(()=>{let t=e[0];for(let n=1;n<e.length;++n)t=h.minimum(t,e[n]);return t})}}Tu.className="Minimum",h.serialization.registerClass(Tu);class Su extends bu{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new nr("A `Concatenate` layer should be called on a list of at least 2 inputs");let t=!0;for(const n of e)if(null!=n){t=!1;break}if(t)return;const n=[];for(let t=0;t<e.length;++t){const s=e[t].slice();s.splice(this.axis,1);let r=!1;for(const e of n)if(h.util.arraysEqual(e,s)){r=!0;break}r||n.push(s)}if(n.length>1)throw new nr("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return(0,h.tidy)(()=>na(e,this.axis))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new nr("A `Concatenate` layer should be called on a list of inputs.");const t=e,n=t[0].slice(),s=this.axis<0?n.length+this.axis:this.axis;for(const e of t.slice(1)){if(null==n[s]||null==e[s]){n[s]=null;break}n[s]+=e[s]}return n}computeMask(e,t){if(null==t)return null;if(!Array.isArray(t))throw new nr("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new nr("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new nr(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return h.tidy(()=>{let n=!0;if(t.forEach(e=>{null==e||(n=!1)}),n)return null;const s=[];for(let n=0;n<e.length;++n)null==t[n]?s.push(h.cast(h.onesLike(e[n]),"bool")):t[n].rank<e[n].rank?s.push(h.expandDims(t[n],-1)):s.push(t[n]);const r=h.concat(s,this.axis);return h.all(r,-1,!1)})}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function Nu(e,t){for(;e<0;)e+=t;return e}Su.className="Concatenate",h.serialization.registerClass(Su);class Iu extends bu{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){h.util.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const t=e[0],n=e[1];if(t.length>3||n.length>3)throw new sr("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);if(t[s[0]]!==n[s[1]])throw new nr(`Dimension incompatibility: ${t[s[0]]} !== ${n[s[1]]}`)}mergeFunction(e){if(2!==e.length)throw new nr(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let t,n=e[0],s=e[1];return t=Array.isArray(this.axes)?this.axes.map((t,n)=>Nu(t,e[n].shape.length)):[Nu(this.axes,n.shape.length),Nu(this.axes,s.shape.length)],this.normalize&&(n=qi(n,t[0]),s=qi(s,t[1])),function(e,t,n){if(e.shape.length>3||t.shape.length>3)throw new sr("batchDot is not implemented for tensors of 4D or higher rank yet");if(h.util.assert(e.shape.length>=2,()=>`batchDot requires the rank of x to be >= 2, but got ${e.shape.length}`),h.util.assert(e.shape.length>=2,()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`),"number"==typeof n&&(n=[n,n]),"complex64"===e.dtype||"complex64"===t.dtype)throw new sr("batchDot is not implemented for complex64-type Tensors yet.");const s=e.shape.length,r=t.shape.length;null==n&&(n=[s-1,r-2]);const a=n;return h.tidy(()=>{let n,i;if(s>r){n=s-r;const e=[];for(let t=0;t<n;++t)e.push(1);t=h.reshape(t,t.shape.concat(e))}else if(r>s){n=r-s;const t=[];for(let e=0;e<n;++e)t.push(1);e=h.reshape(e,e.shape.concat(t))}else n=0;if(2===e.shape.length&&2===t.shape.length)i=a[0]===a[1]?h.sum(h.mul(e,t),a[0]):h.sum(h.mul(h.transpose(e,[1,0]),t),a[1]);else{const n=a[0]!==e.shape.length-1,s=a[1]===t.shape.length-1;i=h.matMul(e,t,n,s)}if(n>0){let e;e=s>r?s+r-3:s-1;const t=[];for(let s=e;s<e+n;++s)t.push(s);i=h.squeeze(i,t)}return 1===i.shape.length&&(i=h.expandDims(i,1)),i})}(n,s,t)}interpretAxes(e,t){let n;return n=Array.isArray(this.axes)?this.axes:[Nu(this.axes,e.length),Nu(this.axes,t.length)],n}computeOutputShape(e){h.util.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const t=e[0].slice(),n=e[1].slice();if(t.length>3||n.length>3)throw new sr("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);t.splice(s[0],1),n.splice(s[1],1),n.splice(0,1);const r=t.concat(n);return 1===r.length&&r.push(1),r}computeMask(e,t){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}Iu.className="Dot",h.serialization.registerClass(Iu);class Cu extends Ka{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return(0,h.tidy)(()=>{this.invokeCallHook(e,t);const n=za(e);return ha(()=>(0,h.add)(aa(n.shape,0,this.stddev),n),()=>n,t.training||!1)})}}Cu.className="GaussianNoise",h.serialization.registerClass(Cu);class Au extends Ka{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return(0,h.tidy)(()=>{this.invokeCallHook(e,t);const n=za(e);return this.rate>0&&this.rate<1?ha(()=>{const e=Math.sqrt(this.rate/(1-this.rate));return(0,h.mul)(n,aa(n.shape,1,e))},()=>n,t.training||!1):n})}}Au.className="GaussianDropout",h.serialization.registerClass(Au);class Eu extends Ka{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||za(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return(0,h.tidy)(()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(e),s=()=>{const t=za(e),s=-1.7580993408473766;let r=(0,h.greaterEqual)((0,h.randomUniform)(n),this.rate);r=Zr(r,"float32");const a=((1-this.rate)*(1+this.rate*s**2))**-.5,i=-a*s*this.rate,o=(0,h.add)((0,h.mul)(t,r),(0,h.mul)((0,h.add)(r,-1),s));return(0,h.add)((0,h.mul)(o,a),i)};return ha(s,()=>za(e),t.training||!1)}return e})}}function $u(e,t,n,s,r,a=.001){let i;if(2===e.rank)i=h.batchNorm2d(e,t,n,s,r,a);else if(3===e.rank)i=h.batchNorm3d(e,t,n,s,r,a);else{if(4!==e.rank)throw new sr(`batchNormalization is not implemented for array of rank ${e.rank} yet`);i=h.batchNorm4d(e,t,n,s,r,a)}return i}Eu.className="AlphaDropout",h.serialization.registerClass(Eu);class Ru extends Ka{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=Fa(e.betaInitializer||"zeros"),this.gammaInitializer=Fa(e.gammaInitializer||"ones"),this.movingMeanInitializer=Fa(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=Fa(e.movingVarianceInitializer||"ones"),this.betaConstraint=mi(e.betaConstraint),this.gammaConstraint=mi(e.gammaConstraint),this.betaRegularizer=kl(e.betaRegularizer),this.gammaRegularizer=kl(e.gammaRegularizer)}build(e){e=La(e);const t=this.axis>=0?this.axis:this.axis+e.length,n=e[t];if(null==n)throw new nr(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new Ga({ndim:e.length,axes:{[t]:n}})];const s=[n];this.scale&&(this.gamma=this.addWeight("gamma",s,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",s,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",s,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",s,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return(0,h.tidy)(()=>{const n=null!=t.training&&t.training,s=za(e),r=s.shape,a=r.length,i=Yr(0,a),o=this.axis>=0?this.axis:this.axis+a;i.splice(o,1);const l=ir(1,a);l[o]=r[o];const u=i.slice();u.sort();const c=!h.util.arraysEqual(u,Yr(0,a).slice(0,a-1));if(!n)return(()=>{if(c){const e=(0,h.reshape)(this.movingMean.read(),l),t=(0,h.reshape)(this.movingVariance.read(),l),n=this.center?(0,h.reshape)(this.beta.read(),l):null,r=this.scale?(0,h.reshape)(this.gamma.read(),l):null;return $u(s,e,t,n,r,this.epsilon)}return $u(s,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[d,p,f]=function(e,t,n,s,r=.001){return h.util.arraysEqual(s.slice().sort(),Yr(0,e.rank-1))?function(e,t,n,s,r=.001){return(0,h.tidy)(()=>{const a=h.moments(e,s),i=a.mean,o=a.variance;return[$u(e,i,o,n,t,r),i,o]})}(e,t,n,s,r):function(e,t,n,s,r=.001){return(0,h.tidy)(()=>{const a=h.moments(e,s),i=a.mean,o=a.variance,l=[];for(const t of Yr(0,e.rank))-1!==s.indexOf(t)?l.push(1):l.push(e.shape[t]);const u=(0,h.reshape)(i,l),c=(0,h.reshape)(o,l),d=null==t?null:(0,h.reshape)(t,l),p=null==n?null:(0,h.reshape)(n,l);return[$u(e,u,c,p,d,r),i,o]})}(e,t,n,s,r)}(s,this.gamma.read(),this.beta.read(),i,this.epsilon),m=(e,t,n)=>{h.tidy(()=>{const s=1-n,r=e.read(),a=h.mul(h.sub(r,t),s);e.write(h.sub(r,a))})};return(()=>{m(this.movingMean,p,this.momentum),m(this.movingVariance,f,this.momentum)})(),d})}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Da(this.betaInitializer),gammaInitializer:Da(this.gammaInitializer),movingMeanInitializer:Da(this.movingMeanInitializer),movingVarianceInitializer:Da(this.movingVarianceInitializer),betaRegularizer:vl(this.betaRegularizer),gammaRegularizer:vl(this.gammaRegularizer),betaConstraint:pi(this.betaConstraint),gammaConstraint:pi(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}Ru.className="BatchNormalization",h.serialization.registerClass(Ru);class _u extends Ka{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const e of this.axis)if(!Number.isInteger(e))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=Fa(e.betaInitializer||"zeros"),this.gammaInitializer=Fa(e.gammaInitializer||"ones"),this.betaRegularizer=kl(e.betaRegularizer),this.gammaRegularizer=kl(e.gammaRegularizer),this.supportsMasking=!0}build(e){const t=(e=La(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let e=0;e<this.axis.length;++e)this.axis[e]<0&&(this.axis[e]+=t);for(const e of this.axis)if(e<0||e>=t)throw new Error(`Invalid axis: ${e}`);if(this.axis.length!==br(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const n=this.axis.map(t=>e[t]),s=!0;this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,s):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,s):this.beta=null,this.built=!0}call(e,t){const n=za(e),s=n.shape,r=s.length;return(0,h.tidy)(()=>{let{mean:e,variance:t}=(0,h.moments)(n,this.axis,!0);const a=ir(1,r);for(const e of this.axis)a[e]=s[e];const i=e=>null!=e&&e.shape.length!==r?h.reshape(e,a):e;let o=this.scale?i(this.gamma.read()):null,l=this.center?i(this.beta.read()):null;const u=[],c=[];for(let e=0;e<r;++e)-1!==this.axis.indexOf(e)?(u.push(s[e]),c.push(1)):(u.push(1),c.push(s[e]));return e=h.tile(e,u),t=h.tile(t,u),null!=o&&(o=h.tile(o,c)),null!=l&&(l=h.tile(l,c)),$u(n,e,t,l,o,this.epsilon)})}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Da(this.betaInitializer),gammaInitializer:Da(this.gammaInitializer),betaRegularizer:vl(this.betaRegularizer),gammaRegularizer:vl(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}_u.className="LayerNormalization",h.serialization.registerClass(_u);class Du extends Ka{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new nr(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let t,n;if("number"==typeof e.padding[0])t=[e.padding[0],e.padding[0]],n=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new nr(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new nr(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);n=e.padding[1]}this.padding=[t,n]}this.inputSpec=[new Ga({ndim:4})]}computeOutputShape(e){let t,n;return e=La(e),"channelsFirst"===this.dataFormat?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,n]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,n,e[3]])}call(e,t){return(0,h.tidy)(()=>{return t=za(e),n=this.padding,s=this.dataFormat,(0,h.tidy)(()=>{if(4!==t.rank)throw new nr(`temporalPadding expects input tensor to be 4-D, but received a ${t.rank}-D tensor.`);if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new nr("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==s&&(s="channelsLast"),"channelsLast"!==s&&"channelsFirst"!==s)throw new nr(`Unknown data format: ${s}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let e;return e="channelsFirst"===s?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],h.pad(t,e)});var t,n,s})}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}function Fu(e,t,n,s,r,a){return(0,h.tidy)(()=>{let i;Or(r),zr(a),Mr(s),null==n&&(n=[1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==a&&(a="max"),e=_l(e,r);const o="same"===s?"same":"valid";return i="max"===a?h.maxPool(e,t,n,o):h.avgPool(e,t,n,o),"channelsFirst"===r&&(i=h.transpose(i,[0,3,1,2])),i})}function Ou(e,t,n,s,r,a){return(0,h.tidy)(()=>{let i;Or(r),zr(a),Mr(s),null==n&&(n=[1,1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==a&&(a="max"),e=Dl(e,r);const o="same"===s?"same":"valid";return i="max"===a?h.maxPool3d(e,t,n,o):h.avgPool3d(e,t,n,o),"channelsFirst"===r&&(i=h.transpose(i,[0,4,1,2,3])),i})}Du.className="ZeroPadding2D",h.serialization.registerClass(Du);class Mu extends Ka{constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"==typeof e.poolSize)this.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||1!==e.poolSize.length||"number"!=typeof e.poolSize[0])throw new nr(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);this.poolSize=e.poolSize}if(kr(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"==typeof e.strides)this.strides=[e.strides];else{if(!Array.isArray(e.strides)||1!==e.strides.length||"number"!=typeof e.strides[0])throw new nr(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);this.strides=e.strides}kr(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,Mr(this.padding),this.inputSpec=[new Ga({ndim:3})]}computeOutputShape(e){const t=$l((e=La(e))[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return(0,h.tidy)(()=>{this.invokeCallHook(e,t),e=Qr(za(e),2);const n=this.poolingFunction(za(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return h.squeeze(n,[2])})}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class zu extends Mu{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return Or(r),Mr(s),Fu(e,t,n,s,r,"max")}}zu.className="MaxPooling1D",h.serialization.registerClass(zu);class Lu extends Mu{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return Or(r),Mr(s),Fu(e,t,n,s,r,"avg")}}Lu.className="AveragePooling1D",h.serialization.registerClass(Lu);class Pu extends Ka{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new nr(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];kr(this.poolSize,"poolSize"),kr(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Or(this.dataFormat),Mr(this.padding),this.inputSpec=[new Ga({ndim:4})]}computeOutputShape(e){e=La(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2];return t=$l(t,this.poolSize[0],this.padding,this.strides[0]),n=$l(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n]:[e[0],t,n,e[3]]}call(e,t){return(0,h.tidy)(()=>(this.invokeCallHook(e,t),this.poolingFunction(za(e),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Bu extends Pu{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return Or(r),Mr(s),Fu(e,t,n,s,r,"max")}}Bu.className="MaxPooling2D",h.serialization.registerClass(Bu);class Wu extends Pu{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return Or(r),Mr(s),Fu(e,t,n,s,r,"avg")}}Wu.className="AveragePooling2D",h.serialization.registerClass(Wu);class Vu extends Ka{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new nr(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];kr(this.poolSize,"poolSize"),kr(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Or(this.dataFormat),Mr(this.padding),this.inputSpec=[new Ga({ndim:5})]}computeOutputShape(e){e=La(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[4]:e[3];return t=$l(t,this.poolSize[0],this.padding,this.strides[0]),n=$l(n,this.poolSize[1],this.padding,this.strides[1]),s=$l(s,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n,s]:[e[0],t,n,s,e[4]]}call(e,t){return(0,h.tidy)(()=>(this.invokeCallHook(e,t),this.poolingFunction(za(e),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Uu extends Vu{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return Or(r),Mr(s),Ou(e,t,n,s,r,"max")}}Uu.className="MaxPooling3D",h.serialization.registerClass(Uu);class Gu extends Vu{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return Or(r),Mr(s),Ou(e,t,n,s,r,"avg")}}Gu.className="AveragePooling3D",h.serialization.registerClass(Gu);class Hu extends Ka{constructor(e){super(e),this.inputSpec=[new Ga({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new sr}}class ju extends Hu{constructor(e){super(e||{})}call(e,t){return(0,h.tidy)(()=>{const t=za(e);return h.mean(t,1)})}}ju.className="GlobalAveragePooling1D",h.serialization.registerClass(ju);class qu extends Hu{constructor(e){super(e||{})}call(e,t){return(0,h.tidy)(()=>{const t=za(e);return h.max(t,1)})}}qu.className="GlobalMaxPooling1D",h.serialization.registerClass(qu);class Yu extends Ka{constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Or(this.dataFormat),this.inputSpec=[new Ga({ndim:4})]}computeOutputShape(e){return"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new sr}getConfig(){const e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Ku extends Yu{call(e,t){return(0,h.tidy)(()=>{const t=za(e);return"channelsLast"===this.dataFormat?h.mean(t,[1,2]):h.mean(t,[2,3])})}}Ku.className="GlobalAveragePooling2D",h.serialization.registerClass(Ku);class Xu extends Yu{call(e,t){return(0,h.tidy)(()=>{const t=za(e);return"channelsLast"===this.dataFormat?h.max(t,[1,2]):h.max(t,[2,3])})}}Xu.className="GlobalMaxPooling2D",h.serialization.registerClass(Xu);class Zu extends Ka{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){const e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,n={}){const s=ji(t.layer,n);delete t.layer;const r={layer:s};return Object.assign(r,t),new e(r)}}class Qu extends Zu{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=La(e)).length<3)throw new nr(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){const t=[(e=La(e))[0]].concat(e.slice(2)),n=this.layer.computeOutputShape(t),s=e[1];return[n[0],s].concat(n.slice(1))}call(e,t){return(0,h.tidy)(()=>Yl((e,n)=>[za(this.layer.call(e,t)),[]],e=za(e),[],!1,null,null,!1,!0)[1])}}Qu.className="TimeDistributed",h.serialization.registerClass(Qu);class Ju extends Zu{constructor(e){super(e);const t=e.layer.getConfig(),n={};n.className=e.layer.getClassName(),n.config=t,this.forwardLayer=ji(n),t.goBackwards=!0!==t.goBackwards;const s={};var r;if(s.className=e.layer.getClassName(),s.config=t,this.backwardLayer=ji(s),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,r=this.mergeMode,vr(Dr,"BidirectionalMergeMode",r),e.weights)throw new sr("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const t=e.length,n=Math.floor(t/2);this.forwardLayer.setWeights(e.slice(0,n)),this.backwardLayer.setWeights(e.slice(n))}computeOutputShape(e){let t,n,s,r=this.forwardLayer.computeOutputShape(e);return Array.isArray(r)&&Array.isArray(r[0])||(r=[r]),this.returnState?(s=r.slice(1),t=r[0]):t=r[0],"concat"===this.mergeMode?(t[t.length-1]*=2,n=[t]):n=null==this.mergeMode?[t,t.slice()]:[t],this.returnState?null==this.mergeMode?n.concat(s).concat(s.slice()):[t].concat(s).concat(s.slice()):ur(n)}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const r=ql(e,n,s,this.numConstants);if(e=r.inputs,n=r.initialState,s=r.constants,Array.isArray(e)&&(n=e.slice(1),e=e[0]),(null==n||0===n.length)&&null==s)return super.apply(e,t);const a=[],i=[];if(null!=n){const e=n.length;if(e%2>0)throw new nr("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=n,a.push(...n);const s=n.map(e=>new Ga({shape:e.shape}));this.forwardLayer.stateSpec=s.slice(0,e/2),this.backwardLayer.stateSpec=s.slice(e/2),i.push(...s)}if(null!=s)throw new sr("Support for constants in Bidirectional layers is not implemented yet.");const o=a[0]instanceof Ha;for(const e of a)if(e instanceof Ha!==o)throw new nr("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(o){const n=[e].concat(a),s=this.inputSpec.concat(i),r=this.inputSpec;this.inputSpec=s;const o=super.apply(n,t);return this.inputSpec=r,o}return super.apply(e,t)}call(e,t){return(0,h.tidy)(()=>{const n=t.initialState;let s,r,a,i;if(null==n)s=this.forwardLayer.call(e,t),r=this.backwardLayer.call(e,t);else{const a=n.slice(0,n.length/2),i=n.slice(n.length/2);s=this.forwardLayer.call(e,Object.assign(t,{initialState:a})),r=this.backwardLayer.call(e,Object.assign(t,{initialState:i}))}return this.returnState&&(Array.isArray(s)&&(a=s.slice(1).concat(r.slice(1))),s=s[0],r=r[0]),this.returnSequences&&(r=h.reverse(r,1)),"concat"===this.mergeMode?i=na([s,r]):"sum"===this.mergeMode?i=h.add(s,r):"ave"===this.mergeMode?i=h.mul(.5,h.add(s,r)):"mul"===this.mergeMode?i=h.mul(s,r):null==this.mergeMode&&(i=[s,r]),this.returnState?null==this.mergeMode?i.concat(a):[i].concat(a):i})}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){Pr(this.forwardLayer.name,()=>{this.forwardLayer.build(e)}),Pr(this.backwardLayer.name,()=>{this.backwardLayer.build(e)}),this.built=!0}computeMask(e,t){let n;if(Array.isArray(t)&&(t=t[0]),n=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,this.returnState){const e=this.forwardLayer.states.map(e=>null);return Array.isArray(n)?n.concat(e).concat(e):[n].concat(e).concat(e)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){const n=ji(t.layer);if(delete t.layer,null!=t.numConstants)throw new sr("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const s=t;return s.layer=n,new e(s)}}Ju.className="Bidirectional",h.serialization.registerClass(Ju);class ec extends Ka{constructor(e){super(e),this.scale=e.scale,e.offset?this.offset=e.offset:this.offset=0}getConfig(){const e={scale:this.scale,offset:this.offset},t=super.getConfig();return Object.assign(e,t),e}call(e,t){return(0,h.tidy)(()=>("float32"!==(e=za(e)).dtype&&(e=Zr(e,"float32")),(0,h.add)((0,h.mul)(e,this.scale),this.offset)))}}ec.className="Rescaling",h.serialization.registerClass(ec);const{resizeBilinear:tc,cropAndResize:nc}=h.image;class sc extends Ka{constructor(e){super(e),this.height=e.height,this.width=e.width}centerCrop(e,t,n,s,r,a,i,o){return(0,h.tidy)(()=>{let l,u=!1;const c=[t/a,n/i,(s+t)/a,(r+n)/i],d=[];3===e.rank?(u=!0,l=(0,h.stack)([e])):l=e;for(let e=0;e<l.shape[0];e++)d.push(c);const p=(0,h.tensor)(d,[d.length,4]),f=(0,h.range)(0,d.length,1,"int32"),m=nc(l,p,f,[s,r],"nearest");return Zr(u?za((0,h.unstack)(m)):m,o)})}upsize(e,t,n,s){return(0,h.tidy)(()=>Zr(tc(e,[t,n]),s))}call(e,t){return(0,h.tidy)(()=>{const t=za(e),n=t.dtype,s=t.shape,r=s[s.length-3],a=s[s.length-2];let i=0;r!==this.height&&(i=Math.floor((r-this.height)/2));let o=0;return a!==this.width&&(o=Math.floor((a-this.width)/2),0===o&&(o=1)),i>=0&&o>=0?this.centerCrop(t,i,o,this.height,this.width,r,a,n):this.upsize(e,this.height,this.width,n)})}getConfig(){const e={height:this.height,width:this.width},t=super.getConfig();return Object.assign(e,t),e}computeOutputShape(e){const t=(e=La(e)).length-3,n=e.length-2;return e[t]=this.height,e[n]=this.width,e}}sc.className="CenterCrop",h.serialization.registerClass(sc);class rc extends Ka{constructor(e){super(e),this.numTokens=e.numTokens,e.outputMode?this.outputMode=e.outputMode:this.outputMode="multiHot"}getConfig(){const e={numTokens:this.numTokens,outputMode:this.outputMode},t=super.getConfig();return Object.assign(e,t),e}computeOutputShape(e){return null==(e=La(e))?[this.numTokens]:"oneHot"===this.outputMode&&1!==e[e.length-1]?(e.push(this.numTokens),e):(e[e.length-1]=this.numTokens,e)}call(e,t){return(0,h.tidy)(()=>{let n;if("int32"!==(e=za(e)).dtype&&(e=Zr(e,"int32")),void 0!==t.countWeights){if("count"!==this.outputMode)throw new nr(`countWeights is not used when outputMode !== count.\n              Received countWeights=${t.countWeights}`);n=za(t.countWeights)}const s=(0,h.max)(e),r=(0,h.min)(e),a=(0,h.greater)(this.numTokens,s).bufferSync().get(0),i=(0,h.greaterEqual)(r,0).bufferSync().get(0);if(!a||!i)throw new nr(`Input values must be between 0 < values <= numTokens with numTokens=${this.numTokens}`);return function(e,t,n,s){let r=za(e);if("int32"!==r.dtype&&(r=Zr(r,"int32")),"int"===t)return r;const a=r.shape;if(0===r.rank&&(r=(0,h.expandDims)(r,-1)),"oneHot"===t&&1!==r.shape[r.shape.length-1]&&(r=(0,h.expandDims)(r,-1)),r.rank>2)throw new nr(`When outputMode is not int, maximum output rank is 2 Received outputMode ${t} and input shape ${a} which would result in output rank ${r.rank}.`);const i=["multiHot","oneHot"].includes(t),o=r;let l;if(l=void 0!==s&&"count"===t?(0,h.denseBincount)(o,s,n,i):(0,h.denseBincount)(o,[],n,i),"tfIdf"!==t)return l;if(s)return(0,h.mul)(l,s);throw new nr("When outputMode is 'tfIdf', weights must be provided.")}(e,this.outputMode,this.numTokens,n)})}}rc.className="CategoryEncoding",h.serialization.registerClass(rc);const ac=new Set(["bilinear","nearest"]);class ic extends Ka{constructor(e){if(super(e),this.height=e.height,this.width=e.width,e.interpolation){if(!ac.has(e.interpolation))throw new nr(`Invalid interpolation parameter: ${e.interpolation} is not implemented`);this.interpolation=e.interpolation}else this.interpolation="bilinear";this.cropToAspectRatio=Boolean(e.cropToAspectRatio)}computeOutputShape(e){const t=(e=La(e))[2];return[this.height,this.width,t]}getConfig(){const e={height:this.height,width:this.width,interpolation:this.interpolation,cropToAspectRatio:this.cropToAspectRatio},t=super.getConfig();return Object.assign(e,t),e}call(e,t){return(0,h.tidy)(()=>{const t=[this.height,this.width];if("bilinear"===this.interpolation)return h.image.resizeBilinear(e,t,!this.cropToAspectRatio);if("nearest"===this.interpolation)return h.image.resizeNearestNeighbor(e,t,!this.cropToAspectRatio);throw new Error(`Interpolation is ${this.interpolation} but only ${[...ac]} are supported`)})}}ic.className="Resizing",h.serialization.registerClass(ic);class oc{constructor(e){this.seed=e}next(){if(void 0!==this.seed)return this.seed++}}oc.className="RandomSeed";class lc extends Ka{constructor(e){super(e),this.randomGenerator=new oc(e.seed)}getConfig(){const e={seed:this.randomGenerator.seed},t=super.getConfig();return Object.assign(e,t),e}}lc.className="BaseRandomLayer";const uc=new Set(["bilinear","nearest"]);class cc extends lc{constructor(e){super(e);const{factor:t,interpolation:n="bilinear"}=e;if(this.factor=t,Array.isArray(this.factor)&&2===this.factor.length)this.widthLower=this.factor[0],this.widthUpper=this.factor[1];else{if(Array.isArray(this.factor)||!(this.factor>0))throw new nr(`Invalid factor: ${this.factor}. Must be positive number or tuple of 2 numbers`);this.widthLower=-this.factor,this.widthUpper=this.factor}if(this.widthLower<-1||this.widthUpper<-1)throw new nr(`factor must have values larger than -1. Got: ${this.factor}`);if(this.widthUpper<this.widthLower)throw new nr(`factor cannot have upper bound less than lower bound.\n        Got upper bound: ${this.widthUpper}.\n        Got lower bound: ${this.widthLower}\n      `);if(n){if(!uc.has(n))throw new nr(`Invalid interpolation parameter: ${n} is not implemented`);this.interpolation=n}}getConfig(){const e={factor:this.factor,interpolation:this.interpolation},t=super.getConfig();return Object.assign(e,t),e}computeOutputShape(e){const t=(e=La(e))[2];return[this.imgHeight,-1,t]}call(e,t){return(0,h.tidy)(()=>{const t=za(e);this.imgHeight=t.shape[t.shape.length-3];const n=t.shape[t.shape.length-2];this.widthFactor=(0,h.randomUniform)([1],1+this.widthLower,1+this.widthUpper,"float32",this.randomGenerator.next());let s=this.widthFactor.dataSync()[0]*n;s=Math.round(s);const r=[this.imgHeight,s];switch(this.interpolation){case"bilinear":return h.image.resizeBilinear(e,r);case"nearest":return h.image.resizeNearestNeighbor(e,r);default:throw new Error(`Interpolation is ${this.interpolation}\n          but only ${[...uc]} are supported`)}})}}function dc(e){return new Za(e)}function hc(e){return new Il(e)}function pc(e){return new Tl(e)}function fc(e){return new Sl(e)}function mc(e){return new Nl(e)}function gc(e){return new Al(e)}function yc(e){return new Cl(e)}function bc(e){return new Ul(e)}function xc(e){return new zl(e)}function vc(e){return new Pl(e)}function wc(e){return new Ll(e)}function kc(e){return new Bl(e)}function Tc(e){return new Vl(e)}function Sc(e){return new Gl(e)}function Nc(e){return new Hl(e)}function Ic(e){return new jl(e)}function Cc(e){return new hu(e)}function Ac(e){return new cu(e)}function Ec(e){return new lu(e)}function $c(e){return new uu(e)}function Rc(e){return new du(e)}function _c(e){return new pu(e)}function Dc(e){return new fu(e)}function Fc(e){return new mu(e)}function Oc(e){return new yu(e)}function Mc(e){return new xu(e)}function zc(e){return new wu(e)}function Lc(e){return new Su(e)}function Pc(e){return new ku(e)}function Bc(e){return new Tu(e)}function Wc(e){return new vu(e)}function Vc(e){return new Iu(e)}function Uc(e){return new Ru(e)}function Gc(e){return new _u(e)}function Hc(e){return new Du(e)}function jc(e){return new Lu(e)}function qc(e){return jc(e)}function Yc(e){return jc(e)}function Kc(e){return new Wu(e)}function Xc(e){return Kc(e)}function Zc(e){return Kc(e)}function Qc(e){return new Gu(e)}function Jc(e){return Qc(e)}function ed(e){return Qc(e)}function td(e){return new ju(e)}function nd(e){return new Ku(e)}function sd(e){return new qu(e)}function rd(e){return new Xu(e)}function ad(e){return new zu(e)}function id(e){return new Bu(e)}function od(e){return new Uu(e)}function ld(e){return new eu(e)}function ud(e){return new Jl(e)}function cd(e){return new nu(e)}function dd(e){return new tu(e)}function hd(e){return new Ql(e)}function pd(e){return new Zl(e)}function fd(e){return new ou(e)}function md(e){return new iu(e)}function gd(e){return new Kl(e)}function yd(e){return new su(e)}function bd(e){return new Ju(e)}function xd(e){return new Qu(e)}cc.className="RandomWidth",h.serialization.registerClass(cc);const vd=sd,wd=rd,kd=ad,Td=id;function Sd(e){return new Cu(e)}function Nd(e){return new Au(e)}function Id(e){return new Eu(e)}function Cd(e){return new gu(e)}function Ad(e){return new ec(e)}function Ed(e){return new sc(e)}function $d(e){return new ic(e)}function Rd(e){return new rc(e)}function _d(e){return new cc(e)}function Dd(e,t){return so(e,t)}function Fd(e,t){return oo(e,t)}function Od(e,t){return lo(e,t)}function Md(e,t){return ro(e,t)}function zd(e,t){return uo(e,t)}function Ld(e,t){return io(e,t)}function Pd(e,t){return function(e,t){return(0,h.tidy)(()=>{const n=ao(e,t),s=function(e,t){return(0,h.tidy)(()=>h.cast(h.sum(h.logicalAnd(h.equal(e,1),h.equal(t,0))),"float32"))}(e,t),r=h.add(n,s);return h.cast(h.where(h.greater(r,0),h.div(n,r),0),"float32")})}(e,t)}function Bd(e,t){return eo(e,t)}function Wd(e,t){return Ki(e,t)}function Vd(e,t){return Xi(e,t)}function Ud(e,t){return Xi(e,t)}function Gd(e,t){return Xi(e,t)}function Hd(e,t){return Yi(e,t)}function jd(e,t){return Yi(e,t)}function qd(e,t){return Yi(e,t)}function Yd(e,t){return function(e,t){return(0,h.tidy)(()=>{const n=e.sub(t).square().sum(),s=e.sub(e.mean()).square().sum();return h.scalar(1).sub(n.div(s))})}(e,t)}function Kd(e){return new bl(e)}function Xd(e){return gl(t=e),new bl({l1:null!=t?t.l1:null,l2:0});var t}function Zd(e){return gl(t=e),new bl({l2:null!=t?t.l2:null,l1:0});var t}class Qd extends Li{constructor(){super(...arguments),this.model=null}setModel(e){if(!(e instanceof Wo))throw new Error("model must be a LayersModel, not some other Container");this.model=e}}function Jd(e,t){return e<t}function eh(e,t){return e>t}class th extends Qd{constructor(e){if(super(),null==e&&(e={}),e.restoreBestWeights)throw new sr("restoreBestWeights = True is not implemented in EarlyStopping yet.");this.monitor=e.monitor||"val_loss",this.minDelta=Math.abs(e.minDelta||0),this.patience=e.patience||0,this.verbose=e.verbose||0,this.mode=e.mode||"auto",this.baseline=e.baseline,-1===["auto","min","max"].indexOf(this.mode)&&(console.warn(`EarlyStopping mode '${this.mode}' is invalid. Falling back to mode 'auto'.`),this.mode="auto"),"min"===this.mode?this.monitorFunc=Jd:"max"===this.mode||-1!==this.monitor.indexOf("acc")?this.monitorFunc=eh:this.monitorFunc=Jd,this.monitorFunc===Jd&&(this.minDelta*=-1)}async onTrainBegin(e){this.wait=0,this.stoppedEpoch=0,null!=this.baseline?this.best=this.baseline:this.best=this.monitorFunc===Jd?1/0:-1/0}async onEpochEnd(e,t){await Oi(t);const n=this.getMonitorValue(t);null!=n&&(this.monitorFunc(n-this.minDelta,this.best)?(this.best=n,this.wait=0):(this.wait++,this.wait>=this.patience&&(this.stoppedEpoch=e,this.model.stopTraining=!0)))}async onTrainEnd(e){this.stoppedEpoch>0&&this.verbose&&console.log(`Epoch ${this.stoppedEpoch}: early stopping.`)}getMonitorValue(e){null==e&&(e={});const t=e[this.monitor];return null==t&&console.warn(`Metric for EarlyStopping ${this.monitor} is not available. Available metrics are: ${Object.keys(e)}`),t}}const nh={earlyStopping:function(e){return new th(e)}};var sh,rh=n(5062),ah=n(7391);function ih(e,t,n=new Map,s=new Set){if(null==e)return null;if("function"==typeof Blob&&e instanceof Blob)return e.slice();if(s.has(e))throw new Error("Circular references are not supported.");if(n.has(e))return n.get(e);const r=t(e);if(r.recurse&&null!==r.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(r.recurse){if(dh(e)){const r=Array.isArray(e)?[]:{};s.add(e);for(const a in e){const i=ih(e[a],t,n,s);r[a]=i}return s.delete(e),e.__proto__&&(r.__proto__=e.__proto__),r}throw new Error(`Can't recurse into non-iterable type: ${e}`)}return n.set(e,r.value),r.value}function oh(e,t=uh){return lh(e,t)}function lh(e,t,n=new Set){const s=e[0];if(n.has(s))throw new Error("Circular references are not supported.");const r=t(e);if(r.recurse&&null!==r.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(r.recurse){if(dh(s)){const r=Array.isArray(s)?[]:{};n.add(s);for(const a in s){const s=lh(e.map(e=>e[a]),t,n);r[a]=s}return n.delete(s),r}throw new Error(`Can't recurse into non-iterable type: ${s}`)}return r.value}function uh(e){return null===e?null:dh(e[0])?{value:null,recurse:!0}:{value:e,recurse:!1}}async function ch(e,t){const n=new Map;ih(e,t,n);for(const e of Array.from(n.keys())){const t=n.get(e);if(h.util.isPromise(t)){const s=await t;n.set(e,s)}}return ih(e,t,n)}function dh(e){let t=!1;if(h.env().get("IS_BROWSER"))t=e instanceof TextDecoder;else{const{StringDecoder:s}=n(551);t=e instanceof s}return null!=e&&!ArrayBuffer.isView(e)&&(Array.isArray(e)||"object"==typeof e&&!(e instanceof h.Tensor)&&!(e instanceof Promise)&&!t)}function hh(e){return e instanceof h.Tensor?{value:e.clone(),recurse:!1}:dh(e)?{value:null,recurse:!0}:{value:e,recurse:!1}}class ph{constructor(e){if(this.capacity=e,this.begin=0,this.end=0,null==e)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(e<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(e),this.doubledCapacity=2*e}wrap(e){for(;e<0;)e+=this.doubledCapacity;return e%this.doubledCapacity}get(e){if(e<0)throw new RangeError("Can't get item at a negative index.");return this.data[e%this.capacity]}set(e,t){if(e<0)throw new RangeError("Can't set item at a negative index.");this.data[e%this.capacity]=t}length(){let e=this.end-this.begin;return e<0&&(e=this.doubledCapacity+e),e}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,e),this.end=this.wrap(this.end+1)}pushAll(e){for(const t of e)this.push(t)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const e=this.get(this.end);return this.set(this.end,void 0),e}unshift(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,e)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),e}shuffleExcise(e){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.wrap(this.begin+e),n=this.get(t);return this.set(t,this.pop()),n}}class fh extends ph{constructor(){super(fh.INITIAL_CAPACITY)}isFull(){return!1}push(e){super.isFull()&&this.expand(),super.push(e)}unshift(e){super.isFull()&&this.expand(),super.unshift(e)}expand(){const e=2*this.capacity,t=new Array(e),n=this.length();for(let e=0;e<n;e++)t[e]=this.get(this.wrap(this.begin+e));this.data=t,this.capacity=e,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}function mh(e){return new bh(e)}function gh(e){return new xh(e)}fh.INITIAL_CAPACITY=32;class yh{async toArray(){const e=[];let t=await this.next();for(;!t.done;)e.push(t.value),t=await this.next();return e}async toArrayForTest(){const e=this.prefetch(100),t=[];let n=await e.next();for(;!n.done;)t.push(n.value),n=await e.next();return t}async resolveFully(){let e=await this.next();for(;!e.done;)e=await this.next()}async resolveWhile(e){let t=await this.next(),n=e(t.value);for(;!t.done&&n;)t=await this.next(),n=e(t.value)}handleErrors(e){return new Ih(this,e)}filter(e){return new Sh(this,e)}map(e){return new Nh(this,e)}mapAsync(e){return new Ch(this,e)}serialMapAsync(e){return new Ch(this,e).serial()}flatmap(e){return new Eh(this,e)}async forEachAsync(e){return this.map(e).resolveFully()}async serialForEach(e){return this.serialMapAsync(e).resolveWhile(e=>!0===e)}rowMajorBatch(e,t=!0){return new Th(this,e,t)}columnMajorBatch(e,t=!0,n=uh){return this.rowMajorBatch(e,t).map(e=>oh(e,n))}concatenate(e,t){return new $h(mh([this,e]),t)}take(e){return e<0||null==e?this:new kh(this,e)}skip(e){return e<0||null==e?this:new wh(this,e)}prefetch(e){return new _h(this,e)}shuffle(e,t){return new Dh(this,e,t)}serial(){return new vh(this)}}class bh extends yh{constructor(e){super(),this.items=e,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const e=this.items[this.trav];return this.trav++,{value:(t=e,function(e,t){return ih(e,t)}(t,hh)),done:!1};var t}}class xh extends yh{constructor(e){super(),this.nextFn=e}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(e){throw e.message=`Error thrown while iterating through a dataset: ${e.message}`,e}}}class vh extends yh{constructor(e){super(),this.upstream=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){return this.upstream.next()}}class wh extends yh{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const e=await this.upstream.next();if(e.done)return e;h.dispose(e.value)}return this.upstream.next()}}class kh extends yh{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class Th extends yh{constructor(e,t,n=!0){super(),this.upstream=e,this.batchSize=t,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){const e=[];for(;e.length<this.batchSize;){const t=await this.upstream.next();if(t.done)return this.enableSmallLastBatch&&e.length>0?{value:e,done:!1}:{value:null,done:!0};e.push(t.value)}return{value:e,done:!1}}}class Sh extends yh{constructor(e,t){super(),this.upstream=e,this.predicate=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;){const e=await this.upstream.next();if(e.done||this.predicate(e.value))return e;h.dispose(e.value)}}}class Nh extends yh{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Map`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=h.tensor_util.getTensorsInContainer(e.value),n=this.transform(e.value),s=h.tensor_util.getTensorsInContainer(n);for(const e of t)h.tensor_util.isTensorInList(e,s)||e.dispose();return{value:n,done:!1}}}class Ih extends yh{constructor(e,t){super(),this.upstream=e,this.handler=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(e){if(!this.handler(e))return{value:null,done:!0}}}}class Ch extends yh{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=h.tensor_util.getTensorsInContainer(e.value),n=await this.transform(e.value),s=h.tensor_util.getTensorsInContainer(n);for(const e of t)h.tensor_util.isTensorInList(e,s)||e.dispose();return{value:n,done:!1}}}class Ah extends yh{constructor(){super(),this.outputQueue=new fh,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class Eh extends Ah{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){const e=await this.upstream.next();if(e.done)return!1;const t=h.tensor_util.getTensorsInContainer(e.value),n=this.transform(e.value),s=h.tensor_util.getTensorsInContainer(n);this.outputQueue.pushAll(n);for(const e of t)h.tensor_util.isTensorInList(e,s)||e.dispose();return!0}}class $h extends yh{constructor(e,t){super(),this.baseErrorHandler=t,this.lastRead=null,this.iterator=null,this.moreIterators=e}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(e){if(await e,null==this.iterator){const e=await this.moreIterators.next();if(e.done)return{value:null,done:!0};this.iterator=e.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const t=await this.iterator.next();return t.done?(this.iterator=null,this.readFromChain(e)):t}}!function(e){e[e.FAIL=0]="FAIL",e[e.SHORTEST=1]="SHORTEST",e[e.LONGEST=2]="LONGEST"}(sh||(sh={}));class Rh extends yh{constructor(e,t=sh.FAIL){super(),this.iterators=e,this.mismatchMode=t,this.count=0,this.currentPromise=null}summary(){return"{TODO: fill in upstream of zip summaries} -> Zip"}async nextState(e){await e;let t=0,n=0;const s=await ch(this.iterators,function(e){return e instanceof yh?{value:e.next().then(e=>(t++,e.done&&n++,e.value)),recurse:!1}:{value:null,recurse:!0}});if(t===n)return{value:null,done:!0};if(n>0)switch(this.mismatchMode){case sh.FAIL:throw new Error(`Zipped streams should have the same length. Mismatched at element ${this.count}.`);case sh.SHORTEST:return{value:null,done:!0};case sh.LONGEST:}return this.count++,{value:s,done:!1}}async next(){return this.currentPromise=this.nextState(this.currentPromise),this.currentPromise}}class _h extends yh{constructor(e,t){super(),this.upstream=e,this.bufferSize=t,this.buffer=new ph(t)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){const e=this.upstream.next();this.buffer.push(e)}}next(){return this.refill(),this.buffer.shift()}}class Dh extends _h{constructor(e,t,n){super(e,t),this.upstream=e,this.windowSize=t,this.upstreamExhausted=!1,this.random=ah.alea(n||h.util.now().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}randomInt(e){return Math.floor(this.random()*e)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const e=this.chooseIndex(),t=await this.buffer.shuffleExcise(e);if(!t.done)return this.refill(),t;this.upstreamExhausted=!0}return{value:null,done:!0}}}class Fh{constructor(){this.size=null}batch(e,t=!0){const n=this;let s;return h.util.assert(e>0,()=>`batchSize needs to be positive, but it is\n      ${e}`),s=this.size===1/0||null==this.size?this.size:t?Math.ceil(this.size/e):Math.floor(this.size/e),Oh(async()=>(await n.iterator()).columnMajorBatch(e,t,Lh),s)}concatenate(e){const t=this;let n;return n=this.size===1/0||e.size===1/0?1/0:null!=this.size&&null!=e.size?this.size+e.size:null,Oh(async()=>(await t.iterator()).concatenate(await e.iterator()),n)}filter(e){const t=this;let n;return n=this.size===1/0?1/0:null,Oh(async()=>(await t.iterator()).filter(t=>h.tidy(()=>e(t))),n)}async forEachAsync(e){return(await this.iterator()).forEachAsync(e)}map(e){const t=this;return Oh(async()=>(await t.iterator()).map(t=>h.tidy(()=>e(t))),this.size)}mapAsync(e){const t=this;return Oh(async()=>(await t.iterator()).mapAsync(e),this.size)}prefetch(e){if(null==e)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const t=this;return Oh(async()=>(await t.iterator()).prefetch(e),this.size)}repeat(e){const t=this;let n;return n=null!=this.size&&e>0?this.size*e:0===e?0:null!=this.size&&(void 0===e||e<0)?1/0:null,Oh(async()=>{return n=gh(async()=>({value:await t.iterator(),done:!1})).take(e),new $h(n,s);var n,s},n)}skip(e){const t=this;let n;return n=null!=this.size&&e>=0&&this.size>=e?this.size-e:null!=this.size&&(this.size<e||void 0===e||e<0)?0:null,Oh(async()=>(await t.iterator()).skip(e),n)}shuffle(e,t,n=!0){if(null==e||e<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const s=this,r=ah.alea(t||h.util.now().toString());return Oh(async()=>{let t=r.int32();return n&&(t+=r.int32()),(await s.iterator()).shuffle(e,t.toString())},this.size)}take(e){const t=this;let n;return n=null!=this.size&&this.size>e?e:null!=this.size&&this.size<=e?this.size:null,Oh(async()=>(await t.iterator()).take(e),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function Oh(e,t=null){return new class extends Fh{constructor(){super(...arguments),this.size=t}async iterator(){return e()}}}function Mh(e){return Oh(async()=>mh(e),e.length)}function zh(e){if(!dh(e))throw new Error("The argument to zip() must be an object or array.");let t;if(Array.isArray(e))for(let n=0;n<e.length;n++)t=null==t?e[n].size:Math.min(t,e[n].size);else if(e instanceof Object)for(const n in e)t=null==t?e[n].size:Math.min(t,e[n].size);return Oh(async()=>function(e,t=sh.FAIL){return new Rh(e,t)}(await ch(e,e=>{if(e instanceof Fh)return{value:e.iterator(),recurse:!1};if(dh(e))return{value:null,recurse:!0};throw new Error("Leaves of the structure passed to zip() must be Datasets, not primitives.")}),sh.SHORTEST),t)}function Lh(e){if(null===e)return null;return null==(t=e[0])||null===(n=t)||"object"!=typeof n&&"function"!=typeof n||Array.isArray(t)||"object"==typeof t&&t instanceof h.Tensor||h.util.isTypedArray(t)?{value:function(e){if(0===e.length)throw new Error("Can't make a batch of zero elements.");return e[0]instanceof h.Tensor?h.stack(e):h.tensor(e)}(e),recurse:!1}:{value:null,recurse:!0};var t,n}Fh.MAX_BUFFER_SIZE=1e4;class Ph extends Fh{constructor(e){super(),this.input=e}async iterator(){return(await this.input.iterator()).decodeUTF8().split("\n").map(e=>(e.endsWith("\r")&&(e=e.slice(0,-1)),e))}}const Bh='"',Wh=Symbol("out"),Vh=Symbol("field"),Uh=Symbol("quote"),Gh=Symbol("quoteafterquote"),Hh=Symbol("quoteinquote");class jh extends Fh{async columnNames(){return this.columnNamesValidated||await this.setColumnNames(),this.configuredColumnsOnly?Object.keys(this.columnConfigs):this.fullColumnNames}async setColumnNames(){const e=await this.maybeReadHeaderLine();if(!this.fullColumnNames&&!e)throw new Error("Column names must be provided if there is no header line.");this.fullColumnNames&&e&&h.util.assert(e.length===this.fullColumnNames.length,()=>"The length of provided columnNames ("+this.fullColumnNames.length.toString()+") does not match the length of the header line read from file ("+e.length.toString()+")."),this.fullColumnNames||(this.fullColumnNames=e);const t=this.fullColumnNames.reduce((e,t)=>(e[t]=e[t]+1||1,e),{}),n=Object.keys(t).filter(e=>t[e]>1);if(h.util.assert(0===n.length,()=>"Duplicate column names found: "+n.toString()),this.columnConfigs)for(const e of Object.keys(this.columnConfigs))if(-1===this.fullColumnNames.indexOf(e))throw new Error('The key "'+e+'" provided in columnConfigs does not match any of the column names ('+this.fullColumnNames.toString()+").");this.columnNamesValidated=!0}async maybeReadHeaderLine(){if(this.hasHeader){const e=await this.base.iterator(),t=await e.next();if(t.done)throw new Error("No data was found for CSV parsing.");const n=t.value;return this.parseRow(n,!1)}return null}constructor(e,t){super(),this.input=e,this.hasHeader=!0,this.fullColumnNames=null,this.columnNamesValidated=!1,this.columnConfigs=null,this.configuredColumnsOnly=!1,this.delimiter=",",this.delimWhitespace=!1,this.base=new Ph(e),t||(t={}),this.hasHeader=!1!==t.hasHeader,this.fullColumnNames=t.columnNames,this.columnConfigs=t.columnConfigs,this.configuredColumnsOnly=t.configuredColumnsOnly,t.delimWhitespace?(h.util.assert(null==t.delimiter,()=>"Delimiter should not be provided when delimWhitespace is true."),this.delimWhitespace=!0,this.delimiter=" "):this.delimiter=t.delimiter?t.delimiter:","}async iterator(){this.columnNamesValidated||await this.setColumnNames();let e=await this.base.iterator();return this.hasHeader&&(e=e.skip(1)),e.map(e=>this.makeDataElement(e))}makeDataElement(e){const t=this.parseRow(e),n={},s={};for(let r=0;r<this.fullColumnNames.length;r++){const a=this.fullColumnNames[r],i=this.columnConfigs?this.columnConfigs[a]:null;if(!this.configuredColumnsOnly||i){const o=t[r];let l=null;if(""===o)if(i&&void 0!==i.default)l=i.default;else{if(i&&(i.required||i.isLabel))throw new Error(`Required column ${a} is empty in this line: ${e}`);l=void 0}else{const e=Number(o);if(isNaN(e))l=i&&"bool"===i.dtype?this.getBoolean(o):o;else if(i&&i.dtype)switch(i.dtype){case"float32":default:l=e;break;case"int32":l=Math.floor(e);break;case"bool":l=this.getBoolean(o)}else l=e}i&&i.isLabel?s[a]=l:n[a]=l}}return 0===Object.keys(s).length?n:{xs:n,ys:s}}getBoolean(e){return"1"===e||"true"===e.toLowerCase()?1:0}parseRow(e,t=!0){const n=[];let s=0;const r=e.length;let a=Wh;for(let t=0;t<r;t++)switch(a){case Wh:switch(e.charAt(t)){case Bh:s=t+1,a=Uh;break;case this.delimiter:if(s=t+1," "===this.delimiter&&this.delimWhitespace)break;n.push(""),a=Wh;break;default:a=Vh,s=t}break;case Vh:e.charAt(t)===this.delimiter&&(n.push(e.substring(s,t)),a=Wh,s=t+1);break;case Uh:e.charAt(t)===Bh&&(a=Gh);break;case Gh:switch(e.charAt(t)){case this.delimiter:n.push(e.substring(s,t-1)),a=Wh,s=t+1;break;case Bh:a=Uh;break;default:a=Hh}break;case Hh:e.charAt(t)===Bh&&(a=Uh)}if(a===Gh?n.push(e.substring(s,r-1)):n.push(e.substring(s)),t&&n.length!==this.fullColumnNames.length)throw new Error(`Invalid row in csv file. Should have ${this.fullColumnNames.length} elements in a row, but got ${n}`);return n}}class qh extends yh{constructor(e){super(),this.microphoneConfig=e,this.isClosed=!1,this.fftSize=e.fftSize||1024;const t=Math.log2(this.fftSize);if(this.fftSize<0||t<4||t>14||!Number.isInteger(t))throw new Error(`Invalid fftSize: it must be a power of 2 between 2 to 4 and 2 to 14, but got ${this.fftSize}`);if(this.numFrames=e.numFramesPerSpectrogram||43,this.sampleRateHz=e.sampleRateHz,this.columnTruncateLength=e.columnTruncateLength||this.fftSize,this.audioTrackConstraints=e.audioTrackConstraints,this.smoothingTimeConstant=e.smoothingTimeConstant||0,this.includeSpectrogram=!1!==e.includeSpectrogram,this.includeWaveform=!0===e.includeWaveform,!this.includeSpectrogram&&!this.includeWaveform)throw new Error("Both includeSpectrogram and includeWaveform are false. At least one type of data should be returned.")}summary(){return"microphone"}static async create(e={}){if(!(0,h.env)().get("IS_BROWSER"))throw new Error("microphone API is only supported in browser environment.");const t=new qh(e);return await t.start(),t}async start(){try{this.stream=await navigator.mediaDevices.getUserMedia({audio:null==this.audioTrackConstraints||this.audioTrackConstraints,video:!1})}catch(e){throw new Error(`Error thrown while initializing video stream: ${e.message}`)}if(!this.stream)throw new Error("Could not obtain audio from microphone.");const e=window.AudioContext||window.webkitAudioContext;if(this.audioContext=new e,this.sampleRateHz){if(this.audioContext.sampleRate!==this.sampleRateHz)throw new Error(`Mismatch in sampling rate: Expected: ${this.sampleRateHz}; Actual: ${this.audioContext.sampleRate}`)}else this.sampleRateHz=this.audioContext.sampleRate;const t=this.audioContext.createMediaStreamSource(this.stream);this.analyser=this.audioContext.createAnalyser(),this.analyser.fftSize=2*this.fftSize,this.analyser.smoothingTimeConstant=this.smoothingTimeConstant,t.connect(this.analyser),this.freqData=new Float32Array(this.fftSize),this.timeData=new Float32Array(this.fftSize)}async next(){if(this.isClosed)return{value:null,done:!0};let e,t;const n=await this.getAudioData();if(this.includeSpectrogram){const t=this.flattenQueue(n.freqDataQueue);e=this.getTensorFromAudioDataArray(t,[this.numFrames,this.columnTruncateLength,1])}if(this.includeWaveform){const e=this.flattenQueue(n.timeDataQueue);t=this.getTensorFromAudioDataArray(e,[this.numFrames*this.fftSize,1])}return{value:{spectrogram:e,waveform:t},done:!1}}async capture(){return(await this.next()).value}async getAudioData(){const e=[],t=[];let n=0;return new Promise(s=>{const r=setInterval(()=>{this.includeSpectrogram&&(this.analyser.getFloatFrequencyData(this.freqData),this.freqData[0]===-1/0&&s({freqDataQueue:e,timeDataQueue:t}),e.push(this.freqData.slice(0,this.columnTruncateLength))),this.includeWaveform&&(this.analyser.getFloatTimeDomainData(this.timeData),t.push(this.timeData.slice())),++n===this.numFrames&&(clearInterval(r),s({freqDataQueue:e,timeDataQueue:t}))},this.fftSize/this.sampleRateHz*1e3)})}stop(){this.isClosed||(this.isClosed=!0,this.analyser.disconnect(),this.audioContext.close(),null!=this.stream&&this.stream.getTracks().length>0&&this.stream.getTracks()[0].stop())}toArray(){throw new Error("Can not convert infinite audio stream to array.")}getSampleRate(){return this.sampleRateHz}flattenQueue(e){const t=e[0].length,n=new Float32Array(e.length*t);return e.forEach((e,s)=>n.set(e,s*t)),n}getTensorFromAudioDataArray(e,t){const n=new Float32Array(h.util.sizeFromShape(t));return n.set(e,n.length-e.length),(0,h.tensor)(n,t)}}class Yh extends yh{constructor(e,t){if(super(),this.webcamVideoElement=e,this.webcamConfig=t,this.isClosed=!0,this.resize=!1,this.needToResize())if(this.resize=!0,this.cropSize=[this.webcamConfig.resizeHeight,this.webcamConfig.resizeWidth],this.cropBoxInd=(0,h.tensor1d)([0],"int32"),this.webcamConfig.centerCrop){const e=1*this.webcamConfig.resizeWidth/this.webcamVideoElement.width,t=1*this.webcamConfig.resizeHeight/this.webcamVideoElement.height,n=(1-e)/2,s=(1-t)/2,r=n+e,a=t+s;this.cropBox=(0,h.tensor2d)([s,n,a,r],[1,4])}else this.cropBox=(0,h.tensor2d)([0,0,1,1],[1,4])}summary(){return"webcam"}static async create(e,t={}){if(!(0,h.env)().get("IS_BROWSER"))throw new Error("tf.data.webcam is only supported in browser environment.");if(!e){if(e=document.createElement("video"),!t.resizeWidth||!t.resizeHeight)throw new Error("Please provide webcam video element, or resizeWidth and resizeHeight to create a hidden video element.");e.width=t.resizeWidth,e.height=t.resizeHeight}const n=new Yh(e,t);return await n.start(),n}async start(){this.webcamConfig.facingMode&&h.util.assert("user"===this.webcamConfig.facingMode||"environment"===this.webcamConfig.facingMode,()=>`Invalid webcam facing mode: ${this.webcamConfig.facingMode}. Please provide 'user' or 'environment'`);try{this.stream=await navigator.mediaDevices.getUserMedia({video:{deviceId:this.webcamConfig.deviceId,facingMode:this.webcamConfig.facingMode?this.webcamConfig.facingMode:"user",width:this.webcamVideoElement.width,height:this.webcamVideoElement.height}})}catch(e){throw e.message=`Error thrown while initializing video stream: ${e.message}`,e}if(!this.stream)throw new Error("Could not obtain video from webcam.");try{this.webcamVideoElement.srcObject=this.stream}catch(e){console.log(e),this.webcamVideoElement.src=window.URL.createObjectURL(this.stream)}return this.webcamVideoElement.play(),this.isClosed=!1,new Promise(e=>{this.webcamVideoElement.onloadedmetadata=()=>{e()}})}async next(){if(this.isClosed)return{value:null,done:!0};let e;try{e=h.browser.fromPixels(this.webcamVideoElement)}catch(e){throw new Error(`Error thrown converting video to pixels: ${JSON.stringify(e)}`)}if(!this.resize)return{value:e,done:!1};try{return{value:this.cropAndResizeFrame(e),done:!1}}catch(e){throw new Error(`Error thrown cropping the video: ${e.message}`)}finally{e.dispose()}}needToResize(){return!(!this.webcamConfig.resizeWidth||!this.webcamConfig.resizeHeight||this.webcamVideoElement.width===this.webcamConfig.resizeWidth&&this.webcamVideoElement.height===this.webcamConfig.resizeHeight)}cropAndResizeFrame(e){return(0,h.tidy)(()=>{const t=(0,h.expandDims)((0,h.cast)(e,"float32"),0);let n;n=h.image.cropAndResize(t,this.cropBox,this.cropBoxInd,this.cropSize,"bilinear");const s=n.shape;return(0,h.reshape)(n,s.slice(1))})}async capture(){return(await this.next()).value}stop(){this.stream.getTracks().forEach(e=>e.stop());try{this.webcamVideoElement.srcObject=null}catch(e){console.log(e),this.webcamVideoElement.src=null}this.isClosed=!0}toArray(){throw new Error("Can not convert infinite video stream to array.")}}class Kh{}class Xh extends yh{split(e){return new Zh(this,e)}}class Zh extends Xh{constructor(e,t){super(),this.upstream=e,this.impl=new Qh(e,t)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class Qh extends Ah{constructor(e,t){super(),this.upstream=e,this.separator=t,this.carryover=""}summary(){return`${this.upstream.summary()} -> Split('${this.separator}')`}async pump(){const e=await this.upstream.next();if(e.done)return""!==this.carryover&&(this.outputQueue.push(this.carryover),this.carryover="",!0);const t=e.value.split(this.separator);t[0]=this.carryover+t[0];for(const e of t.slice(0,-1))this.outputQueue.push(e);return this.carryover=t[t.length-1],!0}}class Jh extends yh{decodeUTF8(){return new ep(this)}}class ep extends Xh{constructor(e){super(),this.upstream=e,this.impl=new tp(e)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class tp extends Ah{constructor(e){if(super(),this.upstream=e,(0,h.env)().get("IS_BROWSER"))this.decoder=new TextDecoder("utf-8");else{const{StringDecoder:e}=n(4530);this.decoder=new e("utf8")}}summary(){return`${this.upstream.summary()} -> Utf8`}async pump(){const e=await this.upstream.next();let t,n;return!e.done&&(t=e.value,n=(0,h.env)().get("IS_BROWSER")?this.decoder.decode(t,{stream:!0}):this.decoder.write(Buffer.from(t.buffer)),this.outputQueue.push(n),!0)}}class np extends Jh{constructor(e,t={}){super(),this.file=e,this.options=t,h.util.assert(e instanceof Uint8Array||!!(0,h.env)().get("IS_BROWSER")&&(e instanceof File||e instanceof Blob),()=>"FileChunkIterator only supports File, Blob and Uint8Array right now."),this.offset=t.offset||0,this.chunkSize=t.chunkSize||1048576}summary(){return`FileChunks ${this.file}`}async next(){if(this.offset>=(this.file instanceof Uint8Array?this.file.byteLength:this.file.size))return{value:null,done:!0};const e=new Promise((e,t)=>{const n=this.offset+this.chunkSize;if(this.file instanceof Uint8Array)e(new Uint8Array(this.file.slice(this.offset,n)));else{const s=new FileReader;s.onload=n=>{let r=s.result;if(r instanceof ArrayBuffer&&(r=new Uint8Array(r)),!(r instanceof Uint8Array))return t(new TypeError("FileReader returned unknown type."));e(r)},s.onabort=e=>t(new Error("Aborted")),s.onerror=e=>t(new Error(e.type));const r=this.file.slice(this.offset,n);s.readAsArrayBuffer(r)}this.offset=n});return{value:await e,done:!1}}}function sp(e){return"string"==typeof e&&"file://"===e.slice(0,7)}class rp extends Kh{constructor(e,t={}){super(),this.input=e,this.options=t}async iterator(){if(sp(this.input)&&(0,h.env)().get("IS_NODE")){const e=n(8108);this.input=e.readFileSync(this.input.slice(7))}return new np(this.input,this.options)}}class ap extends Kh{constructor(e,t={}){super(),this.url=e,this.fileOptions=t}async iterator(){return sp(this.url)?new rp(this.url,this.fileOptions).iterator():async function(e,t={},n){let s,r;var a;"string"==typeof e?s=e:(s=e.url,r={method:(a=e).method,headers:a.headers,body:a.body,mode:a.mode,credentials:a.credentials,cache:a.cache,redirect:a.redirect,referrer:a.referrer,integrity:a.integrity});const i=await(n||h.util.fetch)(s,r);if(i.ok){const e=new Uint8Array(await i.arrayBuffer());return new np(e,t)}throw new Error(i.statusText)}(this.url,this.fileOptions)}}function ip(e,t={}){return new jh(new ap(e),t)}function op(e){const t=gh(e);return Oh(async()=>t)}function lp(e){return Oh(async()=>{const t=await e();return gh(()=>t.next())})}async function up(e,t){return Yh.create(e,t)}async function cp(e){return qh.create(e)}const dp="4.22.0";function hp(e,t){Array.isArray(e)||(e=[e]),e.forEach(e=>{null!=e&&h.util.assert("complex64"!==e.dtype,()=>`${t} does not support complex64 tensors in the CPU backend.`)})}const pp=h.kernel_impls.whereImpl;class fp extends h.KernelBackend{nextDataId(){return fp.nextDataId++}constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new h.DataStorage(this,(0,h.engine)())}write(e,t,n){this.firstUse&&(this.firstUse=!1,(0,h.env)().get("IS_NODE")&&h.backend_util.warn("\n============================\nHi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. \n============================"));const s={id:this.nextDataId()};return this.data.set(s,{values:e,dtype:n,refCount:1}),s}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&h.util.isString(n[0])){const r=n.map(e=>h.util.encodeString(e));s=this.write(r,e,t)}else s=this.write(n,e,t);return{dataId:s,shape:e,dtype:t}}refCount(e){return this.data.has(e)?this.data.get(e).refCount:0}incRef(e){this.data.get(e).refCount++}decRef(e){this.data.has(e)&&this.data.get(e).refCount--}move(e,t,n,s,r){this.data.set(e,{values:t,dtype:s,refCount:r})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);if("complex64"===t){const e=this.readSync(n.real.dataId),t=this.readSync(n.imag.dataId);return h.backend_util.mergeRealAndImagArrays(e,t)}return h.util.convertBackendValuesAndArrayBuffer(this.data.get(e).values,t)}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map(e=>h.util.decodeString(e));return(0,h.buffer)(e.shape,e.dtype,n)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return(0,h.buffer)(e.shape,e.dtype,t)}makeOutput(e,t,n){return(0,h.engine)().makeTensorFromTensorInfo(this.makeTensorInfo(t,n,e),this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const t=h.util.now();return e(),{kernelMs:h.util.now()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){hp([e],"where");const t=this.readSync(e.dataId);return pp(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}function mp(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}fp.nextDataId=0;const gp={kernelName:h.Abs,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;hp(t,"abs");let s=new Float32Array(h.util.sizeFromShape(t.shape));return s=mp(n.data.get(t.dataId).values),n.makeOutput(s,t.shape,t.dtype)}};function yp(e){return(t,n,s,r,a)=>{const i=h.backend_util.assertAndGetBroadcastShape(t,n),o=i.length,l=h.util.computeStrides(i),u=h.util.sizeFromShape(i),c=h.util.getTypedArrayFromDType(a,u),d=t.length,p=n.length,f=h.util.computeStrides(t),m=h.util.computeStrides(n),g=h.backend_util.getBroadcastDims(t,i),y=h.backend_util.getBroadcastDims(n,i);if(g.length+y.length===0)for(let t=0;t<c.length;++t)c[t]=e(s[t%s.length],r[t%r.length]);else for(let t=0;t<c.length;++t){const n=h.util.indexToLoc(t,o,l),a=n.slice(-d);g.forEach(e=>a[e]=0);const i=h.util.locToIndex(a,d,f),u=n.slice(-p);y.forEach(e=>u[e]=0);const b=h.util.locToIndex(u,p,m);c[t]=e(s[i],r[b])}return[c,i]}}function bp(e){const{inputs:t,backend:n}=e,{real:s,imag:r}=t,a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,o=n.makeTensorInfo(s.shape,"complex64");return n.data.get(o.dataId).complexTensorInfos={real:n.makeTensorInfo(s.shape,"float32",a),imag:n.makeTensorInfo(r.shape,"float32",i)},o}const xp={kernelName:h.Complex,backendName:"cpu",kernelFunc:bp};function vp(e,t,n="float32"){if("complex64"===n)return bp({inputs:{real:vp(e,t,"float32"),imag:vp(e,t,"float32")},backend:e});const s=h.util.makeZerosTypedArray(h.util.sizeFromShape(t),n);return e.makeTensorInfo(t,n,s)}function wp(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const kp={kernelName:h.Identity,backendName:"cpu",kernelFunc:wp};function Tp(e){const{inputs:t,backend:n}=e,{input:s}=t,r=n.data.get(s.dataId).complexTensorInfos.real,a=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,a)}const Sp={kernelName:h.Real,backendName:"cpu",kernelFunc:Tp};function Np(e,t,n,s){if("int32"===s)return[t,"int32",Int32Array.from(e)];if("bool"===s){const s=h.util.toTypedArray([0],n),[r,a]=yp((e,t)=>e!==t?1:0)(t,[],e,s,"bool");return[a,"bool",r]}throw new Error(`Error in Cast: failed to cast ${n} to ${s}`)}function Ip(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dtype:a}=s;if("complex64"===a){if("complex64"===r.dtype)return wp({inputs:{x:r},backend:n});const e=vp(n,r.shape,r.dtype),t=Ip({inputs:{x:r},backend:n,attrs:{dtype:"float32"}}),s=bp({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),s}if("complex64"===r.dtype){const e=Tp({inputs:{input:r},backend:n}),t=Ip({inputs:{x:e},backend:n,attrs:{dtype:a}});return n.disposeIntermediateTensorInfo(e),t}if(!h.util.hasEncodingLoss(r.dtype,a)){const e=wp({inputs:{x:r},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:a}}const i=n.data.get(r.dataId).values,[o,l,u]=Np(i,r.shape,r.dtype,a);return n.makeTensorInfo(o,l,u)}const Cp={kernelName:h.Cast,backendName:"cpu",kernelFunc:Ip};function Ap(e,t,n,s){return null==n?({inputs:n,backend:r})=>{const{a,b:i}=n,o=r;hp([a,i],e);const l=o.data.get(a.dataId).values,u=o.data.get(i.dataId).values,c="string"===a.dtype?h.backend_util.fromUint8ToStringArray(l):l,d="string"===a.dtype?h.backend_util.fromUint8ToStringArray(u):u,p=s||a.dtype,[f,m]=t(a.shape,i.shape,c,d,p);return o.makeTensorInfo(m,p,f)}:({inputs:e,backend:r})=>{const{a,b:i}=e,o=r;if("complex64"===a.dtype||"complex64"===i.dtype){const e=Ip({inputs:{x:a},backend:o,attrs:{dtype:"complex64"}}),t=o.data.get(e.dataId),s=t.complexTensorInfos.real,r=t.complexTensorInfos.imag,l=o.data.get(s.dataId).values,u=o.data.get(r.dataId).values,c=Ip({inputs:{x:i},backend:o,attrs:{dtype:"complex64"}}),d=o.data.get(c.dataId),h=d.complexTensorInfos.real,p=d.complexTensorInfos.imag,f=o.data.get(h.dataId).values,m=o.data.get(p.dataId).values,[g,y,b]=n(a.shape,i.shape,l,u,f,m),x=o.makeTensorInfo(b,"float32",g),v=o.makeTensorInfo(b,"float32",y),w=bp({inputs:{real:x,imag:v},backend:o});return o.disposeIntermediateTensorInfo(e),o.disposeIntermediateTensorInfo(c),o.disposeIntermediateTensorInfo(x),o.disposeIntermediateTensorInfo(v),w}{const e=o.data.get(a.dataId).values,n=o.data.get(i.dataId).values,r=s||a.dtype,[l,u]=t(a.shape,i.shape,e,n,r);return o.makeTensorInfo(u,r,l)}}}function Ep(e){return(t,n,s,r,a,i)=>{const o=h.backend_util.assertAndGetBroadcastShape(t,n),l=h.util.sizeFromShape(o),u=o.length,c=h.util.computeStrides(o),d=h.util.getTypedArrayFromDType("float32",l),p=h.util.getTypedArrayFromDType("float32",l),f=h.backend_util.getBroadcastDims(t,o),m=h.backend_util.getBroadcastDims(n,o),g=h.backend_util.mergeRealAndImagArrays(s,r),y=h.backend_util.mergeRealAndImagArrays(a,i),b=t.length,x=h.util.computeStrides(t),v=n.length,w=h.util.computeStrides(n);if(f.length+m.length===0)for(let t=0;t<d.length;t++){const n=t%g.length,s=t%y.length,r=e(g[2*n],g[2*n+1],y[2*s],y[2*s+1]);d[t]=r.real,p[t]=r.imag}else for(let t=0;t<d.length;t++){const n=h.util.indexToLoc(t,u,c),s=n.slice(-b);f.forEach(e=>s[e]=0);const r=h.util.locToIndex(s,b,x),a=n.slice(-v);m.forEach(e=>a[e]=0);const i=h.util.locToIndex(a,v,w),o=e(g[2*r],g[2*r+1],y[2*i],y[2*i+1]);d[t]=o.real,p[t]=o.imag}return[d,p,o]}}const $p=yp((e,t)=>e+t),Rp=Ep((e,t,n,s)=>({real:e+n,imag:t+s})),_p=Ap(h.Add,$p,Rp),Dp={kernelName:h.Add,backendName:"cpu",kernelFunc:_p};function Fp(e,t,n,s,r){const a=h.util.sizeFromShape(s),i=h.util.makeZerosTypedArray(r,n);for(let n=0;n<e.length;n++){const s=e[n];if(s<0)throw new Error("Input x must be non-negative!");s>=r||(i[s]+=a>0?t[n]:1)}return i}function Op(e,t,n,s=!1){const r=e.shape[0],a=e.shape[1],i=(0,h.buffer)([r,n],t.dtype);for(let o=0;o<r;o++)for(let r=0;r<a;r++){const a=e.get(o,r);if(a<0)throw new Error("Input x must be non-negative!");a>=n||(s?i.set(1,o,a):t.size>0?i.set(i.get(o,a)+t.get(o,r),o,a):i.set(i.get(o,a)+1,o,a))}return i}const Mp=yp((e,t)=>e&t),zp=Ap(h.BitwiseAnd,Mp),Lp={kernelName:h.BitwiseAnd,backendName:"cpu",kernelFunc:zp};function Pp(e){return(t,n,s)=>{const r=h.util.getArrayFromDType(n,t.length);for(let n=0;n<t.length;++n)r[n]=e(t[n],s);return r}}function Bp(e,t,n){return Wp(e,Pp(t),n)}function Wp(e,t,n){return({inputs:s,attrs:r,backend:a})=>{const{x:i}=s;hp(i,e);const o=a,l=o.data.get(i.dataId).values;let u;if("string"===i.dtype){if(!Array.isArray(l))throw new Error("String tensor's value was not an instance of Array");u=h.backend_util.fromUint8ToStringArray(l)}else u=l;const c=n||i.dtype,d=t(u,c,r);return o.makeTensorInfo(i.shape,c,d)}}const Vp=Pp(e=>Math.ceil(e)),Up=Wp(h.Ceil,Vp),Gp={kernelName:h.Ceil,backendName:"cpu",kernelFunc:Up};function Hp(e,t,n,s){const r=h.util.getArrayFromDType(n,h.util.sizeFromShape(t));if(s&&"string"!==n){let t=0;e.forEach(e=>{const n=h.util.sizeFromShape(e.shape);r.set(e.vals,t),t+=n})}else{let s=0;e.forEach(e=>{const a="string"===n?h.backend_util.fromUint8ToStringArray(e.vals):e.vals;let i=0;for(let n=0;n<e.shape[0];++n){const o=n*t[1]+s;for(let t=0;t<e.shape[1];++t)r[o+t]=a[i++]}s+=e.shape[1]})}return r}const jp=yp((e,t)=>e===t?1:0),qp=Ap(h.Equal,jp,null,"bool"),Yp={kernelName:h.Equal,backendName:"cpu",kernelFunc:qp},Kp=Pp(e=>Math.exp(e)),Xp=Wp(h.Exp,Kp,"float32"),Zp={kernelName:h.Exp,backendName:"cpu",kernelFunc:Xp},Qp=Pp(e=>Math.expm1(e)),Jp=Wp(h.Expm1,Qp),ef={kernelName:h.Expm1,backendName:"cpu",kernelFunc:Jp},tf=Pp(e=>Math.floor(e)),nf=Wp(h.Floor,tf),sf={kernelName:h.Floor,backendName:"cpu",kernelFunc:nf},rf=yp((e,t)=>Math.floor(e/t)),af=Ap(h.FloorDiv,rf,null,"int32"),of={kernelName:h.FloorDiv,backendName:"cpu",kernelFunc:af};function lf(e,t,n,s,r,a,i,o,l){const u=(0,h.buffer)([s,a],n);for(let n=0;n<s;n++){const s=[];let c=0;for(let t=0;t<r;t++){const a=e[n*r+t];c+=a*i[t],s.push(a)}if(c<0||c>=l/a)throw new Error(`Invalid indices: ${s} does not index into ${o}`);for(let e=0;e<a;e++)u.values[n*a+e]=t.get(...t.indexToLoc(c*a+e))}return u}function uf(e,t,n){const s=(0,h.buffer)(n,e.dtype);for(let n=0;n<s.size;++n){const r=s.indexToLoc(n).slice(),a=r[0],i=r[2],o=t.locToIndex([a,i]);r[2]=t.values[o];const l=e.locToIndex(r);0<=l&&l<e.values.length&&(s.values[n]=e.values[l])}return s}const cf=yp((e,t)=>e>t?1:0),df=Ap(h.Greater,cf,null,"bool"),hf={kernelName:h.Greater,backendName:"cpu",kernelFunc:df},pf=yp((e,t)=>e>=t?1:0),ff=Ap(h.GreaterEqual,pf,null,"bool"),mf={kernelName:h.GreaterEqual,backendName:"cpu",kernelFunc:ff},gf=yp((e,t)=>e<t?1:0),yf=Ap(h.Less,gf,null,"bool"),bf={kernelName:h.Less,backendName:"cpu",kernelFunc:yf},xf=yp((e,t)=>e<=t?1:0),vf=Ap(h.LessEqual,xf,null,"bool"),wf={kernelName:h.LessEqual,backendName:"cpu",kernelFunc:vf};function kf(e,t,n){const s=(t-e)/(n-1),r=h.util.makeZerosTypedArray(n,"float32");r[0]=e;for(let e=1;e<r.length;e++)r[e]=r[e-1]+s;return r}const Tf=Pp(e=>Math.log(e)),Sf=Wp(h.Log,Tf),Nf={kernelName:h.Log,backendName:"cpu",kernelFunc:Sf};function If(e,t,n,s){const r=h.util.getTypedArrayFromDType(s,h.util.sizeFromShape(n));for(let n=0;n<r.length;++n){const s=n*t;let a=e[s];for(let n=0;n<t;++n){const t=e[s+n];(Number.isNaN(t)||t>a)&&(a=t)}r[n]=a}return r}const Cf=yp((e,t)=>Math.max(e,t)),Af=Ap(h.Maximum,Cf),Ef={kernelName:h.Maximum,backendName:"cpu",kernelFunc:Af},$f=yp((e,t)=>Math.min(e,t)),Rf=Ap(h.Minimum,$f),_f={kernelName:h.Minimum,backendName:"cpu",kernelFunc:Rf},Df=yp((e,t)=>e*t),Ff=Ep((e,t,n,s)=>({real:e*n-t*s,imag:e*s+t*n})),Of=Ap(h.Multiply,Df,Ff),Mf={kernelName:h.Multiply,backendName:"cpu",kernelFunc:Of};function zf(e,t,n){const s=h.util.createScalarValue(-1,n);return Df([],t,s,e,n)}const Lf={kernelName:h.Neg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;hp(s,"neg");const r=n.data.get(s.dataId).values,[a,i]=zf(r,s.shape,s.dtype);return n.makeTensorInfo(i,s.dtype,a)}},Pf=yp((e,t)=>e!==t?1:0),Bf=Ap(h.NotEqual,Pf,null,"bool"),Wf={kernelName:h.NotEqual,backendName:"cpu",kernelFunc:Bf};function Vf(e,t,n,s,r){const a=t.length,i=h.util.sizeFromShape(t),o=h.util.computeStrides(t),l=h.util.computeStrides(r),u=h.util.getTypedArrayFromDType(n,h.util.sizeFromShape(r));for(let t=0;t<i;++t){const n=h.util.indexToLoc(t,a,o),r=new Array(n.length);for(let e=0;e<r.length;e++)r[e]=n[s[e]];u[h.util.locToIndex(r,a,l)]=e[t]}return u}function Uf(e){const{inputs:t,attrs:n,backend:s}=e,{x:r}=t,{perm:a}=n;hp(r,"transpose");const i=r.shape.length,o=new Array(i);for(let e=0;e<o.length;e++)o[e]=r.shape[a[e]];const l=Vf(s.data.get(r.dataId).values,r.shape,r.dtype,a,o);return{dataId:s.write(l,o,r.dtype),shape:o,dtype:r.dtype}}const Gf={kernelName:h.Transpose,backendName:"cpu",kernelFunc:Uf};function Hf(e,t,n,s){const[r,a]=h.backend_util.computeOutAndReduceShapes(e,s),i=(0,h.upcastType)(t,"int32"),o=h.util.makeZerosTypedArray(h.util.sizeFromShape(r),i),l=h.util.sizeFromShape(a);for(let e=0;e<o.length;++e){const t=e*l;let s=1;for(let e=0;e<l;++e)s*=n[t+e];o[e]=s}return{outVals:o,outShape:r,outDtype:i}}const jf={kernelName:h.Prod,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;hp(r,"prod");const o=r.shape.length,l=h.util.parseAxisParam(a,r.shape),u=h.backend_util.getAxesPermutation(l,o);let c=l,d=r;const p=[];null!=u&&(d=Uf({inputs:{x:r},backend:n,attrs:{perm:u}}),p.push(d),c=h.backend_util.getInnerMostAxes(c.length,o));const f=n.data.get(d.dataId).values,{outVals:m,outShape:g,outDtype:y}=Hf(d.shape,d.dtype,f,c);let b=g;return i&&(b=h.backend_util.expandShapeToKeepDim(g,l)),p.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(b,y,m)}};function qf(e,t){const n=e.slice(0,t);for(;n.length<t;)n.push(1);for(let s=t;s<e.length;s++)n[t-1]*=e[s];return n}function Yf(e,t,n,s,r,a,i,o){if(0===e.length)throw new Error("paramsNestedSplits must be non empty");if(0===t[0].length)throw new Error("Split tensors must not be scalars");if(function(e,t,n){e.forEach((e,s)=>{if(e<0||e>=n){const r=h.util.indexToLoc(s,t.length,h.util.computeStrides(t)).join(",");throw new Error(`indices[${r}] = ${e} is not in [0, ${n})`)}})}(a,i,t[0][0]-1),0===s.length)throw new Error("params.rank must be nonzero");const l=s[0],{outSplits:u,valueSlices:c,numValues:d}=function(e,t,n,s){const r=[];let a=0;const i=t.length-1+n.length,o=new Array(i).fill(null).map(()=>[0]);!function(e,t){for(let n=0;n<e.length;++n){const s=e[n],r=n===e.length-1?t:e[n+1].length;if(0===s.length)throw new Error("Ragged splits may not be empty");if(s[0]<0)throw new Error("Ragged splits must be non-negative");if(s[s.length-1]>r)throw new Error("Ragged splits must not point past values");for(let e=1;e<s.length;++e)if(s[e-1]>s[e])throw new Error("Ragged splits must be sorted in ascending order")}}(n,s);let l=1;for(let e=0;e<t.length-1;++e){l*=t[e];const n=t[e+1];for(let t=1;t<l+1;++t)o[e].push(t*n)}for(let s=0;s<e.length;++s){let i=e[s],l=e[s]+1;for(let e=0;e<n.length;++e){const s=n[e],r=e+t.length-1;if(r>=0){const e=o[r],t=e[e.length-1]-s[i];for(let e=i;e<l;++e)o[r].push(s[e+1]+t)}i=s[i],l=s[l]}l!==i&&(r.push([i,l]),a+=l-i)}return{outSplits:o,valueSlices:r,numValues:a}}(a,i,e,l),p=function(e){const t=[];for(let n=0;n<e.length;++n){const s=e[n].length,r=h.util.getArrayFromDType("int32",s);t.push(r),e[n].forEach((e,t)=>r[t]=e)}return t}(u),f=function(e,t,n,s,r){const a=t.slice();a[0]=r;const i=h.util.getArrayFromDType(n,h.util.sizeFromShape(a)),o=e.length;return function(e,t,n,s,r,a){const i=qf(t,2)[1],o=qf(a,2)[1];let l=0;for(const t of n)for(let n=t[0];n<t[1];++n){for(let t=0;t<s;++t)r[l*o+t]=e[n*i+t];++l}}(e,t,s,0===o?0:o/t[0],i,a),[i,a]}(n,s,r,c,d);return[p,f[0],f[1]]}const Kf=2147483647;function Xf(e,t,n,s,r,a,i){if(t.length>1)throw new Error("starts must be a scalar or vector");if(r.length>1)throw new Error("limits must be a scalar or vector");if(i.length>1)throw new Error("deltas must be a scalar or vector");const o=0===t.length,l=0===r.length,u=0===i.length,c=[];o||c.push(t[0]),l||c.push(r[0]),u||c.push(i[0]);for(let e=1;e<c.length;++e)if(c[e]!==c[e-1])throw new Error("starts, limits, and deltas must have the same shape");const d=0===c.length?1:c[0],p=h.util.getArrayFromDType("int32",d+1);p[0]=0;for(let t=0;t<d;++t){const n=o?e[0]:e[t],r=l?s[0]:s[t],i=u?a[0]:a[t];if(0===i)throw new Error("Requires delta != 0");let c;if(i>0&&r<n||i<0&&r>n)c=0;else if(c=Math.ceil(Math.abs((r-n)/i)),c>Kf)throw new Error(`Requires ((limit - start) / delta) <= ${Kf}`);p[t+1]=p[t]+c}const f=p[d],m=h.util.getArrayFromDType(n,f);let g=0;for(let t=0;t<d;++t){const n=p[t+1]-p[t];let s=o?e[0]:e[t];const r=u?a[0]:a[t];for(let e=0;e<n;++e)m[g++]=s,s+=r}return[p,m]}var Zf=h.backend_util.RowPartitionType;class Qf{constructor(e,t,n,s,r,a,i,o,l,u){this.shape=e,this.shapeShape=t,this.values=n,this.valuesShape=s,this.valuesDType=r,this.defaultValue=a,this.defaultValueShape=i,this.rowPartitionValues=o,this.rowPartitionValuesShapes=l,this.rowPartitionTypes=h.backend_util.getRowPartitionTypesHelper(u),this.raggedRank=h.backend_util.getRaggedRank(this.rowPartitionTypes)}getRowPartitionTypeByDimension(e){return this.rowPartitionTypes[0]===Zf.FIRST_DIM_SIZE?this.rowPartitionTypes[e+1]:this.rowPartitionTypes[e]}getRowPartitionTensor(e){return this.rowPartitionTypes[0]===Zf.FIRST_DIM_SIZE?this.rowPartitionValues[e+1]:this.rowPartitionValues[e]}getMaxWidth(e){const t=this.getRowPartitionTensor(e-1);switch(this.getRowPartitionTypeByDimension(e-1)){case Zf.VALUE_ROWIDS:return Qf.getMaxWidthValueRowID(t);case Zf.ROW_SPLITS:return Qf.getMaxWidthRowSplit(t);default:throw new Error(`Cannot handle partition type ${Zf[this.getRowPartitionTypeByDimension(e-1)]}`)}}static getMaxWidthRowSplit(e){const t=e.length;if(0===t||1===t)return 0;let n=0;for(let s=0;s<t-1;++s){const t=e[s+1]-e[s];t>n&&(n=t)}return n}static getMaxWidthValueRowID(e){const t=e.length;if(0===t)return 0;let n=0,s=e[0],r=0;for(let a=1;a<t;++a){const t=e[a];t!==s&&(s=t,r=Math.max(a-n,r),n=a)}return Math.max(t-n,r)}tensorShapeFromTensor(e,t,n=!0){if(0===t.length){if(-1===e[0])return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return em(e,n)}calculateOutputSize(e){const t=this.valuesShape,n=this.defaultValueShape;h.backend_util.validateDefaultValueShape(n,t);const s=this.tensorShapeFromTensor(this.shape,this.shapeShape),r=h.backend_util.combineRaggedTensorToTensorShapes(this.raggedRank,s,t);r[0]<0&&(r[0]=e);for(let e=1;e<=this.raggedRank;++e)r[e]<0&&(r[e]=this.getMaxWidth(e));return r}calculateFirstParentOutputIndex(e,t,n){const s=Math.min(e,n),r=[];let a=0;for(let e=0;e<s;++e,a+=t)r.push(a);for(let t=s;t<e;++t)r.push(-1);return h.util.assert(r.length===e,()=>"Final length of result must be equal to firstDimension."),r}calculateOutputIndexRowSplit(e,t,n,s){const r=e.length,a=[];for(let i=0;i<r-1;++i){const r=e[i+1]-e[i];let o=Math.min(s,r),l=t[i];-1===l&&(o=0);for(let e=0;e<o;++e)a.push(l),l+=n;for(let e=0;e<r-o;++e)a.push(-1)}if(r>0&&a.length!==e[r-1])throw new Error("Invalid row split size.");return a}calculateOutputIndexValueRowID(e,t,n,s){const r=e.length,a=[];if(0===r)return[];let i=0,o=e[0];if(o>=t.length)throw new Error(`Got currentValueRowId=${o}, which is not less than ${t.length}`);let l=t[o];a.push(l);for(let u=1;u<r;++u){const r=e[u];if(r===o)l>=0&&(++i,i<s?l+=n:l=-1);else{if(i=0,o=r,r>=t.length)throw new Error(`Got nextValueRowId=${r} which is not less than ${t.length}`);l=t[r]}a.push(l)}if(a.length!==e.length)throw new Error("Invalid row ids.");return a}calculateOutputIndex(e,t,n,s){const r=this.getRowPartitionTensor(e),a=this.getRowPartitionTypeByDimension(e);switch(a){case Zf.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(r,t,n,s);case Zf.ROW_SPLITS:if(r.length-1>t.length)throw new Error(`Row partition size is greater than output size: ${r.length-1} > ${t.length}`);return this.calculateOutputIndexRowSplit(r,t,n,s);default:throw new Error(`Unsupported partition type: ${Zf[a]}`)}}getFirstDimensionSize(){const e=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw new Error("No row_partition_types given.");const t=this.rowPartitionTypes[0];switch(t){case Zf.FIRST_DIM_SIZE:return e[0];case Zf.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case Zf.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${Zf[t]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const e=this.getFirstDimensionSize(),t=this.calculateOutputSize(e),n=new Array(this.raggedRank+1);n[n.length-1]=1;for(let e=n.length-2;e>=0;--e)n[e]=n[e+1]*t[e+1];const s=em(t,!1),r=h.util.getArrayFromDType(this.valuesDType,h.util.sizeFromShape(s));if(n[0]*t[0]>0){let a=this.calculateFirstParentOutputIndex(e,n[0],t[0]);for(let e=1;e<=this.raggedRank;++e)a=this.calculateOutputIndex(e-1,a,n[e],t[e]);this.setOutput(this.raggedRank,a,r,s)}return[s,r]}setOutput(e,t,n,s){if(0===n.length)return;const r=this.values,a=n;let i=s.slice();i=i.slice(e+1);const o=h.util.sizeFromShape(i),l=t.length;let u=this.defaultValue;if(u.length!==o&&1!==u.length){const e=this.defaultValueShape;(0,h.tidy)(()=>{const t=(0,h.reshape)(u,e),n=(0,h.broadcastTo)(t,i);u=n.dataSync()})}let c=0,d=0,p=0;for(let e=0;e<=l;++e){let s=e<l?t[e]:-1;if(s!==p){if(d<p){const e=r.subarray(c*o);Jf(a.subarray(d*o),e,(p-d)*o)}if(e>=l){const e=n.length;s=Math.floor(e/o)}if(s>p)if(1===this.defaultValue.length)a.subarray(p*o,s*o).fill(this.defaultValue[0]),p=s;else for(;s>p;)Jf(a.slice(p*o),u,o),++p;s<0?(c=e+1,d=p):(c=e,d=p,p=d+1)}else++p}}}function Jf(e,t,n){for(let s=0;s<n;s++)e[s]=t[s]}function em(e,t){const n=[];for(let s of e){if(s<0){if(!t)throw new Error(`Dimension ${s} must be >= 0`);if(s<-1)throw new Error(`Dimension ${s} must be >= -1`);s=-1}n.push(s)}return n}function tm(e,t,n,s,r,a,i,o,l,u){return new Qf(e,t,n,s,r,a,i,o,l,u).compute()}function nm(e,t,n,s){if(e===t||e<t&&n<0||t<e&&n>1)return h.util.makeZerosTypedArray(0,s);const r=Math.abs(Math.ceil((t-e)/n)),a=h.util.makeZerosTypedArray(r,s);t<e&&1===n&&(n=-1),a[0]=e;for(let e=1;e<a.length;e++)a[e]=a[e-1]+n;return a}const sm=Pp(e=>1/Math.sqrt(e)),rm=Wp(h.Rsqrt,sm),am={kernelName:h.Rsqrt,backendName:"cpu",kernelFunc:rm};function im(e,t,n,s,r,a,i,o,l,u){const c=[s/r,r],d=e.values,p=t.values;if(0===s)return(0,h.buffer)(n,t.dtype);const f=l instanceof h.TensorBuffer?l:(0,h.buffer)(c,t.dtype);"string"==typeof l||"number"==typeof l?f.values.fill(l):"boolean"==typeof l&&f.values.fill(+l);for(let e=0;e<a;e++){const a=[];let l=0;for(let t=0;t<i;t++){const n=d[e*i+t];a.push(n),l+=n*o[t]}if(l<0||l>=s/r)throw new Error(`Invalid indices: ${a} does not index into ${n}`);for(let n=0;n<r;n++)u?f.values[l*r+n]+=p[e*r+n]:f.values[l*r+n]=0===t.rank?p[0]:p[e*r+n]}return f}const om=Pp(e=>1/(1+Math.exp(-e))),lm=Bp(h.Sigmoid,e=>1/(1+Math.exp(-e))),um={kernelName:h.Sigmoid,backendName:"cpu",kernelFunc:lm};function cm(e,t,n,s,r){const a=h.slice_util.isSliceContinous(s,t,n),i=h.util.sizeFromShape(n),o=h.util.computeStrides(s);if(a){const n=h.slice_util.computeFlatOffset(t,o);return"string"===r?e.slice(n,n+i):e.subarray(n,n+i)}const l="string"===r?h.backend_util.fromUint8ToStringArray(e):e,u=(0,h.buffer)(s,r,l),c=(0,h.buffer)(n,r);for(let e=0;e<c.size;++e){const n=c.indexToLoc(e),s=n.map((e,n)=>e+t[n]);c.set(u.get(...s),...n)}return"string"===r?h.backend_util.fromStringArrayToUint8(c.values):c.values}function dm(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,size:i}=s;hp(r,"slice");const[o,l]=h.slice_util.parseSliceParams(r,a,i);h.slice_util.assertParamsValid(r,o,l);const u=cm(n.data.get(r.dataId).values,o,l,r.shape,r.dtype);return n.makeTensorInfo(l,r.dtype,u)}const hm={kernelName:h.Slice,backendName:"cpu",kernelFunc:dm};function pm(e,t,n,s,r,a,i){const o=t[0],l=a[0],u=new Array(l),c=new Array(o),d=t[1];if(0===l){if(0!==o)throw new Error(h.backend_util.getSparseFillEmptyRowsIndicesDenseShapeMismatch(o));return[h.util.getArrayFromDType(n,0),[0,d],h.util.getArrayFromDType(r,0),u,c]}let p=!0,f=0;const m=new Array(l).fill(0);for(let t=0;t<o;++t){const n=e[t*d];if(n<0)throw new Error(h.backend_util.getSparseFillEmptyRowsNegativeIndexErrorMessage(t,n));if(n>=l)throw new Error(h.backend_util.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(t,n,l));++m[n],p=p&&n>=f,f=n}let g=!0;for(let e=0;e<l;++e){const t=0===m[e];u[e]=t,g=g&&!t,m[e]=Math.max(m[e],1),e>0&&(m[e]+=m[e-1])}if(g&&p){const t=e,n=s;for(let e=0;e<o;++e)c[e]=e;return[t,[o,d],n,u,c]}{const t=m[l-1],a=h.util.getArrayFromDType(n,t*d),p=h.util.getArrayFromDType(r,t),f=new Array(l).fill(0);for(let t=0;t<o;++t){const n=e[t*d],r=f[n],i=(0===n?0:m[n-1])+r;f[n]++;for(let n=0;n<d;++n)a[i*d+n]=e[t*d+n];p[i]=s[t],c[t]=i}for(let e=0;e<l;++e)if(0===f[e]){const t=0===e?0:m[e-1];a[t*d+0]=e;for(let e=1;e<d;++e)a[t*d+e]=0;p[t]=i}return[a,[t,d],p,u,c]}}function fm(e,t,n,s,r){const a=h.util.sizeFromShape(s),i=t[0],o=r.length,l=[];let u=1,c=-1;for(let e=0;e<o;++e){const t=r[e];if(-1===t){if(-1!==c)throw new Error(h.backend_util.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(c,e));c=e,l.push(1)}else{if(t<0)throw new Error(h.backend_util.getSparseReshapeNegativeOutputDimErrorMessage(e,t));u*=t,l.push(t)}}if(-1!==c){if(u<=0)throw new Error(h.backend_util.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());const e=Math.trunc(a/u);if(u*e!==a)throw new Error(h.backend_util.getSparseReshapeInputOutputMultipleErrorMessage(s,l));l[c]=e}if(h.util.sizeFromShape(l)!==a)throw new Error(h.backend_util.getSparseReshapeInputOutputMismatchErrorMessage(s,l));const d=s.length,p=[];if(d>0){p[d-1]=1;for(let e=d-2;e>=0;--e)p[e]=p[e+1]*s[e+1]}const f=[];if(o>0){f[o-1]=1;for(let e=o-2;e>=0;--e)f[e]=f[e+1]*l[e+1]}const m=h.util.getArrayFromDType(n,i*o);for(let t=0;t<i;++t){let n=0;for(let s=0;s<d;++s)n+=e[t*d+s]*p[s];for(let e=0;e<o;++e)m[t*o+e]=Math.trunc(n/f[e]),n%=f[e]}return[m,[i,o],l]}function mm(e,t,n,s,r,a=!1,i=0){const o=s.length,l=[t[0],e.length/t[0]],u=l[1],c=o>0?r[o-1]+1:0;if(c<0)throw new Error(h.backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());const d=t.slice();d[0]=c;const p=d.reduce((e,t)=>e*t,1),f=h.util.getArrayFromDType(n,p);if(0===o)return c>0&&f.fill(i),[f,d];if(c<=0)throw new Error(h.backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let m=0,g=1,y=0,b=r[m];for(;;){let t=0;if(g<o){if(t=r[g],b===t){++g;continue}if(b>=t)throw new Error(h.backend_util.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(b<0||b>=c)throw new Error(h.backend_util.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(b,c));b>y&&f.fill(i,y*u,b*u);for(let t=m;t<g;++t){const n=s[t];if(n<0||n>=l[0])throw new Error(h.backend_util.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(t,s[t],l[0]));for(let t=0;t<u;t++)f[b*u+t]+=e[n*u+t]}if(a)for(let e=0;e<u;e++)f[b*u+e]/=g-m;if(m=g,++g,y=b+1,b=t,g>o)break}return y<c&&f.fill(i,y*u,c*u),[f,d]}const gm=Pp(e=>Math.sqrt(e)),ym=Bp(h.Sqrt,e=>Math.sqrt(e)),bm={kernelName:h.Sqrt,backendName:"cpu",kernelFunc:ym},xm=yp((e,t)=>{const n=e-t;return n*n}),vm=Ap(h.SquaredDifference,xm),wm={kernelName:h.SquaredDifference,backendName:"cpu",kernelFunc:vm},km=Pp((e,t)=>{const{pattern:n,replaceGlobal:s,rewrite:r}=t;return e.replace(new RegExp(n,s?"g":""),r)}),Tm=Wp(h.StaticRegexReplace,km),Sm={kernelName:h.StaticRegexReplace,backendName:"cpu",kernelFunc:Tm};function Nm(e,t,n,s){const r=(0,h.buffer)(e,t.dtype);for(let e=0;e<r.size;e++){const a=r.indexToLoc(e),i=new Array(a.length);for(let e=0;e<i.length;e++)i[e]=a[e]*n[e]+s[e];r.set(t.get(...i),...a)}return r}class Im{constructor(e,t,n,s,r,a){this.separator=h.util.encodeString(e),this.nGramWidths=t,this.leftPad=h.util.encodeString(n),this.rightPad=h.util.encodeString(s),this.padWidth=r,this.preserveShort=a}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(e,t,n,s,r,a){for(let i=0;i<r;++i){const o=this.getPadWidth(a),l=Math.max(0,o-i),u=Math.max(0,o-(r-(i+1))),c=a-(l+u),d=t+(l>0?0:i-o);let h=0;h+=l*this.leftPad.length;for(let t=0;t<c;++t)h+=e[d+t].length;h+=u*this.rightPad.length,h+=(l+u+c-1)*this.separator.length,n[s+i]=new Uint8Array(h);const p=n[s+i];let f=0;const m=e=>e.forEach(e=>p[f++]=e);for(let e=0;e<l;++e)m(this.leftPad),m(this.separator);for(let t=0;t<c-1;++t)m(e[d+t]),m(this.separator);if(c>0){m(e[d+c-1]);for(let e=0;e<u;++e)m(this.separator),m(this.rightPad)}else{for(let e=0;e<u-1;++e)m(this.rightPad),m(this.separator);m(this.rightPad)}}}compute(e,t){const n=e.length,s=t.length;if(s>0){let e=t[0];if(0!==e)throw new Error(`First split value must be 0, got ${e}`);for(let r=1;r<s;++r){let s=t[r]>=e;if(s=s&&t[r]<=n,!s)throw new Error(`Invalid split value ${t[r]}, must be in [${e}, ${n}]`);e=t[r]}if(e!==n)throw new Error(`Last split value must be data size. Expected ${n}, got ${e}`)}const r=s-1,a=h.util.getArrayFromDType("int32",s);if(0===n||0===s){const e=new Array(n);for(let e=0;e<=r;++e)a[e]=0;return[e,a]}a[0]=0;for(let e=1;e<=r;++e){const n=t[e]-t[e-1];let s=0;this.nGramWidths.forEach(e=>{s+=this.getNumNGrams(n,e)}),this.preserveShort&&n>0&&0===s&&(s=1),a[e]=a[e-1]+s}const i=new Array(a[r]);for(let n=0;n<r;++n){const s=t[n];let r=a[n];if(this.nGramWidths.forEach(a=>{const o=t[n+1]-t[n],l=this.getNumNGrams(o,a);this.createNGrams(e,s,i,r,l,a),r+=l}),this.preserveShort&&r===a[n]){const a=t[n+1]-t[n];if(0===a)continue;const o=a+2*this.padWidth,l=1;this.createNGrams(e,s,i,r,l,o)}}return[i,a]}}function Cm(e,t,n,s,r,a,i,o){return new Im(n,s,r,a,i,o).compute(e,t)}function Am(e,t,n,s){if(!e.length)return;if(0===t.length){for(let t=0;t<e.length;++t)s.push(e.subarray(t,t+1));return}if(1===t.length){const r=t[0];let a=e.indexOf(r);for(;-1!==a;){const t=e.subarray(0,a);n&&0===t.length||s.push(t),a=(e=e.subarray(a+1)).indexOf(r)}return void(n&&0===e.length||s.push(e))}let r=0;for(let a=0;a<e.length+1;a++)if(a===e.length||-1!==t.indexOf(e[a])){const t=e.subarray(r,a);n&&0===t.length||s.push(t),r=a+1}}function Em(e,t,n){const s=e.length,r=[];let a=0,i=0;const o=new Array(s);for(let l=0;l<s;++l){const s=r.length;Am(e[l],t,n,r);const u=r.length-s;o[l]=u,a+=u,i=Math.max(i,u)}const l=h.util.getArrayFromDType("int32",2*a),u=new Array(a),c=[s,i];let d=0;for(let e=0;e<s;++e)for(let t=0;t<o[e];++t)l[2*d]=e,l[2*d+1]=t,u[d]=r[d],++d;return[l,u,c]}function $m(e,t){const n=h.util.getArrayFromDType("int32",e.length);for(let s=0;s<e.length;++s)n[s]=h.util.fingerPrint64(e[s]).modulo(t).getLowBitsUnsigned();return n}const Rm=yp((e,t)=>e-t),_m=Ep((e,t,n,s)=>({real:e-n,imag:t-s})),Dm=Ap(h.Sub,Rm,_m),Fm={kernelName:h.Sub,backendName:"cpu",kernelFunc:Dm};function Om(e,t){const n=new Array(e.rank);for(let s=0;s<n.length;s++)n[s]=e.shape[s]*t[s];const s=(0,h.buffer)(n,e.dtype);for(let t=0;t<s.values.length;++t){const n=s.indexToLoc(t),r=new Array(e.rank);for(let t=0;t<r.length;t++)r[t]=n[t]%e.shape[t];const a=e.locToIndex(r);s.values[t]=e.values[a]}return s}const Mm=(e,t)=>{const n=t.value-e.value;return 0===n?e.index-t.index:n};function zm(e,t,n=0,s=e.length-1){for(;s>n;){if(s-n>600){const r=s-n+1,a=t-n+1,i=Math.log(r),o=.5*Math.exp(2*i/3),l=.5*Math.sqrt(i*o*(r-o)/r)*Math.sign(a-r/2);zm(e,t,Math.max(n,Math.floor(t-a*o/r+l)),Math.min(s,Math.floor(t+(r-a)*o/r+l)))}const r=e[t];let a=n,i=s;for(h.util.swap(e,n,t),Mm(e[s],r)>0&&h.util.swap(e,n,s);a<i;){for(h.util.swap(e,a,i),a++,i--;Mm(e[a],r)<0;)a+=1;for(;Mm(e[i],r)>0;)i-=1}0===Mm(e[n],r)?h.util.swap(e,n,i):(i+=1,h.util.swap(e,i,s)),i<=t&&(n=i+1),t<=i&&(s=i-1)}}function Lm(e,t,n,s,r){const a=t[t.length-1],[i,o]=[e.length/a,a],l=h.util.getTypedArrayFromDType(n,i*s),u=h.util.getTypedArrayFromDType("int32",i*s);for(let t=0;t<i;t++){const n=t*o,a=e.subarray(n,n+o);let i=new Array(a.length);a.forEach((e,t)=>i[t]={value:e,index:t}),s<i.length&&(zm(i,s),i=i.slice(0,s)),r&&i.sort(Mm);const c=t*s,d=l.subarray(c,c+s),h=u.subarray(c,c+s);for(let e=0;e<s;e++)d[e]=i[e].value,h[e]=i[e].index}const c=t.slice();return c[c.length-1]=s,[(0,h.buffer)(c,n,l),(0,h.buffer)(c,"int32",u)]}function Pm(e,t,n,s){const r=h.util.parseAxisParam(t,n)[0],a=[1,n[0],1];for(let e=0;e<r;e++)a[0]*=n[e];a[1]=n[r];for(let e=r+1;e<n.length;e++)a[2]*=n[e];const i=new Map,o=new Int32Array(n[r]),l=new h.TensorBuffer(a,s,e),u=[],c=1===a[0]&&1===a[2];for(let t=0;t<n[r];t++){let n;if(c)n=e[t].toString();else{const e=[];for(let n=0;n<a[0];n++)for(let s=0;s<a[2];s++)e.push(l.get(n,t,s));n=e.join(",")}const s=i.get(n);if(null!=s)o[t]=s;else{const e=i.size;i.set(n,e),o[t]=e,u.push(t)}}const d=a.slice();d[1]=i.size;const p=new h.TensorBuffer(d,s);u.forEach((e,t)=>{for(let n=0;n<a[0];n++)for(let s=0;s<a[2];s++)p.set(l.get(n,e,s),n,t,s)});const f=n.slice();return f[r]=d[1],{outputValues:p.values,outputShape:f,indices:o}}const Bm="4.22.0";(0,h.registerBackend)("cpu",()=>new fp,1);const Wm=Bp(h.Elu,e=>e>=0?e:Math.exp(e)-1),Vm={kernelName:h.Elu,backendName:"cpu",kernelFunc:Wm};function Um(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{alpha:a}=s;hp([r],"leakyRelu");const i=h.util.sizeFromShape(r.shape),o=n.data.get(r.dataId).values,l=h.util.getTypedArrayFromDType("float32",i);for(let e=0;e<o.length;e++)l[e]=o[e]<0?a*o[e]:o[e];return n.makeTensorInfo(r.shape,"float32",l)}const Gm={kernelName:h.LeakyRelu,backendName:"cpu",kernelFunc:Um},Hm=yp((e,t)=>e<0?t*e:e);function jm(e){const{inputs:t,backend:n}=e,{x:s,alpha:r}=t;hp([s,r],"prelu");const a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,[o,l]=Hm(s.shape,r.shape,a,i,"float32");return n.makeTensorInfo(l,"float32",o)}const qm={kernelName:h.Prelu,backendName:"cpu",kernelFunc:jm},Ym=Bp(h.Relu,e=>Math.max(0,e)),Km={kernelName:h.Relu,backendName:"cpu",kernelFunc:Ym},Xm=Bp(h.Relu6,e=>Math.min(Math.max(0,e),6)),Zm={kernelName:h.Relu6,backendName:"cpu",kernelFunc:Xm};function Qm(e,t,n,s,r){if("linear"===n)return wp({inputs:{x:t},backend:e});if("relu"===n)return Ym({inputs:{x:t},backend:e});if("elu"===n)return Wm({inputs:{x:t},backend:e});if("relu6"===n)return Xm({inputs:{x:t},backend:e});if("prelu"===n)return jm({inputs:{x:t,alpha:s},backend:e});if("leakyrelu"===n)return Um({inputs:{x:t},backend:e,attrs:{alpha:r}});if("sigmoid"===n)return lm({inputs:{x:t},backend:e});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function Jm(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{shape:a}=s,i=h.util.sizeFromShape(r.shape),o=h.util.inferFromImplicitShape(a,i),l=h.util.sizeFromShape(o);h.util.assert(i===l,()=>`The new shape (${o}) has ${l} elements and the old shape (${r.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`),n.incRef(r.dataId);const u=n.data.get(r.dataId);if(null!=u.complexTensorInfos){const e=u.complexTensorInfos.real,t=u.complexTensorInfos.imag;e.shape=o,t.shape=o}return{dataId:r.dataId,shape:o,dtype:r.dtype}}const eg={kernelName:h.Reshape,backendName:"cpu",kernelFunc:Jm};function tg(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a}=t,{transposeA:i,transposeB:o}=s;hp([r,a],"matMul");const l=r.shape.length,u=a.shape.length,c=i?r.shape[l-2]:r.shape[l-1],d=o?a.shape[u-1]:a.shape[u-2],p=i?r.shape[l-1]:r.shape[l-2],f=o?a.shape[u-2]:a.shape[u-1],m=r.shape.slice(0,-2),g=a.shape.slice(0,-2),y=h.util.sizeFromShape(m),b=h.util.sizeFromShape(g),x=h.broadcast_util.assertAndGetBroadcastShape(r.shape.slice(0,-2),a.shape.slice(0,-2)).concat([p,f]);h.util.assert(c===d,()=>`Error in matMul: inner shapes (${c}) and (${d}) of Tensors with shapes ${r.shape} and ${a.shape} and transposeA=${i} and transposeB=${o} must match.`);const v=o?[b,f,d]:[b,d,f],w=Jm({inputs:{x:r},backend:n,attrs:{shape:i?[y,c,p]:[y,p,c]}}),k=Jm({inputs:{x:a},backend:n,attrs:{shape:v}}),T=i?w.shape[1]:w.shape[2],S=i?w.shape[2]:w.shape[1],N=o?k.shape[1]:k.shape[2],I=Math.max(y,b),C=n.data.get(w.dataId).values,A=n.data.get(k.dataId).values,E=h.util.computeStrides(w.shape),$=h.util.computeStrides(k.shape),[R,_,D]=i?[E[0],1,E[1]]:[E[0],E[1],1],[F,O,M]=o?[1,$[1],$[0]]:[$[1],1,$[0]],z=S*N,L=(0,h.buffer)([I,S,N],w.dtype),P=L.values,B=n.blockSize;for(let e=0;e<I;e++){const t=e%y,n=e%b;for(let s=0;s<S;s+=B){const r=Math.min(s+B,S);for(let a=0;a<N;a+=B){const i=Math.min(a+B,N);for(let o=0;o<T;o+=B){const l=Math.min(o+B,T);for(let u=s;u<r;u++)for(let s=a;s<i;s++){let r=0;for(let e=o;e<l;e++)r+=C[t*R+u*_+e*D]*A[e*F+s*O+n*M];P[e*z+(u*N+s)]+=r}}}}}return n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(k),n.makeTensorInfo(x,L.dtype,L.values)}const ng={kernelName:h.BatchMatMul,backendName:"cpu",kernelFunc:tg},sg={kernelName:h._FusedMatMul,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:d}=s;let h,p,f;const m=[];h=tg({inputs:{a:r,b:a},attrs:{transposeA:l,transposeB:u},backend:n}),i&&(p=_p({inputs:{a:h,b:i},backend:n}),m.push(h),h=p),c&&(f=Qm(n,h,c,o,d),m.push(h),h=f);for(const e of m)n.disposeIntermediateTensorInfo(e);return h}},rg=Bp(h.Acos,e=>Math.acos(e)),ag={kernelName:h.Acos,backendName:"cpu",kernelFunc:rg},ig=Bp(h.Acosh,e=>Math.acosh(e)),og={kernelName:h.Acosh,backendName:"cpu",kernelFunc:ig},lg={kernelName:h.AddN,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,s=t;hp(t,"addN");const r=s.map(e=>n.data.get(e.dataId).values),a=(0,h.buffer)(s[0].shape,s[0].dtype),i=a.values;for(let e=0;e<s.length;e++){const t=r[e];for(let e=0;e<i.length;e++)i[e]+=t[e]}return n.makeTensorInfo(a.shape,a.dtype,a.values)}},ug={kernelName:h.All,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;hp(r,"all");const o=h.util.parseAxisParam(a,r.shape);let l=o;const u=h.backend_util.getAxesPermutation(l,r.shape.length);let c=r;null!=u&&(c=Uf({inputs:{x:r},backend:n,attrs:{perm:u}}),l=h.backend_util.getInnerMostAxes(l.length,r.shape.length)),h.backend_util.assertAxesAreInnerMostDims("all",l,c.shape.length);const[d,p]=h.backend_util.computeOutAndReduceShapes(c.shape,l),f=h.util.sizeFromShape(p),m=h.util.makeZerosTypedArray(h.util.sizeFromShape(d),c.dtype),g=n.data.get(c.dataId).values;for(let e=0;e<m.length;++e){const t=e*f;let n=g[t];for(let e=0;e<f;++e){const s=g[t+e];n=n&&s}m[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const y=n.makeTensorInfo(d,c.dtype,m);if(i){const e=Jm({inputs:{x:y},backend:n,attrs:{shape:h.backend_util.expandShapeToKeepDim(d,o)}});return n.disposeIntermediateTensorInfo(y),e}return y}},cg={kernelName:h.Any,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;hp(r,"any");const o=h.util.parseAxisParam(a,r.shape);let l=o;const u=h.backend_util.getAxesPermutation(l,r.shape.length);let c=r;null!=u&&(c=Uf({inputs:{x:r},backend:n,attrs:{perm:u}}),l=h.backend_util.getInnerMostAxes(l.length,r.shape.length)),h.backend_util.assertAxesAreInnerMostDims("any",l,c.shape.length);const[d,p]=h.backend_util.computeOutAndReduceShapes(c.shape,l),f=h.util.sizeFromShape(p),m=h.util.makeZerosTypedArray(h.util.sizeFromShape(d),c.dtype),g=n.data.get(c.dataId).values;for(let e=0;e<m.length;++e){const t=e*f;let n=g[t];for(let e=0;e<f;++e){const s=g[t+e];n=n||s}m[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const y=n.makeTensorInfo(d,c.dtype,m);if(i){const e=Jm({inputs:{x:y},backend:n,attrs:{shape:h.backend_util.expandShapeToKeepDim(d,o)}});return n.disposeIntermediateTensorInfo(y),e}return y}},dg={kernelName:h.ArgMax,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;hp(r,"argMax");let i=h.util.parseAxisParam(a,r.shape);const o=h.backend_util.getAxesPermutation(i,r.shape.length);let l=r;const u=[];null!=o&&(l=Uf({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=h.backend_util.getInnerMostAxes(i.length,l.shape.length)),i=[i[0]],h.backend_util.assertAxesAreInnerMostDims("argMax",i,l.shape.length);const[c,d]=h.backend_util.computeOutAndReduceShapes(l.shape,i),p=h.util.sizeFromShape(c),f=h.util.makeZerosTypedArray(p,"int32"),m=h.util.sizeFromShape(d),g=n.data.get(l.dataId).values;for(let e=0;e<f.length;++e){const t=e*m;let n=g[t],s=0;for(let e=0;e<m;++e){const r=g[t+e];r>n&&(n=r,s=e)}f[e]=s}return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(c,"int32",f)}},hg={kernelName:h.ArgMin,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;hp(r,"argMin");let i=h.util.parseAxisParam(a,r.shape);const o=h.backend_util.getAxesPermutation(i,r.shape.length);let l=r;const u=[];null!=o&&(l=Uf({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=h.backend_util.getInnerMostAxes(i.length,l.shape.length)),i=[i[0]],h.backend_util.assertAxesAreInnerMostDims("argMin",i,l.shape.length);const[c,d]=h.backend_util.computeOutAndReduceShapes(l.shape,i),p=h.util.sizeFromShape(c),f=h.util.makeZerosTypedArray(p,"int32"),m=h.util.sizeFromShape(d),g=n.data.get(l.dataId).values;for(let e=0;e<f.length;++e){const t=e*m;let n=g[t],s=0;for(let e=0;e<m;++e){const r=g[t+e];r<n&&(n=r,s=e)}f[e]=s}return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(c,"int32",f)}},pg=Bp(h.Asin,e=>Math.asin(e)),fg={kernelName:h.Asin,backendName:"cpu",kernelFunc:pg},mg=Bp(h.Asinh,e=>Math.asinh(e)),gg={kernelName:h.Asinh,backendName:"cpu",kernelFunc:mg},yg=Bp(h.Atan,e=>Math.atan(e)),bg={kernelName:h.Atan,backendName:"cpu",kernelFunc:yg},xg=yp((e,t)=>Math.atan2(e,t)),vg=Ap(h.Atan2,xg),wg={kernelName:h.Atan2,backendName:"cpu",kernelFunc:vg},kg=Bp(h.Atanh,e=>Math.atanh(e)),Tg={kernelName:h.Atanh,backendName:"cpu",kernelFunc:kg};function Sg(e,t,n,s,r,a){const i=r.strideHeight,o=r.strideWidth,l=r.dilationHeight,u=r.dilationWidth,c=r.effectiveFilterHeight,d=r.effectiveFilterWidth,p=r.padInfo.top,f=r.padInfo.left,m="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,g=(0,h.buffer)(r.outShape,n),y=g.values,b=r.outShape[1]*r.outShape[2]*r.outShape[3],x=r.outShape[2]*r.outShape[3],v=r.outShape[3];for(let t=0;t<r.batchSize;++t){const n=t*b,h=t*s[0];for(let t=0;t<r.inChannels;++t)for(let g=0;g<r.outHeight;++g){const b=g*i-p,w=Math.max(0,b),k=Math.min(r.inHeight,c+b),T=n+g*x;for(let n=0;n<r.outWidth;++n){const i=n*o-f,c=Math.max(0,i),p=Math.min(r.inWidth,d+i);let g=m,b=0,x=0;for(let n=w;n<k;n+=l){const r=h+n*s[1];for(let n=c;n<p;n+=u){const i=e[r+n*s[2]+t];"max"===a&&i>g?g=i:"avg"===a&&(b+=i,x++)}if(isNaN(g))break}y[T+n*v+t]="avg"===a?b/x:g}}}return g}function Ng(e,t,n,s,r=!1,a=!1){const i=(0,h.buffer)(s.outShape,"int32"),o=s.strideHeight,l=s.strideWidth,u=s.dilationHeight,c=s.dilationWidth,d=s.effectiveFilterHeight,p=s.effectiveFilterWidth,f=s.padInfo.top,m=s.padInfo.left,g=(0,h.buffer)(t,n,e);for(let e=0;e<s.batchSize;++e)for(let t=0;t<s.inChannels;++t)for(let n=0;n<s.outHeight;++n){const h=n*o-f;let y=h;for(;y<0;)y+=u;const b=Math.min(s.inHeight,d+h);for(let o=0;o<s.outWidth;++o){const d=o*l-m;let f=d;for(;f<0;)f+=c;const x=Math.min(s.inWidth,p+d);let v=Number.NEGATIVE_INFINITY,w=-1;for(let n=y;n<b;n+=u){const i=n-h;for(let o=f;o<x;o+=c){const l=o-d,u=g.get(e,n,o,t);u>v&&(v=u,w=r?a?((e*s.inHeight+n)*s.inWidth+o)*s.inChannels+t:(n*s.inWidth+o)*s.inChannels+t:i*p+l)}}i.set(w,e,n,o,t)}}return i}function Ig(e,t,n,s,r,a){const i=r.strideDepth,o=r.strideHeight,l=r.strideWidth,u=r.dilationDepth,c=r.dilationHeight,d=r.dilationWidth,p=r.effectiveFilterDepth,f=r.effectiveFilterHeight,m=r.effectiveFilterWidth,g=r.padInfo.front,y=r.padInfo.top,b=r.padInfo.left,x="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,v=(0,h.buffer)(r.outShape,n),w=v.values,k=r.outShape[1]*r.outShape[2]*r.outShape[3]*r.outShape[4],T=r.outShape[2]*r.outShape[3]*r.outShape[4],S=r.outShape[3]*r.outShape[4],N=r.outShape[4];for(let t=0;t<r.batchSize;++t){const n=t*k,h=t*s[0];for(let t=0;t<r.inChannels;++t)for(let v=0;v<r.outDepth;++v){const k=v*i-g;let I=k;for(;I<0;)I+=u;const C=Math.min(r.inDepth,p+k),A=n+v*T;for(let n=0;n<r.outHeight;++n){const i=n*o-y;let p=i;for(;p<0;)p+=c;const g=Math.min(r.inHeight,f+i),v=A+n*S;for(let n=0;n<r.outWidth;++n){const i=n*l-b;let o=i;for(;o<0;)o+=d;const f=Math.min(r.inWidth,m+i),y=v+n*N;let k=x,T=0,S=0;for(let n=I;n<C;n+=u){const r=h+n*s[1];for(let n=p;n<g;n+=c){const i=r+n*s[2];for(let n=o;n<f;n+=d){const r=e[i+n*s[3]+t];if("max"===a&&r>k?k=r:"avg"===a&&(T+=r,S++),isNaN(k))break}if(isNaN(k))break}if(isNaN(k))break}w[y+t]="avg"===a?T/Math.max(S,1):k}}}}return v}const Cg={kernelName:h.AvgPool,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;hp(r,"avgPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;h.util.assert(h.backend_util.eitherStridesOrDilationsAreOne(i,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`);const u=h.backend_util.computePool2DInfo(r.shape,a,i,1,o,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&h.util.arraysEqual(u.inShape,u.outShape))c=wp({inputs:{x:r},backend:n});else{const e=n.data.get(r.dataId).values,t=h.util.computeStrides(r.shape),s=Sg(e,r.shape,r.dtype,t,u,"avg");c=n.makeTensorInfo(u.outShape,r.dtype,s.values)}return c}},Ag={kernelName:h.AvgPool3D,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s;hp(r,"avgPool3d");const c=h.backend_util.computePool3DInfo(r.shape,a,i,1,o,l,u),d=Ig(n.data.get(r.dataId).values,r.shape,r.dtype,h.util.computeStrides(r.shape),c,"avg");return n.makeTensorInfo(d.shape,"float32",d.values)}},Eg={kernelName:h.AvgPool3DGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=s;hp([r,a],"avgPool3DGrad");const c=h.backend_util.computePool3DInfo(a.shape,i,o,1,l,u),d=c.strideDepth,p=c.strideHeight,f=c.strideWidth,m=c.filterDepth,g=c.filterHeight,y=c.filterWidth,b=c.dilationDepth,x=c.dilationHeight,v=c.dilationWidth,w=c.effectiveFilterDepth,k=c.effectiveFilterHeight,T=c.effectiveFilterWidth,S=w-1-c.padInfo.front,N=T-1-c.padInfo.left,I=k-1-c.padInfo.top,C=(0,h.buffer)(a.shape,"float32"),A=1/(m*g*y),E=n.bufferSync(r);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let s=0;s<c.inHeight;++s)for(let r=0;r<c.inWidth;++r){const a=n-S,i=s-I,o=r-N;let l=0;for(let n=0;n<w;n+=b){const s=(a+n)/d;if(!(s<0||s>=c.outDepth||Math.floor(s)!==s))for(let n=0;n<k;n+=x){const r=(i+n)/p;if(!(r<0||r>=c.outHeight||Math.floor(r)!==r))for(let n=0;n<T;n+=v){const a=(o+n)/f;a<0||a>=c.outWidth||Math.floor(a)!==a||(l+=E.get(e,s,r,a,t))}}}C.set(l*A,e,n,s,r,t)}return n.makeTensorInfo(C.shape,C.dtype,C.values)}},$g={kernelName:h.AvgPoolGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a;hp([r,a],"avgPoolGrad");const{filterSize:o,strides:l,pad:u}=s,c=h.backend_util.computePool2DInfo(i.shape,o,l,1,u),d=c.strideHeight,p=c.strideWidth,f=c.filterHeight,m=c.filterWidth,g=c.dilationHeight,y=c.dilationWidth,b=c.effectiveFilterHeight,x=c.effectiveFilterWidth,v=x-1-c.padInfo.left,w=b-1-c.padInfo.top,k=(0,h.buffer)(i.shape,"float32"),T=1/(f*m),S=n.data.get(r.dataId).values,N=(0,h.buffer)(r.shape,"float32",S);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inHeight;++n)for(let s=0;s<c.inWidth;++s){const r=n-w,a=s-v;let i=0;for(let n=0;n<b;n+=g){const s=(r+n)/d;if(!(s<0||s>=c.outHeight||Math.floor(s)!==s))for(let n=0;n<x;n+=y){const r=(a+n)/p;r<0||r>=c.outWidth||Math.floor(r)!==r||(i+=N.get(e,s,r,t))}}k.set(i*T,e,n,s,t)}return n.makeTensorInfo(k.shape,k.dtype,k.values)}},Rg={kernelName:h.FusedBatchNorm,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,scale:a,offset:i,mean:o,variance:l}=t;h.util.assert(o.shape.length===l.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),h.util.assert(null==i||o.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),h.util.assert(null==a||o.shape.length===a.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks."),hp([r,o,l,a,i],"batchNorm");let{varianceEpsilon:u}=s;null==u&&(u=.001);const c=n.data.get(r.dataId).values,d=n.data.get(o.dataId).values,p=n.data.get(l.dataId).values,f=a?n.data.get(a.dataId).values:new Float32Array([1]),m=i?n.data.get(i.dataId).values:new Float32Array([0]),g=new Float32Array(c.length),y=m.length,b=f.length,x=p.length,v=d.length;let w=0,k=0,T=0,S=0;for(let e=0;e<c.length;++e)g[e]=m[w++]+(c[e]-d[k++])*f[T++]/Math.sqrt(p[S++]+u),w>=y&&(w=0),k>=v&&(k=0),T>=b&&(T=0),S>=x&&(S=0);return n.makeTensorInfo(r.shape,r.dtype,g)}},_g={kernelName:h.BatchToSpaceND,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,crops:i}=s;hp([r],"batchToSpaceND");const o=a.reduce((e,t)=>e*t),l=h.backend_util.getReshaped(r.shape,a,o),u=h.backend_util.getPermuted(l.length,a.length),c=h.backend_util.getReshapedPermuted(r.shape,a,o),d=h.backend_util.getSliceBeginCoords(i,a.length),p=h.backend_util.getSliceSize(c,i,a.length),f=Jm({inputs:{x:r},backend:n,attrs:{shape:l}}),m=Uf({inputs:{x:f},backend:n,attrs:{perm:u}}),g=Jm({inputs:{x:m},backend:n,attrs:{shape:c}}),y=dm({inputs:{x:g},backend:n,attrs:{begin:d,size:p}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),y}},Dg={kernelName:h.Bincount,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i}=s,o=Fp(n.data.get(r.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,o)}},Fg={kernelName:h.BroadcastArgs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:s,s1:r}=t,a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,o=h.backend_util.assertAndGetBroadcastShape(Array.from(a),Array.from(i));return n.makeTensorInfo([o.length],"int32",Int32Array.from(o))}},Og=Bp(h.ClipByValue,(e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e}),Mg={kernelName:h.ClipByValue,backendName:"cpu",kernelFunc:Og},zg={kernelName:h.ComplexAbs,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,s=new Float32Array(h.util.sizeFromShape(t.shape)),r=n.data.get(t.dataId),a=r.complexTensorInfos.real,i=r.complexTensorInfos.imag,o=n.data.get(a.dataId).values,l=n.data.get(i.dataId).values;for(let e=0;e<o.length;e++){const t=o[e],n=l[e];s[e]=Math.hypot(t,n)}return n.makeOutput(s,t.shape,"float32")}};function Lg(e){const{inputs:t,backend:n}=e,{input:s}=t,r=n.data.get(s.dataId).complexTensorInfos.imag,a=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,a)}const Pg={kernelName:h.Imag,backendName:"cpu",kernelFunc:Lg};function Bg(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s,a=h.util.parseAxisParam(r,t[0].shape)[0],i=t.map(e=>e.shape);h.backend_util.assertParamsConsistent(i,a);let o=h.backend_util.computeOutShape(t.map(e=>e.shape),a);if(0===h.util.sizeFromShape(o))return n.makeTensorInfo(o,t[0].dtype,[]);const l=t.filter(e=>h.util.sizeFromShape(e.shape)>0);if(1===l.length)return wp({inputs:{x:l[0]},backend:n});if("complex64"===l[0].dtype){const e=l.map(e=>Tp({inputs:{input:e},backend:n})),t=l.map(e=>Lg({inputs:{input:e},backend:n})),s=Bg({inputs:e,backend:n,attrs:{axis:a}}),r=Bg({inputs:t,backend:n,attrs:{axis:a}}),i=bp({inputs:{real:s,imag:r},backend:n});return e.forEach(e=>n.disposeIntermediateTensorInfo(e)),t.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(r),i}const u=l.map(e=>{const t=h.util.sizeFromShape(e.shape.slice(a));return Jm({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})}),c=u.map(e=>({vals:n.data.get(e.dataId).values,shape:e.shape}));o=h.backend_util.computeOutShape(u.map(e=>e.shape),1);const d=1===u[0].shape[0],p=Hp(c,o,t[0].dtype,d),f=h.backend_util.computeOutShape(l.map(e=>e.shape),a),m=n.makeTensorInfo(f,t[0].dtype,p);return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),m}const Wg={kernelName:h.Concat,backendName:"cpu",kernelFunc:Bg};function Vg(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dataFormat:l,dilations:u,dimRoundingMode:c}=s;hp([r,a],"conv2d");const d=h.backend_util.convertConv2DDataFormat(l),p=h.backend_util.computeConv2DInfo(r.shape,a.shape,i,u,o,c,!1,d),f=p.filterHeight,m=p.filterWidth,g=p.dilationHeight,y=p.dilationWidth,b=p.padInfo.left,x=p.padInfo.top,v="channelsLast"===p.dataFormat,w=new h.TensorBuffer(p.outShape,r.dtype),k=h.util.computeStrides(r.shape),T=h.util.computeStrides(a.shape),S=k[0],N=v?k[1]:k[2],I=v?k[2]:1,C=v?1:k[1],A=w.strides[0],E=v?w.strides[1]:w.strides[2],$=v?w.strides[2]:1,R=v?1:w.strides[1],_=n.data.get(r.dataId).values,D=n.data.get(a.dataId).values,F=w.values;for(let e=0;e<p.batchSize;++e){const t=e*S,n=e*A;for(let e=0;e<p.outHeight;++e){const s=n+e*E,r=e*p.strideHeight-x;for(let e=0;e<f;++e){const n=r+e*g;if(n<0||n>=p.inHeight)continue;const a=e*T[0],i=t+n*N;for(let e=0;e<p.outWidth;++e){const t=s+e*$,n=e*p.strideWidth-b;for(let e=0;e<m;++e){const s=n+e*y;if(s<0||s>=p.inWidth)continue;const r=i+s*I;let o=a+e*T[1];for(let e=0;e<p.inChannels;++e){const n=_[r+e*C];for(let e=0;e<p.outChannels;++e)F[t+e*R]+=n*D[o+e];o+=p.outChannels}}}}}}return n.makeTensorInfo(w.shape,w.dtype,F)}const Ug={kernelName:h.Conv2D,backendName:"cpu",kernelFunc:Vg},Gg={kernelName:h.Conv2DBackpropFilter,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:c}=s;hp([r,a],"conv2dBackpropFilter");const d=h.backend_util.convertConv2DDataFormat(l),p=h.backend_util.computeConv2DInfo(r.shape,c,i,1,o,u,!1,d),{strideHeight:f,strideWidth:m,filterHeight:g,filterWidth:y}=p,b="channelsLast"===p.dataFormat,x=new h.TensorBuffer(p.filterShape,"float32"),v=p.padInfo.left,w=p.padInfo.top,k=n.data.get(r.dataId).values,T=n.data.get(a.dataId).values,S=new h.TensorBuffer(r.shape,r.dtype,k),N=new h.TensorBuffer(a.shape,a.dtype,T);for(let e=0;e<g;++e){const t=Math.max(0,Math.ceil((w-e)/f)),n=Math.min(p.outHeight,(p.inHeight+w-e)/f);for(let s=0;s<y;++s){const r=Math.max(0,Math.ceil((v-s)/m)),a=Math.min(p.outWidth,(p.inWidth+v-s)/m);for(let i=0;i<p.inChannels;++i)for(let o=0;o<p.outChannels;++o){let l=0;for(let u=0;u<p.batchSize;++u)for(let c=t;c<n;++c){const t=e+c*f-w;for(let e=r;e<a;++e){const n=s+e*m-v;l+=b?S.get(u,t,n,i)*N.get(u,c,e,o):S.get(u,i,t,n)*N.get(u,o,c,e)}}x.set(l,e,s,i,o)}}}return n.makeTensorInfo(x.shape,x.dtype,x.values)}},Hg={kernelName:h.Conv2DBackpropInput,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{inputShape:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:c}=s;hp([r,a],"conv2dBackpropInput");const d=h.util.computeStrides(a.shape),p=h.util.computeStrides(r.shape);let f=h.backend_util.convertConv2DDataFormat(u);const m=h.backend_util.computeConv2DInfo(i,a.shape,o,1,l,c,!1,f),g=new h.TensorBuffer(m.inShape,"float32"),y=g.values,b=n.data.get(r.dataId).values,x=n.data.get(a.dataId).values,[v,w,k]=d,{batchSize:T,filterHeight:S,filterWidth:N,inChannels:I,inHeight:C,inWidth:A,outChannels:E,outHeight:$,outWidth:R,strideHeight:_,strideWidth:D}=m;f=m.dataFormat;const F=S-1-m.padInfo.top,O=N-1-m.padInfo.left,M="channelsLast"===f,z=g.strides[0],L=M?g.strides[1]:g.strides[2],P=M?g.strides[2]:1,B=M?1:g.strides[1],W=p[0],V=M?p[1]:p[2],U=M?p[2]:1,G=M?1:p[1];for(let e=0;e<T;++e)for(let t=0;t<I;++t)for(let n=0;n<C;++n){const s=n-F,r=Math.max(0,Math.ceil(s/_)),a=Math.min($,(S+s)/_);for(let i=0;i<A;++i){const o=i-O,l=Math.max(0,Math.ceil(o/D)),u=Math.min(R,(N+o)/D);let c=0;for(let n=r;n<a;++n){const r=n*_-s;for(let s=l;s<u;++s){const a=W*e+V*n+U*s,i=v*(S-1-r)+w*(N-1-(s*D-o))+k*t;for(let e=0;e<E;++e)c+=b[a+G*e]*x[i+e]}}y[z*e+L*n+P*i+B*t]=c}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}},jg={kernelName:h.Conv3D,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s;hp([r,a],"conv3d");const u=h.backend_util.computeConv3DInfo(r.shape,a.shape,i,l,o),{filterDepth:c,filterHeight:d,filterWidth:p,dilationDepth:f,dilationHeight:m,dilationWidth:g,padInfo:y}=u,b=y.front,x=y.left,v=y.top,w=new h.TensorBuffer(u.outShape,r.dtype),k=n.data.get(r.dataId).values,T=n.data.get(a.dataId).values,S=w.values,N=h.util.computeStrides(r.shape),I=h.util.computeStrides(a.shape);for(let e=0;e<u.batchSize;++e){const t=e*N[0],n=e*w.strides[0];for(let e=0;e<u.outDepth;++e){const s=n+e*w.strides[1],r=e*u.strideDepth-b;for(let e=0;e<c;++e){const n=r+e*f;if(n<0||n>=u.inDepth)continue;const a=e*I[0],i=t+n*N[1];for(let e=0;e<u.outHeight;++e){const t=s+e*w.strides[2],n=e*u.strideHeight-v;for(let e=0;e<d;++e){const s=n+e*m;if(s<0||s>=u.inHeight)continue;const r=a+e*I[1],o=i+s*N[2];for(let e=0;e<u.outWidth;++e){const n=t+e*u.outChannels,s=e*u.strideWidth-x;for(let e=0;e<p;++e){const t=s+e*g;if(t<0||t>=u.inWidth)continue;const a=r+e*I[2],i=o+t*u.inChannels;let l=a;for(let e=0;e<u.inChannels;++e){const t=k[i+e];for(let e=0;e<u.outChannels;++e)S[n+e]+=t*T[l+e];l+=u.outChannels}}}}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}},qg={kernelName:h.Conv3DBackpropFilterV2,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,filterShape:l}=s;hp([r,a],"conv3dBackpropFilterV2");const u=h.util.computeStrides(r.shape),c=h.util.computeStrides(a.shape),d=h.backend_util.computeConv3DInfo(r.shape,l,i,1,o),p=d.strideDepth,f=d.strideHeight,m=d.strideWidth,g=d.filterDepth,y=d.filterHeight,b=d.filterWidth,x=new h.TensorBuffer(d.filterShape,"float32"),v=x.values,[w,k,T,S]=x.strides,N=n.data.get(a.dataId).values,[I,C,A,E]=c,$=n.data.get(r.dataId).values,[R,_,D,F]=u,O=d.padInfo.front,M=d.padInfo.left,z=d.padInfo.top;for(let e=0;e<g;++e){const t=Math.max(0,Math.ceil((O-e)/p)),n=Math.min(d.outDepth,(d.inDepth+O-e)/p),s=e*w;for(let r=0;r<y;++r){const a=Math.max(0,Math.ceil((z-r)/f)),i=Math.min(d.outHeight,(d.inHeight+z-r)/f),o=r*k+s;for(let s=0;s<b;++s){const l=Math.max(0,Math.ceil((M-s)/m)),u=Math.min(d.outWidth,(d.inWidth+M-s)/m),c=s*T+o;for(let o=0;o<d.inChannels;++o){const h=o*S+c;for(let c=0;c<d.outChannels;++c){let g=0;for(let h=0;h<d.batchSize;++h){const d=h*R,y=h*I;for(let h=t;h<n;++h){const t=(e+h*p-O)*_+d,n=h*C+y;for(let e=a;e<i;++e){const a=(r+e*f-z)*D+t,i=e*A+n;for(let e=l;e<u;++e){const t=e*E+i;g+=$[(s+e*m-M)*F+a+o]*N[t+c]}}}}v[h+c]=g}}}}}return n.makeTensorInfo(x.shape,x.dtype,x.values)}},Yg={kernelName:h.Conv3DBackpropInputV2,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{pad:i,strides:o,inputShape:l}=s;hp([r],"conv3dBackpropInputV2");const u=h.util.computeStrides(r.shape),c=h.util.computeStrides(a.shape),d=h.backend_util.computeConv3DInfo(l,a.shape,o,1,i),p=new h.TensorBuffer(d.inShape,"float32"),f=p.values,[m,g,y,b]=p.strides,x=n.data.get(r.dataId).values,[v,w,k,T]=u,S=n.data.get(a.dataId).values,[N,I,C,A]=c,{batchSize:E,filterDepth:$,filterHeight:R,filterWidth:_,inChannels:D,inDepth:F,inHeight:O,inWidth:M,outChannels:z,outDepth:L,outHeight:P,outWidth:B,strideDepth:W,strideHeight:V,strideWidth:U}=d,G=$-1-d.padInfo.front,H=R-1-d.padInfo.top,j=_-1-d.padInfo.left;for(let e=0;e<E;++e)for(let t=0;t<D;++t)for(let n=0;n<F;++n){const s=n-G,r=Math.max(0,Math.ceil(s/W)),a=Math.min(L,($+s)/W);for(let i=0;i<O;++i){const o=i-H,l=Math.max(0,Math.ceil(o/V)),u=Math.min(P,(R+o)/V);for(let c=0;c<M;++c){const d=c-j,h=Math.max(0,Math.ceil(d/U)),p=Math.min(B,(_+d)/U);let E=0;for(let n=r;n<a;++n){const r=n*W-s;for(let s=l;s<u;++s){const a=s*V-o;for(let i=h;i<p;++i){const o=v*e+w*n+k*s+T*i,l=N*($-1-r)+I*(R-1-a)+C*(_-1-(i*U-d))+A*t;for(let e=0;e<z;++e)E+=x[o+e]*S[l+e]}}}f[m*e+g*n+y*i+b*c+t]=E}}}return n.makeTensorInfo(p.shape,p.dtype,p.values)}},Kg=Bp(h.Cos,e=>Math.cos(e)),Xg={kernelName:h.Cos,backendName:"cpu",kernelFunc:Kg},Zg=Bp(h.Cosh,e=>Math.cosh(e)),Qg={kernelName:h.Cosh,backendName:"cpu",kernelFunc:Zg},Jg={kernelName:h.CropAndResize,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:r,boxes:a,boxInd:i}=t,{cropSize:o,method:l,extrapolationValue:u}=s,[c,d,p,f]=r.shape,m=a.shape[0],[g,y]=o,b=(0,h.buffer)([m,g,y,f],"float32"),x=n.data.get(a.dataId).values,v=n.data.get(i.dataId).values,w=n.data.get(r.dataId).values,k=h.util.computeStrides(r.shape),T=h.util.computeStrides(b.shape);for(let e=0;e<m;e++){const t=4*e,n=x[t],s=x[t+1],r=x[t+2],a=x[t+3],i=v[e];if(i>=c)continue;const o=g>1?(r-n)*(d-1)/(g-1):0,h=y>1?(a-s)*(p-1)/(y-1):0;for(let t=0;t<g;t++){const c=g>1?n*(d-1)+t*o:.5*(n+r)*(d-1);if(c<0||c>d-1)for(let n=0;n<y;n++)for(let s=0;s<f;s++){const r=s+n*T[2]+t*T[1]+e*T[0];b.values[r]=u}else if("bilinear"===l){const n=Math.floor(c),r=Math.ceil(c),o=c-n;for(let l=0;l<y;l++){const c=y>1?s*(p-1)+l*h:.5*(s+a)*(p-1);if(c<0||c>p-1){for(let n=0;n<f;n++){const s=n+l*T[2]+t*T[1]+e*T[0];b.values[s]=u}continue}const d=Math.floor(c),m=Math.ceil(c),g=c-d;for(let s=0;s<f;s++){let a=s+d*k[2]+n*k[1]+i*k[0];const u=w[a];a=s+m*k[2]+n*k[1]+i*k[0];const c=w[a];a=s+d*k[2]+r*k[1]+i*k[0];const h=w[a];a=s+m*k[2]+r*k[1]+i*k[0];const p=u+(c-u)*g,f=h+(w[a]-h)*g;a=s+l*T[2]+t*T[1]+e*T[0],b.values[a]=p+(f-p)*o}}}else for(let n=0;n<y;++n){const r=y>1?s*(p-1)+n*h:.5*(s+a)*(p-1);if(r<0||r>p-1){for(let s=0;s<f;s++){const r=s+n*T[2]+t*T[1]+e*T[0];b.values[r]=u}continue}const o=Math.round(r),l=Math.round(c);for(let s=0;s<f;s++){const r=s+o*k[2]+l*k[1]+i*k[0],a=s+n*T[2]+t*T[1]+e*T[0];b.values[a]=w[r]}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},ey={kernelName:h.Cumprod,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s;hp(r,"cumprod");const l=h.backend_util.getAxesPermutation([a],r.shape.length);let u=r;null!=l&&(u=Uf({inputs:{x:r},backend:n,attrs:{perm:l}}));const c=h.backend_util.getInnerMostAxes(1,r.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const d=(0,h.upcastType)(u.dtype,"int32"),p=h.util.makeOnesTypedArray(h.util.sizeFromShape(u.shape),d),f=n.data.get(u.dataId).values,m=u.shape[u.shape.length-1],g=o?(e,t)=>e+m-t-1:(e,t)=>e+t;for(let e=0;e<f.length;e+=m)for(let t=0;t<m;t++){const n=g(e,t);if(0===t)p[n]=i?1:f[n];else{const s=g(e,t-1);p[n]=i?f[s]*p[s]:f[n]*p[s]}}const y=n.makeTensorInfo(u.shape,d,p);if(null!=l){const e=Uf({inputs:{x:y},backend:n,attrs:{perm:h.backend_util.getUndoAxesPermutation(l)}});return n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(u),e}return y}},ty={kernelName:h.Cumsum,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s;hp(r,"cumsum");const l=h.backend_util.getAxesPermutation([a],r.shape.length);let u=r;null!=l&&(u=Uf({inputs:{x:r},backend:n,attrs:{perm:l}}));const c=h.backend_util.getInnerMostAxes(1,r.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const d=(0,h.upcastType)(u.dtype,"int32"),p=h.util.makeZerosTypedArray(h.util.sizeFromShape(u.shape),d),f=n.data.get(u.dataId).values,m=u.shape[u.shape.length-1],g=o?(e,t)=>e+m-t-1:(e,t)=>e+t;for(let e=0;e<f.length;e+=m)for(let t=0;t<m;t++){const n=g(e,t);if(0===t)p[n]=i?0:f[n];else{const s=g(e,t-1);p[n]=i?f[s]+p[s]:f[n]+p[s]}}const y=n.makeTensorInfo(u.shape,d,p);if(null!=l){const e=Uf({inputs:{x:y},backend:n,attrs:{perm:h.backend_util.getUndoAxesPermutation(l)}});return n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(u),e}return y}},ny={kernelName:h.DenseBincount,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i,binaryOutput:o}=s;if(1===r.shape.length){const e=Fp(n.data.get(r.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,e)}if(2===r.shape.length){const e=Op(n.bufferSync(r),n.bufferSync(a),i,o);return n.makeTensorInfo(e.shape,a.dtype,e.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}},sy={kernelName:h.DepthToSpace,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockSize:a,dataFormat:i}=s;h.util.assert("NHWC"===i,()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`);const o=r.shape[0],l=r.shape[1],u=r.shape[2],c=r.shape[3],d=l*a,p=u*a,f=c/(a*a),m=n.data.get(r.dataId).values,g=new Float32Array(o*d*p*f);let y=0;for(let e=0;e<o;++e)for(let t=0;t<d;++t){const n=Math.floor(t/a),s=t%a;for(let t=0;t<p;++t){const r=Math.floor(t/a),i=(s*a+t%a)*f;for(let t=0;t<f;++t){const s=t+i+c*(r+u*(n+l*e));g[y++]=m[s]}}}return n.makeTensorInfo([o,d,p,f],r.dtype,g)}};function ry(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l,dimRoundingMode:u}=s;hp([r,a],"depthwiseConv2DNative");const c=h.util.computeStrides(r.shape),d=h.util.computeStrides(a.shape);let p=l;null==p&&(p=[1,1]),h.util.assert(h.backend_util.eitherStridesOrDilationsAreOne(i,p),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${p}'`);const f=h.backend_util.computeConv2DInfo(r.shape,a.shape,i,p,o,u,!0),{filterHeight:m,filterWidth:g,dilationHeight:y,dilationWidth:b,padInfo:x}=f,v=x.left,w=x.top,k=f.outChannels/f.inChannels,T=new h.TensorBuffer(f.outShape,r.dtype),S=n.data.get(r.dataId).values,N=n.data.get(a.dataId).values,I=T.values;for(let e=0;e<f.batchSize;++e){const t=e*c[0],n=e*T.strides[0];for(let e=0;e<f.outHeight;++e){const s=n+e*T.strides[1],r=e*f.strideHeight-w;for(let e=0;e<m;++e){const n=r+e*y;if(n<0||n>=f.inHeight)continue;const a=e*d[0],i=t+n*c[1];for(let e=0;e<f.outWidth;++e){const t=s+e*T.strides[2],n=e*f.strideWidth-v;for(let e=0;e<g;++e){const s=n+e*b;if(s<0||s>=f.inWidth)continue;const r=a+e*d[1],o=i+s*f.inChannels;let l=t,u=r;for(let e=0;e<f.inChannels;++e){const t=S[o+e];for(let e=0;e<k;++e)I[l+e]+=t*N[u+e];l+=k,u+=k}}}}}}return n.makeTensorInfo(T.shape,T.dtype,T.values)}const ay={kernelName:h.DepthwiseConv2dNative,backendName:"cpu",kernelFunc:ry},iy={kernelName:h.DepthwiseConv2dNativeBackpropFilter,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:c}=s;hp([r,a],"depthwiseConv2dNativeBackpropFilter");const d=h.backend_util.computeConv2DInfo(r.shape,c,i,o,l,u,!0),{strideHeight:p,strideWidth:f,filterHeight:m,filterWidth:g}=d,y=new h.TensorBuffer(d.filterShape,"float32"),b=d.padInfo.left,x=d.padInfo.top,v=d.outChannels/d.inChannels,w=n.data.get(r.dataId).values,k=new h.TensorBuffer(r.shape,r.dtype,w),T=n.data.get(a.dataId).values,S=new h.TensorBuffer(a.shape,a.dtype,T);for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((x-e)/p)),n=Math.min(d.outHeight,(d.inHeight+x-e)/p);for(let s=0;s<g;++s){const r=Math.max(0,Math.ceil((b-s)/f)),a=Math.min(d.outWidth,(d.inWidth+b-s)/f);for(let i=0;i<d.outChannels;++i){const o=Math.trunc(i/v),l=i%v;let u=0;for(let l=0;l<d.batchSize;++l)for(let c=t;c<n;++c){const t=e+c*p-x;for(let e=r;e<a;++e){const n=s+e*f-b;u+=k.get(l,t,n,o)*S.get(l,c,e,i)}}y.set(u,e,s,o,l)}}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}},oy={kernelName:h.DepthwiseConv2dNativeBackpropInput,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,inputShape:c}=s;hp([r,a],"depthwiseConv2DNativeBackpropInput");const d=h.util.computeStrides(r.shape),p=h.util.computeStrides(a.shape),f=h.backend_util.computeConv2DInfo(c,a.shape,i,o,l,u,!0),m=new h.TensorBuffer(f.inShape,"float32"),g=m.values,[y,b,x]=m.strides,v=n.data.get(r.dataId).values,[w,k,T]=d,S=n.data.get(a.dataId).values,[N,I,C]=p,{batchSize:A,filterHeight:E,filterWidth:$,inChannels:R,inHeight:_,inWidth:D,outChannels:F,outHeight:O,outWidth:M,strideHeight:z,strideWidth:L}=f,P=E-1-f.padInfo.top,B=$-1-f.padInfo.left,W=F/R;for(let e=0;e<A;++e)for(let t=0;t<R;++t)for(let n=0;n<_;++n){const s=n-P,r=Math.max(0,Math.ceil(s/z)),a=Math.min(O,(E+s)/z);for(let i=0;i<D;++i){const o=i-B,l=Math.max(0,Math.ceil(o/L)),u=Math.min(M,($+o)/L);let c=0;for(let n=r;n<a;++n){const r=n*z-s;for(let s=l;s<u;++s){const a=w*e+k*n+T*s,i=N*(E-1-r)+I*($-1-(s*L-o))+C*t;for(let e=0;e<W;++e)c+=v[a+(t*W+e)]*S[i+e]}}g[y*e+b*n+x*i+t]=c}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}},ly={kernelName:h.Diag,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=h.util.sizeFromShape(s.shape),a=n.data.get(s.dataId).values,i=(0,h.buffer)([r,r],s.dtype),o=i.values;for(let e=0;e<a.length;e++)o[e*r+e]=a[e];const l=[...s.shape,...s.shape];return n.makeTensorInfo(l,i.dtype,i.values)}},uy={kernelName:h.Dilation2D,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r}=e,{strides:a,pad:i,dilations:o}=n,l=t,u=l.data.get(s.dataId).values,c=s.shape.length,d=l.data.get(r.dataId).values,p=r.shape.length,{batchSize:f,inHeight:m,inWidth:g,inChannels:y,outHeight:b,outWidth:x,padInfo:v,strideHeight:w,strideWidth:k,filterHeight:T,filterWidth:S,dilationHeight:N,dilationWidth:I,outShape:C}=h.backend_util.computeDilation2DInfo(s.shape,r.shape,a,i,"NHWC",o),A=h.util.sizeFromShape(C),E=C.length,$=h.util.getArrayFromDType(s.dtype,A);for(let e=0;e<f;++e)for(let t=0;t<b;++t){const n=t*w-v.top;for(let a=0;a<x;++a){const i=a*k-v.left;for(let o=0;o<y;++o){let l=Number.MIN_SAFE_INTEGER;for(let t=0;t<T;++t){const a=n+t*N;if(a>=0&&a<m)for(let n=0;n<S;++n){const f=i+n*I;if(f>=0&&f<g){const i=h.util.locToIndex([e,a,f,o],c,h.util.computeStrides(s.shape)),m=h.util.locToIndex([t,n,o],p,h.util.computeStrides(r.shape)),g=u[i]+d[m];g>l&&(l=g)}}}$[h.util.locToIndex([e,t,a,o],E,h.util.computeStrides(C))]=l}}}return{dataId:l.write(h.util.toTypedArray($,s.dtype),C,s.dtype),shape:C,dtype:s.dtype}}},cy={kernelName:h.Dilation2DBackpropFilter,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r,dy:a}=e,{strides:i,pad:o,dilations:l}=n,u=t,c=h.util.toNestedArray(s.shape,u.data.get(s.dataId).values),d=h.util.toNestedArray(r.shape,u.data.get(r.dataId).values),{batchSize:p,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:v,strideWidth:w,filterHeight:k,filterWidth:T,dilationHeight:S,dilationWidth:N,outShape:I}=h.backend_util.computeDilation2DInfo(s.shape,r.shape,i,o,"NHWC",l);h.util.assert(a.rank===I.length,()=>`Error in ${h.Dilation2DBackpropFilter}, dy must have the same rank as output ${I.length}, but got ${a.rank}`);const C=h.util.toNestedArray(I,u.data.get(a.dataId).values),A=h.util.makeZerosNestedTypedArray(r.shape,r.dtype);for(let e=0;e<p;++e)for(let t=0;t<y;++t){const n=t*v-x.top;for(let s=0;s<b;++s){const r=s*w-x.left;for(let a=0;a<g;++a){let i=Number.MIN_SAFE_INTEGER,o=0,l=0;for(let t=0;t<k;++t){const s=n+t*S;if(s>=0&&s<f)for(let n=0;n<T;++n){const u=r+n*N;if(u>=0&&u<m){const r=c[e][s][u][a]+d[t][n][a];r>i&&(i=r,o=t,l=n)}}}A[o][l][a]+=C[e][t][s][a]}}}return{dataId:u.write(h.util.toTypedArray(A,s.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},dy={kernelName:h.Dilation2DBackpropInput,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r,dy:a}=e,{strides:i,pad:o,dilations:l}=n,u=t,c=h.util.toNestedArray(s.shape,u.data.get(s.dataId).values),d=h.util.toNestedArray(r.shape,u.data.get(r.dataId).values),{batchSize:p,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:v,strideWidth:w,filterHeight:k,filterWidth:T,dilationHeight:S,dilationWidth:N,outShape:I}=h.backend_util.computeDilation2DInfo(s.shape,r.shape,i,o,"NHWC",l);h.util.assert(a.rank===I.length,()=>`Error in ${h.Dilation2DBackpropInput}, dy must have the same rank as output ${I.length}, but got ${a.rank}`);const C=h.util.toNestedArray(I,u.data.get(a.dataId).values),A=h.util.makeZerosNestedTypedArray(s.shape,s.dtype);for(let e=0;e<p;++e)for(let t=0;t<y;++t){const n=t*v-x.top;for(let s=0;s<b;++s){const r=s*w-x.left;for(let a=0;a<g;++a){let i=Number.MIN_SAFE_INTEGER,o=n<0?0:n,l=r<0?0:r;for(let t=0;t<k;++t){const s=n+t*S;if(s>=0&&s<f)for(let n=0;n<T;++n){const u=r+n*N;if(u>=0&&u<m){const r=c[e][s][u][a]+d[t][n][a];r>i&&(i=r,o=s,l=u)}}}A[e][o][l][a]+=C[e][t][s][a]}}}return{dataId:u.write(h.util.toTypedArray(A,s.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},hy={kernelName:h.Draw,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:r}=t,{canvas:a,options:i}=s,{contextOptions:o,imageOptions:l}=i||{},u=(null==l?void 0:l.alpha)||1,c=(null==o?void 0:o.contextType)||"2d";if("2d"!==c)throw new Error(`Context type ${o.contextType} is not supported by the CPU backend.`);const d=a.getContext(c,(null==o?void 0:o.contextAttributes)||{});if(null==d)throw new Error(`Could not get the context with ${c} type.`);const[h,p]=r.shape.slice(0,2),f=2===r.shape.length?1:r.shape[2],m=n.data.get(r.dataId).values,g="float32"===r.dtype?255:1,y=new Uint8ClampedArray(p*h*4);for(let e=0;e<h*p;++e){const t=[0,0,0,255*u];for(let n=0;n<f;n++){const s=m[e*f+n];if("float32"===r.dtype){if(s<0||s>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${s}.`)}else if("int32"===r.dtype&&(s<0||s>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${s}.`);1===f?(t[0]=s*g,t[1]=s*g,t[2]=s*g):t[n]=s*g}const n=4*e;y[n+0]=Math.round(t[0]),y[n+1]=Math.round(t[1]),y[n+2]=Math.round(t[2]),y[n+3]=Math.round(t[3])}a.width=p,a.height=h;const b=new ImageData(y,p,h);return d.putImageData(b,0,0),r}};function py(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;let o;hp(r,"sum"),o="bool"===r.dtype?Ip({inputs:{x:r},backend:n,attrs:{dtype:"int32"}}):wp({inputs:{x:r},backend:n});const l=o.shape.length,u=h.util.parseAxisParam(a,o.shape),c=h.backend_util.getAxesPermutation(u,l);let d=u,p=o;null!=c&&(p=Uf({inputs:{x:o},backend:n,attrs:{perm:c}}),d=h.backend_util.getInnerMostAxes(d.length,l)),h.backend_util.assertAxesAreInnerMostDims("sum",d,p.shape.length);const[f,m]=h.backend_util.computeOutAndReduceShapes(p.shape,d);let g=vp(n,f,h.backend_util.upcastType(p.dtype,"int32"));const y=h.util.sizeFromShape(m),b=n.data.get(g.dataId).values,x=n.data.get(p.dataId).values;for(let e=0;e<b.length;++e){const t=e*y;let n=0;for(let e=0;e<y;++e)n+=x[t+e];b[e]=n}if(i){const e=g;g=Jm({inputs:{x:g},backend:n,attrs:{shape:h.backend_util.expandShapeToKeepDim(g.shape,u)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(o),null!=c&&n.disposeIntermediateTensorInfo(p),g}const fy={kernelName:h.Sum,backendName:"cpu",kernelFunc:py},my={kernelName:h.Einsum,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{equation:r}=s,a=t,{allDims:i,summedDims:o,idDims:l}=h.backend_util.decodeEinsumEquation(r,a.length);h.backend_util.checkEinsumDimSizes(i.length,l,a);const{path:u,steps:c}=h.backend_util.getEinsumComputePath(o,l),d=c.length;let p=null,f=i.length;const m=[];for(let e=0;e<d;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:s}=h.backend_util.getEinsumPermutation(f,l[t]);let r;h.backend_util.isIdentityPermutation(e)?r=a[t]:(r=Uf({inputs:{x:a[t]},backend:n,attrs:{perm:e}}),m.push(r));const i=r.shape.slice();for(let e=0;e<s.length;++e)i.splice(s[e],0,1);h.util.arraysEqual(r.shape,i)||(r=Jm({inputs:{x:r},backend:n,attrs:{shape:i}}),m.push(r)),null===p?p=r:(p=Of({inputs:{a:r,b:p},backend:n}),m.push(p))}e<d-1&&(u[e]>=0&&(p=py({inputs:{x:p},backend:n,attrs:{axis:u[e]-(i.length-f),keepDims:!1}}),m.push(p)),f--)}for(const e of m)e!==p&&n.disposeIntermediateTensorInfo(e);return p}},gy={kernelName:h.EluGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:s,y:r}=t;hp([s,r],"eluGrad");const a=new Float32Array(h.util.sizeFromShape(r.shape)),i=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values;for(let e=0;e<i.length;++e){const t=i[e];a[e]=t>=0?o[e]:o[e]*(t+1)}return n.makeTensorInfo(r.shape,"float32",a)}},yy=h.backend_util.ERF_P,by=h.backend_util.ERF_A1,xy=h.backend_util.ERF_A2,vy=h.backend_util.ERF_A3,wy=h.backend_util.ERF_A4,ky=h.backend_util.ERF_A5,Ty=Bp(h.Erf,e=>{const t=Math.sign(e),n=Math.abs(e),s=1/(1+yy*n);return t*(1-((((ky*s+wy)*s+vy)*s+xy)*s+by)*s*Math.exp(-n*n))}),Sy={kernelName:h.Erf,backendName:"cpu",kernelFunc:Ty};function Ny(e){const{inputs:t,backend:n,attrs:s}=e,{input:r}=t,{dim:a}=s,i=r.shape.length,o=r.shape.slice();let l=a;return a<0&&(h.util.assert(-(i+1)<=a,()=>`Axis must be in the interval [${-(i+1)}, ${i}]`),l=i+a+1),o.splice(l,0,1),Jm({inputs:{x:r},backend:n,attrs:{shape:o}})}const Iy={kernelName:h.ExpandDims,backendName:"cpu",kernelFunc:Ny},Cy=yp((e,t)=>e/t),Ay=Ap(h.RealDiv,Cy),Ey={kernelName:h.RealDiv,backendName:"cpu",kernelFunc:Ay};function $y(e,t,n){const s=e.shape,r=s[0],a=s[1],i=n.data.get(e.dataId),o=i.complexTensorInfos.real,l=i.complexTensorInfos.imag,u=[r,a],c=h.util.sizeFromShape(u),d=h.util.getTypedArrayFromDType("float32",c),p=h.util.getTypedArrayFromDType("float32",c);for(let e=0;e<r;e++){const s=dm({inputs:{x:o},backend:n,attrs:{begin:[e,0],size:[1,a]}}),r=dm({inputs:{x:l},backend:n,attrs:{begin:[e,0],size:[1,a]}}),i=bp({inputs:{real:s,imag:r},backend:n}),{real:u,imag:c}=Ry(i,t,n),f=h.backend_util.mergeRealAndImagArrays(u,c);for(let t=0;t<a;t++){const n=h.backend_util.getComplexWithIndex(f,t);d[e*a+t]=n.real,p[e*a+t]=n.imag}n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(i)}const f=n.makeTensorInfo(u,"float32",d),m=n.makeTensorInfo(u,"float32",p),g=bp({inputs:{real:f,imag:m},backend:n});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}function Ry(e,t,n){const s=h.util.sizeFromShape(e.shape),r=n.data.get(e.dataId),a=n.data.get(r.complexTensorInfos.real.dataId).values,i=n.data.get(r.complexTensorInfos.imag.dataId).values;if((o=s)&o-1){const e=function(e,t,n){const s=new Float32Array(2*t);for(let r=0;r<t;r++){let a=0,i=0;for(let s=0;s<t;s++){const o=h.backend_util.exponent(r*s,t,n),l=h.backend_util.getComplexWithIndex(e,s);a+=l.real*o.real-l.imag*o.imag,i+=l.real*o.imag+l.imag*o.real}n&&(a/=t,i/=t),h.backend_util.assignToTypedArray(s,a,i,r)}return s}(h.backend_util.mergeRealAndImagArrays(a,i),s,t);return h.backend_util.splitRealAndImagArrays(e)}{const r=_y(a,i,s,t,n),o=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(o,"float32",r.real),t=n.makeTensorInfo(o,"float32",r.imag),a=n.makeTensorInfo([],"float32",h.util.createScalarValue(s,"float32")),i=wp({inputs:{x:a},backend:n}),l=Ey.kernelFunc({inputs:{a:e,b:a},backend:n}),u=Ey.kernelFunc({inputs:{a:t,b:i},backend:n}),c=n.data.get(l.dataId).values,d=n.data.get(u.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),{real:c,imag:d}}return r}var o}function _y(e,t,n,s,r){if(1===n)return{real:e,imag:t};const a=h.backend_util.mergeRealAndImagArrays(e,t),i=n/2,o=h.backend_util.complexWithEvenIndex(a),l=o.real,u=o.imag,c=[l.length],d=r.makeTensorInfo(c,"float32",l),p=r.makeTensorInfo(c,"float32",u),f=bp({inputs:{real:d,imag:p},backend:r}),m=h.backend_util.complexWithOddIndex(a),g=m.real,y=m.imag,b=[g.length],x=r.makeTensorInfo(b,"float32",g),v=r.makeTensorInfo(b,"float32",y),w=bp({inputs:{real:x,imag:v},backend:r}),k=_y(l,u,i,s,r),T=k.real,S=k.imag,N=[T.length],I=r.makeTensorInfo(N,"float32",T),C=r.makeTensorInfo(N,"float32",S),A=bp({inputs:{real:I,imag:C},backend:r}),E=_y(g,y,i,s,r),$=E.real,R=E.imag,_=[$.length],D=r.makeTensorInfo(_,"float32",$),F=r.makeTensorInfo(_,"float32",R),O=bp({inputs:{real:D,imag:F},backend:r}),M=h.backend_util.exponents(n,s),z=[M.real.length],L=r.makeTensorInfo(z,"float32",M.real),P=r.makeTensorInfo(z,"float32",M.imag),B=bp({inputs:{real:L,imag:P},backend:r}),W=Of({inputs:{a:B,b:O},backend:r}),V=_p({inputs:{a:A,b:W},backend:r}),U=Dm({inputs:{a:A,b:W},backend:r}),G=Tp({inputs:{input:V},backend:r}),H=Tp({inputs:{input:U},backend:r}),j=Lg({inputs:{input:V},backend:r}),q=Lg({inputs:{input:U},backend:r}),Y=Bg({inputs:[G,H],backend:r,attrs:{axis:0}}),K=Bg({inputs:[j,q],backend:r,attrs:{axis:0}}),X=r.data.get(Y.dataId).values,Z=r.data.get(K.dataId).values;return r.disposeIntermediateTensorInfo(d),r.disposeIntermediateTensorInfo(p),r.disposeIntermediateTensorInfo(f),r.disposeIntermediateTensorInfo(x),r.disposeIntermediateTensorInfo(v),r.disposeIntermediateTensorInfo(w),r.disposeIntermediateTensorInfo(I),r.disposeIntermediateTensorInfo(C),r.disposeIntermediateTensorInfo(A),r.disposeIntermediateTensorInfo(D),r.disposeIntermediateTensorInfo(F),r.disposeIntermediateTensorInfo(O),r.disposeIntermediateTensorInfo(L),r.disposeIntermediateTensorInfo(P),r.disposeIntermediateTensorInfo(B),r.disposeIntermediateTensorInfo(W),r.disposeIntermediateTensorInfo(V),r.disposeIntermediateTensorInfo(U),r.disposeIntermediateTensorInfo(G),r.disposeIntermediateTensorInfo(j),r.disposeIntermediateTensorInfo(H),r.disposeIntermediateTensorInfo(q),r.disposeIntermediateTensorInfo(Y),r.disposeIntermediateTensorInfo(K),{real:X,imag:Z}}const Dy={kernelName:h.FFT,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,r=h.util.sizeFromShape(s.shape),a=s.shape[s.shape.length-1],i=Jm({inputs:{x:s},backend:n,attrs:{shape:[r/a,a]}}),o=$y(i,!1,n),l=Jm({inputs:{x:o},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),l}};function Fy(e){const{backend:t,attrs:n}=e,{shape:s,value:r,dtype:a}=n,i=a||h.util.inferDtype(r),o=h.util.getArrayFromDType(i,h.util.sizeFromShape(s));return function(e,t){e.fill(t)}(o,r),t.makeTensorInfo(s,i,o)}const Oy={kernelName:h.Fill,backendName:"cpu",kernelFunc:Fy},My={kernelName:h.FlipLeftRight,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,r=n,a=h.util.getTypedArrayFromDType(s.dtype,h.util.sizeFromShape(s.shape)),[i,o,l,u]=s.shape,c=r.data.get(s.dataId).values;for(let e=0;e<i;e++){const t=e*l*o*u;for(let e=0;e<o;e++){const n=e*(l*u);for(let e=0;e<l;e++){const s=e*u;for(let r=0;r<u;r++){const i=Math.round(l-e-1),o=t+n+s+r;let d=c[o];i>=0&&i<l&&(d=c[t+n+i*u+r]),a[o]=d}}}}return{dataId:r.write(a,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},zy={kernelName:h.FusedConv2D,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:d,dimRoundingMode:h,activation:p,leakyreluAlpha:f}=s;let m=Vg({inputs:{x:r,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:d,dimRoundingMode:h}});if(i){const e=m;if("NCHW"===c&&1===i.shape.length&&1!==i.shape[0]){const e=Jm({inputs:{x:i},backend:n,attrs:{shape:[i.shape[0],1,1]}});m=_p({inputs:{a:m,b:e},backend:n}),n.disposeIntermediateTensorInfo(e)}else m=_p({inputs:{a:m,b:i},backend:n});n.disposeIntermediateTensorInfo(e)}if(p){const e=m;if("NCHW"===c&&"prelu"===p&&1===o.shape.length&&1!==o.shape[0]){const e=Jm({inputs:{x:o},backend:n,attrs:{shape:[o.shape[0],1,1]}});m=Qm(n,m,p,e,f),n.disposeIntermediateTensorInfo(e)}else m=Qm(n,m,p,o,f);n.disposeIntermediateTensorInfo(e)}return m}},Ly={kernelName:h.FusedDepthwiseConv2D,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:d,dimRoundingMode:h,activation:p,leakyreluAlpha:f}=s;let m=ry({inputs:{x:r,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:d,dimRoundingMode:h}});if(i){const e=m;m=_p({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(p){const e=m;m=Qm(n,m,p,o,f),n.disposeIntermediateTensorInfo(e)}return m}},Py={kernelName:h.GatherNd,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:r}=t,a=h.util.sizeFromShape(s.shape),i=r.shape,o=i[i.length-1],[l,u,c,d]=h.backend_util.prepareAndValidate(s,r);if(0===u)return n.makeTensorInfo(l,s.dtype,[]);const p=lf(n.data.get(r.dataId).values,n.bufferSync(s),s.dtype,u,o,c,d,s.shape,a);return n.makeTensorInfo(l,s.dtype,p.values)}},By={kernelName:h.GatherV2,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,indices:a}=t,{axis:i,batchDims:o}=s;hp([r,a],"gatherV2");const l=h.util.parseAxisParam(i,r.shape)[0],u=n.data.get(a.dataId).values,c=r.shape[l];for(let e=0;e<u.length;++e){const t=u[e];h.util.assert(t<=c-1&&t>=0,()=>`GatherV2: the index value ${t} is not in [0, ${c-1}]`)}let d=o;null==o&&(d=0);const p=h.util.sizeFromShape(a.shape),f=h.backend_util.segment_util.collectGatherOpShapeInfo(r,a,l,d),m=Jm({inputs:{x:r},backend:n,attrs:{shape:[f.batchSize,f.outerSize,f.dimSize,f.sliceSize]}}),g=Jm({inputs:{x:a},backend:n,attrs:{shape:[f.batchSize,p/f.batchSize]}}),y=[f.batchSize,f.outerSize,p/f.batchSize,f.sliceSize],b=n.bufferSync(g),x=uf(n.bufferSync(m),b,y);return n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),n.makeTensorInfo(f.outputShape,x.dtype,x.values)}},Wy={kernelName:h.IFFT,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,r=h.util.sizeFromShape(s.shape),a=s.shape[s.shape.length-1],i=Jm({inputs:{x:s},backend:n,attrs:{shape:[r/a,a]}}),o=$y(i,!0,n),l=Jm({inputs:{x:o},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),l}},Vy=Bp(h.IsFinite,e=>Number.isFinite(e)?1:0,"bool"),Uy={kernelName:h.IsFinite,backendName:"cpu",kernelFunc:Vy},Gy=Bp(h.IsInf,e=>Math.abs(e)===1/0?1:0,"bool"),Hy={kernelName:h.IsInf,backendName:"cpu",kernelFunc:Gy},jy=Bp(h.IsNan,e=>Number.isNaN(e)?1:0,"bool"),qy={kernelName:h.IsNan,backendName:"cpu",kernelFunc:jy},Yy={kernelName:h.LinSpace,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,num:a}=n,i=kf(s,r,a);return t.makeTensorInfo([i.length],"float32",i)}},Ky=Bp(h.Log1p,e=>Math.log1p(e)),Xy={kernelName:h.Log1p,backendName:"cpu",kernelFunc:Ky},Zy=yp((e,t)=>e&&t),Qy=Ap(h.LogicalAnd,Zy,null,"bool"),Jy={kernelName:h.LogicalAnd,backendName:"cpu",kernelFunc:Qy},eb=Bp(h.LogicalNot,e=>e?0:1,"bool"),tb={kernelName:h.LogicalNot,backendName:"cpu",kernelFunc:eb},nb=yp((e,t)=>e||t),sb=Ap(h.LogicalOr,nb,null,"bool"),rb={kernelName:h.LogicalOr,backendName:"cpu",kernelFunc:sb},ab={kernelName:h.LRN,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{depthRadius:a,bias:i,alpha:o,beta:l}=s;hp(r,"LRN");const u=r.shape[3],c=u-1,d=n.data.get(r.dataId).values,p=h.util.sizeFromShape(r.shape),f=new Float32Array(p);function m(e){const t=e%u;let n=e-t+Math.max(0,t-a);const s=e-t+Math.min(t+a,c);let r=0;for(;n<=s;n++){const e=d[n];r+=e*e}return r}for(let e=0;e<p;e++){const t=m(e),n=d[e]*Math.pow(i+o*t,-l);f[e]=n}return n.makeTensorInfo(r.shape,r.dtype,f)}},ib={kernelName:h.LRNGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,y:a,dy:i}=t,{depthRadius:o,bias:l,alpha:u,beta:c}=s;hp(i,"LRNGrad");const d=h.util.sizeFromShape(i.shape),p=i.shape[3],f=n.data.get(i.dataId).values,m=n.data.get(r.dataId).values,g=n.data.get(a.dataId).values,y=new Float32Array(d),b=d;for(let e=0;e<b;e++){const t=e%p,n=e-t+Math.max(0,t-o),s=e-t+Math.min(p,t+o+1);let r=0;for(let e=n;e<s;e++)r+=Math.pow(m[e],2);r=u*r+l;for(let t=n;t<s;t++){let n=-2*u*c*m[t]*g[e]/r;e===t&&(n+=Math.pow(r,-c)),n*=f[e],y[t]+=n}}return n.makeTensorInfo(i.shape,r.dtype,y)}};function ob(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reductionIndices:a,keepDims:i}=s,o=n;let l=r.shape;const u=l.length,c=h.util.parseAxisParam(a,l);let d=c;const p=h.backend_util.getAxesPermutation(d,u);let f=o.data.get(r.dataId).values;if(null!=p){const e=new Array(u);for(let t=0;t<e.length;t++)e[t]=l[p[t]];f=Vf(f,l,r.dtype,p,e),d=h.backend_util.getInnerMostAxes(d.length,u),l=e}hp(r,"max"),h.backend_util.assertAxesAreInnerMostDims("max",d,u);const[m,g]=h.backend_util.computeOutAndReduceShapes(l,d),y=If(f,h.util.sizeFromShape(g),m,r.dtype),b=o.write(y,m,r.dtype);let x=m;return i&&(x=h.backend_util.expandShapeToKeepDim(m,c)),{dataId:b,shape:x,dtype:r.dtype}}const lb={kernelName:h.Max,backendName:"cpu",kernelFunc:ob},ub={kernelName:h.MaxPool,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;hp(r,"maxPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;h.util.assert(h.backend_util.eitherStridesOrDilationsAreOne(i,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`);const u=h.backend_util.computePool2DInfo(r.shape,a,i,1,o,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&h.util.arraysEqual(u.inShape,u.outShape))c=wp({inputs:{x:r},backend:n});else{const e=n.data.get(r.dataId).values,t=h.util.computeStrides(r.shape),s=Sg(e,r.shape,r.dtype,t,u,"max");c=n.makeTensorInfo(u.outShape,r.dtype,s.values)}return c}},cb={kernelName:h.MaxPool3D,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s;hp(r,"maxPool3d");const c=h.backend_util.computePool3DInfo(r.shape,a,i,1,o,l,u),d=Ig(n.data.get(r.dataId).values,r.shape,r.dtype,h.util.computeStrides(r.shape),c,"max");return n.makeTensorInfo(d.shape,"float32",d.values)}},db={kernelName:h.MaxPool3DGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=s;hp([r,a],"maxPool3DGrad");const c=h.backend_util.computePool3DInfo(a.shape,i,o,1,l,u),d=function(e,t){const n=(0,h.buffer)(t.outShape,"int32"),s=t.strideDepth,r=t.strideHeight,a=t.strideWidth,i=t.dilationDepth,o=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,d=t.effectiveFilterWidth,p=t.padInfo.front,f=t.padInfo.top,m=t.padInfo.left;for(let h=0;h<t.batchSize;++h)for(let g=0;g<t.inChannels;++g)for(let y=0;y<t.outDepth;++y){const b=y*s-p;let x=b;for(;x<0;)x+=i;const v=Math.min(t.inDepth,u+b);for(let s=0;s<t.outHeight;++s){const u=s*r-f;let p=u;for(;p<0;)p+=o;const w=Math.min(t.inHeight,c+u);for(let r=0;r<t.outWidth;++r){const f=r*a-m;let k=f;for(;k<0;)k+=l;const T=Math.min(t.inWidth,d+f);let S=Number.NEGATIVE_INFINITY,N=-1;for(let t=x;t<v;t+=i){const n=t-b;for(let s=p;s<w;s+=o){const r=s-u;for(let a=k;a<T;a+=l){const i=a-f,o=e.get(h,t,s,a,g);o>=S&&(S=o,N=n*c*d+r*c+i)}}}n.set(N,h,y,s,r,g)}}}return n}(n.bufferSync(a),c),p=c.strideDepth,f=c.strideHeight,m=c.strideWidth,g=c.dilationDepth,y=c.dilationHeight,b=c.dilationWidth,x=c.effectiveFilterDepth,v=c.effectiveFilterHeight,w=c.effectiveFilterWidth,k=x-1-c.padInfo.front,T=w-1-c.padInfo.left,S=v-1-c.padInfo.top,N=(0,h.buffer)(a.shape,"float32"),I=n.bufferSync(r);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let s=0;s<c.inHeight;++s)for(let r=0;r<c.inWidth;++r){const a=n-k,i=s-S,o=r-T;let l=0;for(let n=0;n<x;n+=g){const s=(a+n)/p;if(!(s<0||s>=c.outDepth||Math.floor(s)!==s))for(let r=0;r<v;r+=y){const a=(i+r)/f;if(!(a<0||a>=c.outHeight||Math.floor(a)!==a))for(let i=0;i<w;i+=b){const u=(o+i)/m;if(u<0||u>=c.outWidth||Math.floor(u)!==u)continue;const h=x*v*w-1-d.get(e,s,a,u,t)===n*v*w+r*w+i?1:0;0!==h&&(l+=I.get(e,s,a,u,t)*h)}}}N.set(l,e,n,s,r,t)}return n.makeTensorInfo(N.shape,N.dtype,N.values)}},hb={kernelName:h.MaxPoolGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a,output:i}=t,o=a;hp([a,i],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:d}=s,p=h.backend_util.computePool2DInfo(o.shape,l,u,1,c,d),f=n.data.get(o.dataId).values,m=(0,h.buffer)(p.outShape,o.dtype,Ng(f,o.shape,o.dtype,p).values),g=p.strideHeight,y=p.strideWidth,b=p.dilationHeight,x=p.dilationWidth,v=p.effectiveFilterHeight,w=p.effectiveFilterWidth,k=w-1-p.padInfo.left,T=v-1-p.padInfo.top,S=(0,h.buffer)(o.shape,"float32"),N=n.data.get(r.dataId).values,I=(0,h.buffer)(r.shape,"float32",N);for(let e=0;e<p.batchSize;++e)for(let t=0;t<p.inChannels;++t)for(let n=0;n<p.inHeight;++n)for(let s=0;s<p.inWidth;++s){const r=n-T,a=s-k;let i=0;for(let n=0;n<v;n+=b){const s=(r+n)/g;if(!(s<0||s>=p.outHeight||Math.floor(s)!==s))for(let r=0;r<w;r+=x){const o=(a+r)/y;if(o<0||o>=p.outWidth||Math.floor(o)!==o)continue;const l=v*w-1-m.get(e,s,o,t)===n*w+r?1:0;0!==l&&(i+=I.get(e,s,o,t)*l)}}S.set(i,e,n,s,t)}return n.makeTensorInfo(S.shape,S.dtype,S.values)}},pb={kernelName:h.MaxPoolWithArgmax,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:r,strides:a,pad:i,includeBatchInIndex:o}=t,l=n;hp(s,"MaxPoolWithArgmax");const u=l.data.get(s.dataId).values,c=h.backend_util.computePool2DInfo(s.shape,r,a,[1,1],i),[d,p]=function(e,t,n,s,r){const a=Sg(e,0,n,h.util.computeStrides(t),r,"max"),i=Ng(e,t,n,r,!0,s);return[a.values,i.values]}(u,s.shape,s.dtype,o,c),f=l.write(d,c.outShape,s.dtype),m=l.write(p,c.outShape,s.dtype);return[{dataId:f,shape:c.outShape,dtype:s.dtype},{dataId:m,shape:c.outShape,dtype:"int32"}]}},fb={kernelName:h.Mean,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=h.util.parseAxisParam(a,r.shape),l=h.backend_util.computeOutAndReduceShapes(r.shape,o)[1],u=h.util.sizeFromShape(l),c=[],d=n.makeTensorInfo([],"float32",new Float32Array([u]));c.push(d);const p=Ip({inputs:{x:r},backend:n,attrs:{dtype:"float32"}});c.push(p);const f=Ay({inputs:{a:p,b:d},backend:n});c.push(f);const m=py({inputs:{x:f},backend:n,attrs:{axis:a,keepDims:i}});return c.forEach(e=>n.disposeIntermediateTensorInfo(e)),m}},mb={kernelName:h.Min,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;hp(r,"min");const o=h.util.parseAxisParam(a,r.shape);let l=o;const u=h.backend_util.getAxesPermutation(l,r.shape.length);let c=r;null!=u&&(c=Uf({inputs:{x:r},backend:n,attrs:{perm:u}}),l=h.backend_util.getInnerMostAxes(l.length,r.shape.length)),h.backend_util.assertAxesAreInnerMostDims("min",l,c.shape.length);const[d,p]=h.backend_util.computeOutAndReduceShapes(c.shape,l),f=h.util.sizeFromShape(p),m=h.util.makeZerosTypedArray(h.util.sizeFromShape(d),c.dtype),g=n.data.get(c.dataId).values;for(let e=0;e<m.length;++e){const t=e*f;let n=g[t];for(let e=0;e<f;++e){const s=g[t+e];(Number.isNaN(s)||s<n)&&(n=s)}m[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const y=n.makeTensorInfo(d,c.dtype,m);if(i){const e=Jm({inputs:{x:y},backend:n,attrs:{shape:h.backend_util.expandShapeToKeepDim(d,o)}});return n.disposeIntermediateTensorInfo(y),e}return y}},gb={kernelName:h.MirrorPad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,mode:i}=s;hp(r,"mirrorPad");const o=a.map((e,t)=>e[0]+r.shape[t]+e[1]),l=a.map(e=>e[0]),u=a.map((e,t)=>e[0]+r.shape[t]),c="reflect"===i?0:1,d=n.data.get(r.dataId).values,p=r.shape.length,f=h.util.computeStrides(r.shape),m=h.util.sizeFromShape(o),g=o.length,y=h.util.computeStrides(o),b=h.util.getTypedArrayFromDType(r.dtype,m);for(let e=0;e<m;e++){let t=h.util.indexToLoc(e,g,y);for(let e=0;e<g;e++)t[e]<l[e]?t[e]=2*l[e]-t[e]-c:t[e]>=u[e]&&(t[e]=2*(u[e]-1)-t[e]+c);t=t.map((e,t)=>e-l[t]);const n=h.util.locToIndex(t,p,f);b[e]=d[n]}return{dataId:n.write(b,o,r.dtype),shape:o,dtype:r.dtype}}},yb=yp((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t}),bb=Ap(h.Mod,yb),xb={kernelName:h.Mod,backendName:"cpu",kernelFunc:bb};function vb(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{dim:a}=s,i=r.shape.length;let o=a;if(-1===o&&(o=i-1),o!==i-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${o}`);const l=h.util.parseAxisParam([o],r.shape),u=ob({inputs:{x:r},backend:n,attrs:{reductionIndices:l,keepDims:!1}}),c=h.backend_util.expandShapeToKeepDim(u.shape,l),d=Jm({inputs:{x:u},backend:n,attrs:{shape:c}}),p=Dm({inputs:{a:r,b:d},backend:n}),f=Xp({inputs:{x:p},backend:n}),m=py({inputs:{x:f},backend:n,attrs:{axis:l,keepDims:!1}}),g=Jm({inputs:{x:m},backend:n,attrs:{shape:c}}),y=Ay({inputs:{a:f,b:g},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),y}const wb={kernelName:h.Softmax,backendName:"cpu",kernelFunc:vb},kb={kernelName:h.Multinomial,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{numSamples:a,seed:i,normalized:o}=s;hp(r,"multinomial");const l=o?r:vb({inputs:{logits:r},backend:n,attrs:{dim:-1}}),u=l.shape[0],c=l.shape[1],d=n.data.get(l.dataId).values,p=[u,a],f=h.util.makeZerosTypedArray(h.util.sizeFromShape(p),"int32");for(let e=0;e<u;++e){const t=e*c,n=new Float32Array(c-1);n[0]=d[t];for(let e=1;e<n.length;++e)n[e]=n[e-1]+d[t+e];const s=ah.alea(i.toString()),r=e*a;for(let e=0;e<a;++e){const t=s();f[r+e]=n.length;for(let s=0;s<n.length;s++)if(t<n[s]){f[r+e]=s;break}}}return o||n.disposeIntermediateTensorInfo(l),n.makeTensorInfo(p,"int32",f)}},Tb=h.kernel_impls.nonMaxSuppressionV3Impl,Sb={kernelName:h.NonMaxSuppressionV3,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=s;hp(r,"NonMaxSuppression");const u=n.data.get(r.dataId).values,c=n.data.get(a.dataId).values,{selectedIndices:d}=Tb(u,c,i,o,l);return n.makeTensorInfo([d.length],"int32",new Int32Array(d))}},Nb=h.kernel_impls.nonMaxSuppressionV4Impl,Ib={kernelName:h.NonMaxSuppressionV4,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=s;hp(r,"NonMaxSuppressionPadded");const c=n.data.get(r.dataId).values,d=n.data.get(a.dataId).values,{selectedIndices:h,validOutputs:p}=Nb(c,d,i,o,l,u);return[n.makeTensorInfo([h.length],"int32",new Int32Array(h)),n.makeTensorInfo([],"int32",new Int32Array([p]))]}},Cb=h.kernel_impls.nonMaxSuppressionV5Impl,Ab={kernelName:h.NonMaxSuppressionV5,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=s;hp(r,"NonMaxSuppressionWithScore");const c=n.data.get(r.dataId).values,d=n.data.get(a.dataId).values,h=i,p=o,f=l,m=u,{selectedIndices:g,selectedScores:y}=Cb(c,d,h,p,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}},Eb={kernelName:h.OneHot,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r}=t,{dtype:a,depth:i,onValue:o,offValue:l}=s;hp(r,"oneHot");const u=h.util.sizeFromShape(r.shape),c=new Float32Array(u*i);c.fill(l);const d=n.data.get(r.dataId).values;for(let e=0;e<u;++e)d[e]>=0&&d[e]<i&&(c[e*i+d[e]]=o);return n.makeTensorInfo([...r.shape,i],a,c)}};function $b(e){const{inputs:t,backend:n}=e,{x:s}=t;if("string"===s.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===s.dtype){const e=Tp({inputs:{input:s},backend:n}),t=$b({inputs:{x:e},backend:n}),r=Lg({inputs:{input:s},backend:n}),a=$b({inputs:{x:r},backend:n}),i=bp({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}return Fy({backend:n,attrs:{shape:s.shape,value:0,dtype:s.dtype}})}const Rb={kernelName:h.ZerosLike,backendName:"cpu",kernelFunc:$b},_b={kernelName:h.OnesLike,backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===r.dtype){const t=Tp({inputs:{input:r},backend:s}),n=e({inputs:{x:t},backend:s}),a=Lg({inputs:{input:r},backend:s}),i=$b({inputs:{x:a},backend:s}),o=bp({inputs:{real:n,imag:i},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}return Fy({backend:s,attrs:{shape:r.shape,value:1,dtype:r.dtype}})}};function Db(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s;if(1===t.length)return Ny({inputs:{input:t[0]},backend:n,attrs:{dim:r}});const a=t[0].shape,i=t[0].dtype;t.forEach(e=>{h.util.assertShapesMatch(a,e.shape,"All tensors passed to stack must have matching shapes"),h.util.assert(i===e.dtype,()=>"All tensors passed to stack must have matching dtypes")});const o=[],l=Bg({inputs:t.map(e=>{const t=Ny({inputs:{input:e},backend:n,attrs:{dim:r}});return o.push(t),t}),backend:n,attrs:{axis:r}});return o.forEach(e=>n.disposeIntermediateTensorInfo(e)),l}const Fb={kernelName:h.Pack,backendName:"cpu",kernelFunc:Db},Ob={kernelName:h.PadV2,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,constantValue:i}=s;hp(r,"pad");const o=a.map((e,t)=>e[0]+r.shape[t]+e[1]),l=a.map(e=>e[0]),u=n.data.get(r.dataId).values,c=h.util.sizeFromShape(r.shape),d=r.shape.length,p=h.util.computeStrides(r.shape),f=h.util.sizeFromShape(o),m=o.length,g=h.util.computeStrides(o),y=h.util.getTypedArrayFromDType(r.dtype,f);0!==i&&y.fill(i);for(let e=0;e<c;e++){const t=h.util.indexToLoc(e,d,p).map((e,t)=>e+l[t]);y[h.util.locToIndex(t,m,g)]=u[e]}return{dataId:n.write(y,o,r.dtype),shape:o,dtype:r.dtype}}},Mb=yp((e,t)=>Math.pow(e,t)),zb=Ap(h.Pow,Mb),Lb={kernelName:h.Pow,backendName:"cpu",kernelFunc:zb},Pb={kernelName:h.RaggedGather,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{paramsNestedSplits:r,paramsDenseValues:a,indices:i}=t,{outputRaggedRank:o}=s,l=r.map(e=>n.data.get(e.dataId).values),u=r.map(e=>e.shape),c=n.data.get(a.dataId).values,d=n.data.get(i.dataId).values,[h,p,f]=Yf(l,u,c,a.shape,a.dtype,d,i.shape),m=h.map(e=>n.makeTensorInfo([e.length],"int32",e)),g=n.makeTensorInfo(f,a.dtype,p);return m.concat([g])}},Bb={kernelName:h.RaggedRange,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{starts:s,limits:r,deltas:a}=t,i=n.data.get(s.dataId).values,o=n.data.get(r.dataId).values,l=n.data.get(a.dataId).values,[u,c]=Xf(i,s.shape,s.dtype,o,r.shape,l,a.shape);return[n.makeTensorInfo([u.length],"int32",u),n.makeTensorInfo([c.length],s.dtype,c)]}},Wb={kernelName:h.RaggedTensorToTensor,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{shape:r,values:a,defaultValue:i,rowPartitionTensors:o}=t,{rowPartitionTypes:l}=s,u=n.data.get(r.dataId).values,c=n.data.get(a.dataId).values,d=n.data.get(i.dataId).values,h=o.map(e=>n.data.get(e.dataId).values),p=o.map(e=>e.shape),[f,m]=tm(u,r.shape,c,a.shape,a.dtype,d,i.shape,h,p,l);return n.makeTensorInfo(f,a.dtype,m)}},Vb={kernelName:h.Range,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,dtype:a,step:i}=n,o=nm(s,r,i,a);return t.makeTensorInfo([o.length],a,o)}},Ub=Bp(h.Reciprocal,e=>1/e),Gb={kernelName:h.Reciprocal,backendName:"cpu",kernelFunc:Ub},Hb={kernelName:h.ResizeBilinear,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s;hp(r,"resizeBilinear");const l=h.util.computeStrides(r.shape),[u,c]=o,[d,p,f,m]=r.shape,g=n.data.get(r.dataId).values,y=new Float32Array(h.util.sizeFromShape([d,u,c,m])),b=[a&&u>1?p-1:p,a&&c>1?f-1:f],x=[a&&u>1?u-1:u,a&&c>1?c-1:c];let v=0;const w=b[0]/x[0],k=b[1]/x[1];for(let e=0;e<d;e++)for(let t=0;t<u;t++){let n;n=i?w*(t+.5)-.5:w*t;const s=Math.max(0,Math.floor(n)),r=n-s,a=Math.min(p-1,Math.ceil(n)),o=e*l[0]+s*l[1],u=e*l[0]+a*l[1];for(let e=0;e<c;e++){let t;t=i?k*(e+.5)-.5:k*e;const n=Math.max(0,Math.floor(t)),s=t-n,a=Math.min(f-1,Math.ceil(t)),c=o+n*l[2],d=u+n*l[2],h=o+a*l[2],p=u+a*l[2];for(let e=0;e<m;e++){const t=g[c+e],n=g[d+e],a=t+(g[h+e]-t)*s,i=a+(n+(g[p+e]-n)*s-a)*r;y[v++]=i}}}return n.makeTensorInfo([d,u,c,m],"float32",y)}},jb={kernelName:h.ResizeBilinearGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s;hp([a,r],"resizeBilinearGrad");const o=h.util.computeStrides(r.shape),[l,u,c,d]=r.shape,[,p,f]=a.shape,m=new Float32Array(l*u*c*d),g=[i&&p>1?u-1:u,i&&f>1?c-1:c],y=[i&&p>1?p-1:p,i&&f>1?f-1:f],b=g[0]/y[0],x=g[1]/y[1],v=n.data.get(a.dataId).values;let w=0;for(let e=0;e<l;e++){const t=e*o[0];for(let e=0;e<p;e++){const n=e*b,s=Math.floor(n),r=Math.min(Math.ceil(n),u-1),a=t+s*o[1],i=t+r*o[1],l=n-s,h=1-l;for(let e=0;e<f;e++){const t=e*x,n=Math.floor(t),s=Math.min(Math.ceil(t),c-1),r=t-n,u=1-r,p=a+n*o[2],f=a+s*o[2],g=i+n*o[2],y=i+s*o[2],b=h*u,k=h*r,T=l*u,S=l*r;for(let e=0;e<d;e++){const t=v[w++];m[p+e]+=t*b,m[f+e]+=t*k,m[g+e]+=t*T,m[y+e]+=t*S}}}}return n.makeTensorInfo([l,c,u,d],"float32",m)}},qb={kernelName:h.ResizeNearestNeighbor,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s;hp(r,"resizeNearestNeighbor");const l=h.util.computeStrides(r.shape),[u,c]=o,[d,p,f,m]=r.shape,g=n.data.get(r.dataId).values,y=new Float32Array(d*u*c*m),b=[a&&u>1?p-1:p,a&&c>1?f-1:f],x=[a&&u>1?u-1:u,a&&c>1?c-1:c],v=b[0]/x[0],w=b[1]/x[1];let k=0;for(let e=0;e<d;e++){const t=e*l[0];for(let e=0;e<u;e++){const n=i?v*(e+.5):v*e;let s=Math.min(p-1,a?Math.round(n):Math.floor(n));i&&(s=Math.max(0,s));const r=t+s*l[1];for(let e=0;e<c;e++){const t=i?w*(e+.5):w*e;let n=Math.min(f-1,a?Math.round(t):Math.floor(t));i&&(n=Math.max(0,n));const s=r+n*l[2];for(let e=0;e<m;e++){const t=g[s+e];y[k++]=t}}}}return n.makeTensorInfo([d,u,c,m],r.dtype,y)}},Yb={kernelName:h.ResizeNearestNeighborGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s;hp([a,r],"resizeNearestNeighborGrad");const o=h.util.computeStrides(r.shape),l=h.util.computeStrides(a.shape),[u,c,d,p]=r.shape,[,f,m]=a.shape,g=new Float32Array(u*c*d*p),y=n.data.get(a.dataId).values,b=[i&&f>1?c-1:c,i&&m>1?d-1:d],x=[i&&f>1?f-1:f,i&&m>1?m-1:m],v=b[0]/x[0],w=b[1]/x[1],k=1/v,T=1/w,S=2*Math.ceil(k)+2,N=2*Math.ceil(T)+2;for(let e=0;e<u;e++){const t=e*o[0];for(let e=0;e<c;e++){const n=t+e*o[1],s=Math.floor(e*k),r=Math.floor(s-S/2);for(let s=0;s<d;s++){const a=n+s*o[2],u=Math.floor(s*T),h=Math.floor(u-N/2);for(let n=0;n<p;n++){let o=0;for(let a=0;a<S;a++){const u=a+r;if(u<0||u>=f)continue;const p=t+u*l[1],g=u*v;if(e===Math.min(c-1,i?Math.round(g):Math.floor(g)))for(let e=0;e<N;e++){const t=e+h;if(t<0||t>=m)continue;const r=p+t*l[2],a=t*w;s===Math.min(d-1,i?Math.round(a):Math.floor(a))&&(o+=y[r+n])}}g[a+n]=o}}}}return n.makeTensorInfo(r.shape,r.dtype,g)}},Kb={kernelName:h.Reverse,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dims:a}=s;hp(r,"reverse");const i=r.shape.length,o=h.util.parseAxisParam(a,r.shape);if(0===i)return wp({inputs:{x:r},backend:n});const l=new h.TensorBuffer(r.shape,r.dtype),u=n.bufferSync(r);for(let e=0;e<l.size;e++){const t=l.indexToLoc(e),n=t.slice();o.forEach(e=>n[e]=r.shape[e]-1-n[e]),l.set(u.get(...n),...t)}return n.makeTensorInfo(l.shape,l.dtype,l.values)}},Xb={kernelName:h.RotateWithOffset,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:r,fillValue:a,center:i}=t,o=n,l=h.util.getTypedArrayFromDType(s.dtype,h.util.sizeFromShape(s.shape)),[u,c,d,p]=s.shape,[f,m]=h.backend_util.getImageCenter(i,c,d),g=Math.sin(r),y=Math.cos(r),b=o.data.get(s.dataId).values;for(let e=0;e<u;e++){const t=e*d*c*p;for(let e=0;e<c;e++){const n=e*(d*p);for(let s=0;s<d;s++){const r=s*p;for(let i=0;i<p;i++){const o=[u,e,s,i],h=o[2],x=o[1];let v=(h-f)*y-(x-m)*g,w=(h-f)*g+(x-m)*y;v=Math.round(v+f),w=Math.round(w+m);let k=a;"number"!=typeof a&&(k=3===i?255:a[i]),v>=0&&v<d&&w>=0&&w<c&&(k=b[t+w*(d*p)+v*p+i]),l[t+n+r+i]=k}}}}return{dataId:o.write(l,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},Zb=Bp(h.Round,e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1}),Qb={kernelName:h.Round,backendName:"cpu",kernelFunc:Zb},Jb={kernelName:h.ScatterNd,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r,updates:a}=t,{shape:i}=s,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:d}=h.backend_util.calculateShapes(a,r,i),p=im(n.bufferSync(r),n.bufferSync(a),i,d,u,l,o,c,0,!0);return n.makeTensorInfo(i,p.dtype,p.values)}};function ex(e,t){let n=0,s=e.length,r=0;for(;n<s;)r=Math.floor((n+s)/2),e[r]<t?n=r+1:s=r;return s}function tx(e,t){let n=0,s=e.length,r=0;for(;n<s;)r=Math.floor((n+s)/2),e[r]<=t?n=r+1:s=r;return s}const nx={kernelName:h.SearchSorted,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sortedSequence:r,values:a}=t,{side:i}=s,o=function(e,t,n,s,r,a){const i=h.util.getArrayFromDType("int32",n*r);for(let o=0;o<n;++o){const n=e.slice(o*s,(o+1)*s),l=o*r;for(let e=0;e<r;++e)i[l+e]="left"===a?ex(n,t[e+l]):tx(n,t[e+l])}return i}(n.data.get(r.dataId).values,n.data.get(a.dataId).values,r.shape[0],r.shape[1],a.shape[1],i);return n.makeTensorInfo(a.shape,"int32",o)}},sx={kernelName:h.Select,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:r,e:a}=t;hp([s,r,a],"select");const i=s.shape.length,o=n.data.get(s.dataId).values,l=n.data.get(r.dataId).values,u=n.data.get(a.dataId).values,c=(0,h.upcastType)(r.dtype,a.dtype),d=h.util.makeZerosTypedArray(h.util.sizeFromShape(r.shape),c);let p=0;const f=0===i||i>1||1===r.shape.length?1:h.util.sizeFromShape(r.shape.slice(1));for(let e=0;e<o.length;e++)for(let t=0;t<f;t++)1===o[e]?d[p++]=l[e]:d[p++]=u[e];return n.makeTensorInfo(r.shape,c,d)}},rx=h.backend_util.SELU_SCALEALPHA,ax=h.backend_util.SELU_SCALE,ix=Bp(h.Selu,e=>e>=0?ax*e:rx*(Math.exp(e)-1)),ox={kernelName:h.Selu,backendName:"cpu",kernelFunc:ix},lx=Bp(h.Sign,e=>e<0?-1:e>0?1:0),ux={kernelName:h.Sign,backendName:"cpu",kernelFunc:lx},cx=Bp(h.Sin,e=>Math.sin(e)),dx={kernelName:h.Sin,backendName:"cpu",kernelFunc:cx},hx=Bp(h.Sinh,e=>Math.sinh(e)),px={kernelName:h.Sinh,backendName:"cpu",kernelFunc:hx},fx=Math.log(1.1920928955078125e-7)+2,mx=Bp(h.Softplus,e=>{const t=e>-fx,n=e<fx,s=Math.exp(e);let r;return r=n?s:t?e:Math.log(1+s),r}),gx={kernelName:h.Softplus,backendName:"cpu",kernelFunc:mx},yx={kernelName:h.SpaceToBatchND,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,paddings:i}=s;hp([r],"spaceToBatchND");const o=h.util.sizeFromShape(a),l=[[0,0]];l.push(...i);for(let e=1+a.length;e<r.shape.length;++e)l.push([0,0]);const u=Ob.kernelFunc({inputs:{x:r},backend:n,attrs:{paddings:l,constantValue:0}}),c=h.backend_util.getReshaped(u.shape,a,o,!1),d=h.backend_util.getPermuted(c.length,a.length,!1),p=h.backend_util.getReshapedPermuted(u.shape,a,o,!1),f=Jm({inputs:{x:u},backend:n,attrs:{shape:c}}),m=Uf({inputs:{x:f},backend:n,attrs:{perm:d}}),g=Jm({inputs:{x:m},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}},bx={kernelName:h.SparseFillEmptyRows,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:s,values:r,denseShape:a,defaultValue:i}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${a.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${s.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n        ${r.shape}`);if(0!==i.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${i.shape}`);const o=n.data.get(s.dataId).values,l=n.data.get(r.dataId).values,u=n.data.get(a.dataId).values,c=n.data.get(i.dataId).values[0],[d,h,p,f,m]=pm(o,s.shape,s.dtype,l,r.dtype,u,c);return[n.makeTensorInfo(h,s.dtype,d),n.makeTensorInfo([h[0]],r.dtype,p),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map(e=>Number(e)))),n.makeTensorInfo([m.length],s.dtype,new Int32Array(m))]}},xx={kernelName:h.SparseReshape,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:s,inputShape:r,newShape:a}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${s.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${r.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const i=Array.from(n.data.get(r.dataId).values),o=n.data.get(s.dataId).values,l=Array.from(n.data.get(a.dataId).values),[u,c,d]=fm(o,s.shape,s.dtype,i,l);return[n.makeTensorInfo(c,s.dtype,u),n.makeTensorInfo([d.length],a.dtype,new Int32Array(d))]}},vx={kernelName:h.SparseSegmentMean,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n          ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n          ${a.shape}`);if(r.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const i=n.data.get(s.dataId).values,o=n.data.get(r.dataId).values,l=n.data.get(a.dataId).values,[u,c]=mm(i,s.shape,s.dtype,o,l,!0);return n.makeTensorInfo(c,s.dtype,u)}},wx={kernelName:h.SparseSegmentSum,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n         ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n         ${a.shape}`);if(r.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const i=n.data.get(s.dataId).values,o=n.data.get(r.dataId).values,l=n.data.get(a.dataId).values,[u,c]=mm(i,s.shape,s.dtype,o,l);return n.makeTensorInfo(c,s.dtype,u)}},kx={kernelName:h.SparseToDense,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:r,sparseValues:a,defaultValue:i}=t,{outputShape:o}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:d,outputSize:p}=h.backend_util.calculateShapes(a,r,o),f=!1,m=n.bufferSync(r);let g;switch(a.dtype){case"bool":g=im(m,n.bufferSync(a),o,p,c,u,l,d,Boolean(n.data.get(i.dataId).values[0]),f);break;case"float32":case"int32":g=im(m,n.bufferSync(a),o,p,c,u,l,d,n.data.get(i.dataId).values[0],f);break;case"string":g=im(m,n.bufferSync(a),o,p,c,u,l,d,h.util.decodeString(n.data.get(i.dataId).values[0]),f);break;default:throw new Error(`Unsupported type ${a.dtype}`)}return n.makeTensorInfo(o,g.dtype,g.values)}},Tx={kernelName:h.SplitV,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{numOrSizeSplits:a,axis:i}=s,o=h.util.parseAxisParam(i,r.shape)[0],l=h.backend_util.prepareSplitSize(r,a,o),u=new Array(r.shape.length).fill(0),c=r.shape.slice();return l.map(e=>{const t=[...c];t[o]=e;const s=dm({inputs:{x:r},backend:n,attrs:{begin:u,size:t}});return u[o]+=e,s})}},Sx={kernelName:h.Square,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,s=t;hp(n,"square");const r=s.data.get(n.dataId).values,a=new Float32Array(r.length);for(let e=0;e<r.length;++e){const t=r[e];a[e]=t*t}return{dataId:s.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},Nx=Bp(h.Step,(e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha}),Ix={kernelName:h.Step,backendName:"cpu",kernelFunc:Nx},Cx={kernelName:h.StridedSlice,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,end:i,strides:o,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:d,shrinkAxisMask:p}=s;hp(r,"stridedSlice");const{finalShapeSparse:f,finalShape:m,isIdentity:g,sliceDim0:y,isSimpleSlice:b,begin:x,end:v,strides:w}=h.slice_util.sliceInfo(r.shape,a,i,o,l,u,c,d,p);let k;if(g)k=Jm({inputs:{x:r},backend:n,attrs:{shape:m}});else if(y||b){h.util.assert(r.shape.length>=1,()=>`Input must have rank at least 1, got: ${r.shape.length}`);const e=h.slice_util.computeOutShape(x,v,w),t=dm({inputs:{x:r},backend:n,attrs:{begin:x,size:e}});k=Jm({inputs:{x:t},backend:n,attrs:{shape:m}}),n.disposeIntermediateTensorInfo(t)}else{const e=Nm(f,n.bufferSync(r),w,x);k=n.makeTensorInfo(m,e.dtype,e.values)}return k}},Ax={kernelName:h.StringNGrams,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{separator:r,nGramWidths:a,leftPad:i,rightPad:o,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:d}=t,h=n.data.get(c.dataId).values,p=n.data.get(d.dataId).values,[f,m]=Cm(h,p,r,a,i,o,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(d.shape,"int32",m)]}},Ex={kernelName:h.StringSplit,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{skipEmpty:r}=s,{input:a,delimiter:i}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==i.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);const o=n.data.get(a.dataId).values,l=n.data.get(i.dataId).values[0],[u,c,d]=Em(o,l,r),h=c.length;return[n.makeTensorInfo([h,2],"int32",u),n.makeTensorInfo([h],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(d))]}},$x={kernelName:h.StringToHashBucketFast,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{numBuckets:r}=s,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const i=$m(n.data.get(a.dataId).values,r);return n.makeTensorInfo(a.shape,"int32",i)}},Rx=Bp(h.Tan,e=>Math.tan(e)),_x={kernelName:h.Tan,backendName:"cpu",kernelFunc:Rx},Dx=Bp(h.Tanh,e=>Math.tanh(e)),Fx={kernelName:h.Tanh,backendName:"cpu",kernelFunc:Dx},Ox={kernelName:h.TensorScatterUpdate,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{tensor:s,indices:r,updates:a}=t,{sliceRank:i,numUpdates:o,sliceSize:l,strides:u,outputSize:c}=h.backend_util.calculateShapes(a,r,s.shape),d=n.bufferSync(r),p=n.bufferSync(a),f=n.bufferSync(s),m=im(d,p,s.shape,c,l,o,i,u,f,!1);return n.makeTensorInfo(s.shape,m.dtype,m.values)}},Mx={kernelName:h.Tile,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reps:a}=s;hp(r,"tile");const i=Om(n.bufferSync(r),a);return n.makeTensorInfo(i.shape,i.dtype,i.values)}},zx={kernelName:h.TopK,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{k:a,sorted:i}=s;hp(r,"topk");const o=n.data.get(r.dataId).values,[l,u]=Lm(o,r.shape,r.dtype,a,i);return[n.makeTensorInfo(l.shape,l.dtype,l.values),n.makeTensorInfo(u.shape,u.dtype,u.values)]}},Lx={kernelName:h.Transform,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{image:r,transforms:a}=t,{interpolation:i,fillMode:o,fillValue:l,outputShape:u}=n,[c,d,p,f]=r.shape,[m,g]=null!=u?u:[d,p],y=[c,m,g,f],b=h.util.computeStrides(r.shape),x=b[0],v=b[1],w=b[2],k=h.util.computeStrides(y),T=k[0],S=k[1],N=k[2],I=h.util.getTypedArrayFromDType(r.dtype,h.util.sizeFromShape(y));I.fill(l);const C=s.data.get(r.dataId).values,A=s.data.get(a.dataId).values;for(let e=0;e<c;++e){const t=1===a.shape[0]?A:A.subarray(8*e,8*e+8);for(let n=0;n<m;++n)for(let s=0;s<g;++s)for(let r=0;r<f;++r){let a;const u=t[6]*s+t[7]*n+1;if(0===u)continue;const c=(t[0]*s+t[1]*n+t[2])/u,h=(t[3]*s+t[4]*n+t[5])/u,f=Px(c,p,o),m=Px(h,d,o);switch(i){case"nearest":a=Wx(C,d,p,x,v,w,e,m,f,r,l);break;case"bilinear":a=Vx(C,d,p,x,v,w,e,m,f,r,l);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${i}`)}I[e*T+n*S+s*N+r]=a}return s.makeTensorInfo(y,r.dtype,I)}return{dataId:s.write(I,y,r.dtype),shape:r.shape,dtype:r.dtype}}};function Px(e,t,n){switch(n){case"reflect":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=2*t;n<e&&(n=e*Math.trunc(-n/e)+n),n=n<-t?n+e:-n-1}else if(n>t-1)if(t<=1)n=0;else{const e=2*t;n-=e*Math.trunc(n/e),n>=t&&(n=e-n-1)}return h.util.clamp(0,n,t-1)}(e,t);case"wrap":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=t-1;n+=t*(Math.trunc(-n/e)+1)}else if(n>t-1)if(t<=1)n=0;else{const e=t-1;n-=t*Math.trunc(n/e)}return h.util.clamp(0,n,t-1)}(e,t);case"nearest":return function(e,t){return h.util.clamp(0,e,t-1)}(e,t);default:return e}}function Bx(e,t,n,s,r,a,i,o,l,u,c){return 0<=o&&o<t&&0<=l&&l<n?e[i*s+o*r+l*a+u]:c}function Wx(e,t,n,s,r,a,i,o,l,u,c){return Bx(e,t,n,s,r,a,i,Math.round(o),Math.round(l),u,c)}function Vx(e,t,n,s,r,a,i,o,l,u,c){const d=Math.floor(o),h=Math.floor(l),p=d+1,f=h+1;return(p-o)*((f-l)*Bx(e,t,n,s,r,a,i,d,h,u,c)+(l-h)*Bx(e,t,n,s,r,a,i,d,f,u,c))+(o-d)*((f-l)*Bx(e,t,n,s,r,a,i,p,h,u,c)+(l-h)*Bx(e,t,n,s,r,a,i,p,f,u,c))}const Ux={kernelName:h.Unique,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:r}=n,{x:a}=t;hp(a,"unique");const i=s.data.get(a.dataId).values,{outputValues:o,outputShape:l,indices:u}=Pm(i,r,a.shape,a.dtype);return[s.makeTensorInfo(l,a.dtype,o),s.makeTensorInfo([u.length],"int32",u)]}},Gx={kernelName:h.Unpack,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:r}=t;let{axis:a}=s;a<0&&(a+=r.shape.length);const i=r.shape.length,o=r.shape[a],l=new Array(i-1);let u=0;for(let e=0;e<i;e++)e!==a&&(l[u++]=r.shape[e]);const c=new Array(i).fill(0),d=r.shape.slice();d[a]=1;const h=new Array(o);for(let e=0;e<h.length;e++){c[a]=e;const t=dm({inputs:{x:r},backend:n,attrs:{begin:c,size:d}});h[e]=Jm({inputs:{x:t},backend:n,attrs:{shape:l}}),n.disposeIntermediateTensorInfo(t)}return h}},Hx={kernelName:h.UnsortedSegmentSum,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,segmentIds:a}=t,{numSegments:i}=s;hp(r,"unsortedSegmentSum");const o=[],l=[],u=r.shape.length-a.shape.length;let c=a;for(let e=0;e<u;++e){const t=Ny({inputs:{input:c},backend:n,attrs:{dim:e+1}});c=t,l.push(t)}for(let e=0;e<i;++e){const t=h.util.createScalarValue(e,"int32"),s=n.makeTensorInfo([],"int32",t),a=qp({inputs:{a:s,b:c},backend:n}),i=Ip({inputs:{x:a},backend:n,attrs:{dtype:"float32"}}),u=Of({inputs:{a:i,b:r},backend:n}),d=py({inputs:{x:u},backend:n,attrs:{axis:0,keepDims:!1}});o.push(d),l.push(s),l.push(a),l.push(i),l.push(u),l.push(d)}const d=Db({inputs:o,backend:n,attrs:{axis:0}});return l.forEach(e=>n.disposeIntermediateTensorInfo(e)),d}},jx=[sg,gp,ag,og,Dp,lg,ug,cg,dg,hg,fg,gg,bg,wg,Tg,Cg,Ag,Eg,$g,ng,Rg,_g,Dg,Lp,Fg,Cp,Gp,Mg,xp,zg,Wg,Ug,Gg,Hg,jg,qg,Yg,Xg,Qg,Jg,ey,ty,ny,sy,ay,iy,oy,ly,uy,cy,dy,hy,my,Vm,gy,Yp,Sy,Zp,Iy,ef,Dy,Oy,My,sf,of,zy,Ly,Py,By,hf,mf,kp,Wy,Pg,Uy,Hy,qy,Gm,bf,wf,Yy,Nf,Xy,Jy,tb,rb,ab,ib,lb,Ef,ub,cb,db,hb,pb,fb,mb,_f,gb,xb,kb,Mf,Lf,Sb,Ib,Ab,Wf,Eb,_b,Fb,Ob,Lb,qm,jf,Pb,Bb,Wb,Vb,Sp,Ey,Gb,Km,Zm,eg,Hb,jb,qb,Yb,Kb,Xb,Qb,am,Jb,nx,sx,ox,um,ux,dx,px,hm,wb,gx,yx,bx,xx,vx,wx,kx,Tx,bm,Sx,wm,Sm,Ix,Cx,Ax,Ex,$x,Fm,fy,_x,Fx,Ox,Mx,zx,Lx,Gf,Ux,Gx,Hx,Rb];for(const e of jx)(0,h.registerKernel)(e);const qx={},Yx={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function Kx(e,t){qx[e]=t}function Xx(e,t){if(!(e in qx)||null!=t){const n=function(e,t){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const n=null==t?function(e){if((0,h.env)().getBool("IS_SAFARI")||"undefined"==typeof OffscreenCanvas||2!==e){if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}return new OffscreenCanvas(300,150)}(e):t;return n.addEventListener("webglcontextlost",t=>{t.preventDefault(),delete qx[e]},!1),(0,h.env)().getBool("SOFTWARE_WEBGL_ENABLED")&&(Yx.failIfMajorPerformanceCaveat=!1),1===e?n.getContext("webgl",Yx)||n.getContext("experimental-webgl",Yx):n.getContext("webgl2",Yx)}(e,t);if(null===n)return console.log("Could not get context for WebGL version",e),null;qx[e]=n}const n=qx[e];return null==n||n.isContextLost()?(delete qx[e],Xx(e)):(n.disable(n.DEPTH_TEST),n.disable(n.STENCIL_TEST),n.disable(n.BLEND),n.disable(n.DITHER),n.disable(n.POLYGON_OFFSET_FILL),n.disable(n.SAMPLE_COVERAGE),n.enable(n.SCISSOR_TEST),n.enable(n.CULL_FACE),n.cullFace(n.BACK),qx[e])}var Zx,Qx,Jx;function ev(e,t){return[t,e]}function tv(e){const t=h.util.sizeFromShape(e),n=Math.ceil(t/4);return h.util.sizeToSquarishShape(n)}function nv(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function sv(e,t){const n=e;let s,r,a,i,o,l,u,c,d,p;return 2===(0,h.env)().getNumber("WEBGL_VERSION")?(s=n.R32F,r=n.R16F,a=n.RGBA16F,i=n.RGBA32F,o=n.RED,u=4,c=1,d=n.HALF_FLOAT,p=n.FLOAT,l=n.RGBA8):(s=e.RGBA,r=e.RGBA,a=e.RGBA,i=n.RGBA,o=e.RGBA,u=4,c=4,d=null!=t?t.HALF_FLOAT_OES:null,p=e.FLOAT,l=e.RGBA),{internalFormatFloat:s,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:i,textureFormatFloat:o,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:d,textureTypeFloat:p}}function rv(e,t){const n=t();return(0,h.env)().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+lv(e,t))}(e),n}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(Zx||(Zx={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(Qx||(Qx={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(Jx||(Jx={}));const av=5.96e-8,iv=65504;function ov(e){return!!((0,h.env)().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||av<Math.abs(e)&&Math.abs(e)<iv)}function lv(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}function uv(e,t){return Fv(e,()=>e.getExtension(t),'Extension "'+t+'" not supported on this browser.')}function cv(e,t){const n=Fv(e,()=>e.createShader(e.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(rv(e,()=>e.shaderSource(n,t)),rv(e,()=>e.compileShader(n)),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}function dv(e,t){const n=Fv(e,()=>e.createShader(e.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(rv(e,()=>e.shaderSource(n,t)),rv(e,()=>e.compileShader(n)),(0,h.env)().get("ENGINE_COMPILE_ONLY"))return n;if(!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw pv(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}const hv=/ERROR: [0-9]+:([0-9]+):/g;function pv(e,t){const n=hv.exec(t);if(null==n)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(e);const s=+n[1],r=e.split("\n"),a=r.length.toString().length+2,i=r.map((e,t)=>h.util.rightPad((t+1).toString(),a)+e);let o=0;for(let e=0;e<i.length;e++)o=Math.max(i[e].length,o);const l=i.slice(0,s-1),u=i.slice(s-1,s),c=i.slice(s);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${h.util.rightPad(u[0],o)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}function fv(e){return Fv(e,()=>e.createProgram(),"Unable to create WebGLProgram.")}function mv(e,t){if(rv(e,()=>e.linkProgram(t)),!(0,h.env)().get("ENGINE_COMPILE_ONLY")&&!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}function gv(e,t){if(rv(e,()=>e.validateProgram(t)),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function yv(e,t){const n=Fv(e,()=>e.createBuffer(),"Unable to create WebGLBuffer");return rv(e,()=>e.bindBuffer(e.ARRAY_BUFFER,n)),rv(e,()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW)),n}function bv(e,t){const n=Fv(e,()=>e.createBuffer(),"Unable to create WebGLBuffer");return rv(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n)),rv(e,()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW)),n}function xv(){return 2===(0,h.env)().getNumber("WEBGL_VERSION")?1:4}function vv(e){return Fv(e,()=>e.createTexture(),"Unable to create WebGLTexture.")}function wv(e,t){const n=(0,h.env)().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}function kv(e){return Fv(e,()=>e.createFramebuffer(),"Unable to create WebGLFramebuffer.")}function Tv(e,t,n,s,r,a,i){const o=e.getAttribLocation(t,n);return-1!==o&&(rv(e,()=>e.bindBuffer(e.ARRAY_BUFFER,s)),rv(e,()=>e.vertexAttribPointer(o,r,e.FLOAT,!1,a,i)),rv(e,()=>e.enableVertexAttribArray(o)),!0)}function Sv(e,t,n){Ov(e,n),rv(e,()=>e.activeTexture(e.TEXTURE0+n)),rv(e,()=>e.bindTexture(e.TEXTURE_2D,t))}function Nv(e,t){Ov(e,t),rv(e,()=>e.activeTexture(e.TEXTURE0+t)),rv(e,()=>e.bindTexture(e.TEXTURE_2D,null))}function Iv(e,t,n){return Fv(e,()=>e.getUniformLocation(t,n),'uniform "'+n+'" not present in program.')}function Cv(e,t,n){return e.getUniformLocation(t,n)}function Av(e,t,n,s){rv(e,()=>Sv(e,t,s)),rv(e,()=>e.uniform1i(n,s))}function Ev(e){rv(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,null)),rv(e,()=>e.viewport(0,0,e.canvas.width,e.canvas.height)),rv(e,()=>e.scissor(0,0,e.canvas.width,e.canvas.height))}function $v(e,t,n){rv(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,n)),rv(e,()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0))}function Rv(e,t){rv(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,t)),rv(e,()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0))}function _v(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+Dv(e,t))}function Dv(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}function Fv(e,t,n){const s=rv(e,()=>t());if(null==s)throw new Error(n);return s}function Ov(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,s=t+e.TEXTURE0;if(s<e.TEXTURE0||s>n)throw new Error(`textureUnit must be in [gl.TEXTURE0, gl.TEXTURE${n}].`)}function Mv(e,t=2){return h.util.sizeFromShape(e.slice(0,e.length-t))}function zv(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function Lv(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[Mv(e),...zv(e)]),t}function Pv(e,t=!1){let n=(0,h.env)().getNumber("WEBGL_MAX_TEXTURE_SIZE"),s=(0,h.env)().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");if(s===1/0&&(0,h.env)().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(s=n/2),t&&(n*=2,s*=2,1===(e=e.map((t,n)=>n>=e.length-2?h.util.nearestLargerEven(e[n]):e[n])).length&&(e=[2,e[0]])),2!==e.length){const t=h.util.squeezeShape(e);e=t.newShape}let r=h.util.sizeFromShape(e),a=null;e.length<=1&&r<=n?a=[1,r]:2===e.length&&e[0]<=n&&e[1]<=n?a=e:3===e.length&&e[0]*e[1]<=n&&e[2]<=n?a=[e[0]*e[1],e[2]]:3===e.length&&e[0]<=n&&e[1]*e[2]<=n?a=[e[0],e[1]*e[2]]:4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n?a=[e[0]*e[1]*e[2],e[3]]:4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n&&(a=[e[0],e[1]*e[2]*e[3]]);const i=null!=a&&Math.max(...a)>s&&Math.min(...a)<=(t?2:1)&&Math.min(...a)>0;if(null==a||i)if(t){const t=Mv(e);let n=2,s=2;e.length&&([n,s]=zv(e)),r=t*(n/2)*(s/2),a=h.util.sizeToSquarishShape(r).map(e=>2*e)}else a=h.util.sizeToSquarishShape(r);return a}function Bv(e){return e%2==0}function Wv(e,t){if(e=e.slice(-2),t=t.slice(-2),h.util.arraysEqual(e,t))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e[e.length-1],s=t[t.length-1];if(n===s)return!0;if(Bv(n)&&Bv(s)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&Bv(e[0])&&Bv(t[0])}let Vv,Uv;function Gv(e){if(null==Vv){const t=Xx(e);Vv=t.getParameter(t.MAX_TEXTURE_SIZE)}return Vv}function Hv(){Vv=null}function jv(){Uv=null}function qv(e){if(null==Uv){const t=Xx(e);Uv=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,Uv)}function Yv(e){if(0===e)return 0;let t;const n=Xx(e);return t=Kv(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:Kv(n,"EXT_disjoint_timer_query")?1:0,t}function Kv(e,t){return null!=e.getExtension(t)}function Xv(e){try{if(null!=Xx(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function Zv(e){if(0===e)return!1;const t=Xx(e);if(1===e){if(!Kv(t,"OES_texture_float"))return!1}else if(!Kv(t,"EXT_color_buffer_float"))return!1;return Jv(t)}function Qv(e){if(0===e)return!1;const t=Xx(e);if(1!==e){if(Kv(t,"EXT_color_buffer_float"))return Jv(t);const e="EXT_color_buffer_half_float";if(Kv(t,e)){const n=t.getExtension(e);return function(e,t){const n=sv(e,t),s=e.createTexture();e.bindTexture(e.TEXTURE_2D,s);e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,s,0);const a=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(s),e.deleteFramebuffer(r),a}(t,n)}return!1}return!!Kv(t,"OES_texture_float")&&(!!Kv(t,"WEBGL_color_buffer_float")&&Jv(t))}function Jv(e){const t=sv(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n),e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const s=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,s),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const r=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(s),r}function ew(e){return 2===e&&null!=Xx(e).fenceSync}function tw(e,t){Array.isArray(e)||(e=[e]),e.forEach(e=>{null!=e&&h.util.assert("complex64"!==e.dtype,()=>`${t} does not support complex64 tensors in the WebGL backend.`)})}const nw=(0,h.env)();function sw(){let e,t,n,s,r,a,i,o,l,u;return 2===(0,h.env)().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",s="in",r="texture",a="outputColor",i="out vec4 outputColor;",o=(0,h.env)().getBool("WEBGL2_ISNAN_CUSTOM")?"\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ":"",l="",u="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",s="varying",r="texture2D",a="gl_FragColor",i="",o="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",u="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:s,texture2D:r,output:a,defineOutput:i,defineSpecialNaN:o,defineSpecialInf:l,defineRound:u}}function rw(e,t,n="index"){const s=h.util.computeStrides(t);return s.map((t,r)=>`int ${e[r]} = ${n} / ${t}; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * ${t}`:`index -= ${e[r]} * ${t}`};`).join("")}function aw(e,t,n="index"){const s=h.util.computeStrides(t);return s.map((t,r)=>`int ${e[r]} = ${n} / outShapeStrides[${r}]; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * outShapeStrides[${r}]`:`index -= ${e[r]} * outShapeStrides[${r}]`};`).join("")}function iw(e){const t=h.util.computeStrides(e).map(e=>e.toString());return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}nw.registerFlag("HAS_WEBGL",()=>nw.getNumber("WEBGL_VERSION")>0),nw.registerFlag("WEBGL_VERSION",()=>Xv(2)?2:Xv(1)?1:0),nw.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1),nw.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>2===nw.get("WEBGL_VERSION")),nw.registerFlag("WEBGL_CPU_FORWARD",()=>!0),nw.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),nw.registerFlag("WEBGL_PACK",()=>nw.getBool("HAS_WEBGL")),nw.registerFlag("WEBGL_PACK_NORMALIZATION",()=>nw.getBool("WEBGL_PACK")),nw.registerFlag("WEBGL_PACK_CLIP",()=>nw.getBool("WEBGL_PACK")),nw.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>nw.getBool("WEBGL_PACK")),nw.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>nw.getBool("WEBGL_PACK")),nw.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>nw.getBool("WEBGL_PACK")),nw.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>nw.getBool("WEBGL_PACK")),nw.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>nw.getBool("WEBGL_PACK")),nw.registerFlag("WEBGL_PACK_REDUCE",()=>nw.getBool("WEBGL_PACK")),nw.registerFlag("WEBGL_LAZILY_UNPACK",()=>nw.getBool("WEBGL_PACK")),nw.registerFlag("WEBGL_CONV_IM2COL",()=>nw.getBool("WEBGL_PACK")),nw.registerFlag("WEBGL_PACK_CONV2DTRANSPOSE",()=>nw.getBool("WEBGL_PACK")),nw.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>Gv(nw.getNumber("WEBGL_VERSION"))),nw.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>qv(nw.getNumber("WEBGL_VERSION"))),nw.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{const e=nw.getNumber("WEBGL_VERSION");return 0===e?0:Yv(e)}),nw.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>nw.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!h.device_util.isMobile()),nw.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>Zv(nw.getNumber("WEBGL_VERSION"))),nw.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>!nw.getBool("WEBGL_FORCE_F16_TEXTURES")&&nw.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),nw.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>Qv(nw.getNumber("WEBGL_VERSION"))),nw.registerFlag("WEBGL_FENCE_API_ENABLED",()=>ew(nw.getNumber("WEBGL_VERSION"))),nw.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>nw.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0),nw.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,e=>{if("number"!=typeof e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be a number but got ${e}.`);if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)}),nw.registerFlag("WEBGL_FLUSH_THRESHOLD",()=>h.device_util.isMobile()?1:-1,e=>{if("number"!=typeof e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be a number but got ${e}.`);if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)}),nw.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",()=>128),nw.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",()=>!1),nw.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e5),nw.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",()=>128),nw.registerFlag("WEBGL_EXP_CONV",()=>!1),nw.registerFlag("SOFTWARE_WEBGL_ENABLED",()=>nw.getBool("IS_TEST")),nw.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",()=>1/0),nw.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",()=>!1),nw.registerFlag("WEBGL2_ISNAN_CUSTOM",()=>!1),nw.registerFlag("ENGINE_COMPILE_ONLY",()=>!1);const ow="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:lw}=h.backend_util;function uw(e,t,n){const s=[];if(e.forEach(e=>{const t=h.util.sizeFromShape(e.shapeInfo.logicalShape);if(e.shapeInfo.isUniform?s.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(s.push(`uniform sampler2D ${e.name};`),s.push(`uniform int offset${e.name};`)),n.enableShapeUniforms){const{uniformShape:t}=xw(n.packedInputs,e.shapeInfo.logicalShape,e.shapeInfo.texShape);switch(t.length){case 1:s.push(`uniform int ${e.name}Shape;`);break;case 2:s.push(`uniform ivec2 ${e.name}Shape;`);break;case 3:s.push(`uniform ivec3 ${e.name}Shape;`);break;case 4:s.push(`uniform ivec4 ${e.name}Shape;`)}s.push(`uniform ivec2 ${e.name}TexShape;`)}}),n.enableShapeUniforms){switch(t.logicalShape.length){case 1:s.push("uniform int outShape;");break;case 2:s.push("uniform ivec2 outShape;"),s.push("uniform int outShapeStrides;");break;case 3:s.push("uniform ivec3 outShape;"),s.push("uniform ivec2 outShapeStrides;");break;case 4:s.push("uniform ivec4 outShape;"),s.push("uniform ivec3 outShapeStrides;")}s.push("uniform ivec2 outTexShape;")}n.customUniforms&&n.customUniforms.forEach(e=>{s.push(`uniform ${e.type} ${e.name}${e.arrayIndex?`[${e.arrayIndex}]`:""};`)});const r=s.join("\n"),a=e.map(e=>function(e,t,n=!1,s){let r="";r+=n?dw(e,s):cw(e,s);const a=e.shapeInfo.logicalShape,i=t.logicalShape;return a.length<=i.length&&(r+=n?function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),r="get"+s+"AtOutCoords",a=e.shapeInfo.logicalShape.length,i=t.logicalShape.length,o=lw(e.shapeInfo.logicalShape,t.logicalShape),l=bw(i),u=i-a;let c;const d=["x","y","z","w","u","v"];c=0===a?"":i<2&&o.length>=1?"coords = 0;":o.map(e=>`coords.${d[e+u]} = 0;`).join("\n");let p="";p=i<2&&a>0?"coords":e.shapeInfo.logicalShape.map((e,t)=>`coords.${d[t+u]}`).join(", ");let f="return outputValue;";const m=1===h.util.sizeFromShape(e.shapeInfo.logicalShape),g=1===h.util.sizeFromShape(t.logicalShape);if(1!==a||m||g){if(m&&!g)f=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(o.length){const e=a-2,t=a-1;o.indexOf(e)>-1&&o.indexOf(t)>-1?f="return vec4(outputValue.x);":o.indexOf(e)>-1?f="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":o.indexOf(t)>-1&&(f="return vec4(outputValue.xx, outputValue.zz);")}}else f="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${r}() {\n      ${l} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${s}(${p});\n      ${f}\n    }\n  `}(e,t):function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),r="get"+s+"AtOutCoords",a=t.texShape,i=e.shapeInfo.texShape,o=e.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!e.shapeInfo.isUniform&&o===l&&null==e.shapeInfo.flatOffset&&h.util.arraysEqual(i,a))return`\n      float ${r}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const u=bw(l),c=lw(e.shapeInfo.logicalShape,t.logicalShape),d=l-o;let p;const f=["x","y","z","w","u","v"];p=0===o?"":l<2&&c.length>=1?"coords = 0;":c.map(e=>`coords.${f[e+d]} = 0;`).join("\n");let m="";return m=l<2&&o>0?"coords":e.shapeInfo.logicalShape.map((e,t)=>`coords.${f[t+d]}`).join(", "),`\n    float ${r}() {\n      ${u} coords = getOutputCoords();\n      ${p}\n      return get${s}(${m});\n    }\n  `}(e,t)),r}(e,t,n.packedInputs,n.enableShapeUniforms)).join("\n"),i=t.texShape,o=sw(),l=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(o);let u,c,d=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${hw}\n    ${pw}\n    ${fw}\n  `}(o);return t.isPacked?(u=function(e,t,n){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,t,n){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return 1===s[0]?n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${s[1]}.0);\n      }\n    `:1===s[1]?n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${s[0]}.0);\n      }\n    `:n?"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      return 2 * (resTexRC.x * ${s[1]} + resTexRC.y);\n    }\n  `}(0,t,n);case 2:return function(e,t,n){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(h.util.arraysEqual(e,t))return n?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${s[0]}, ${s[1]}));\n      }\n    `;const r=Math.ceil(e[1]/2);return n?"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[2]/2),a=r*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t,n);default:return function(e,t,n){if(n)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[e.length-1]/2),a=r*Math.ceil(e[e.length-2]/2);let i=a,o="",l="b, r, c";for(let t=2;t<e.length-1;t++)i*=e[e.length-t-1],o=`\n      int b${t} = index / ${i};\n      index -= b${t} * ${i};\n    `+o,l=`b${t}, `+l;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      ${o}\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${e.length}(${l});\n    }\n  `}(e,t,n)}}(t.logicalShape,i,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(o)):(u=function(e,t,n){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,t,n){return 1===t[0]?n?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `:1===t[1]?n?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `:n?"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t,n);case 2:return function(e,t,n){return h.util.arraysEqual(e,t)?n?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `:1===e[1]?n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `:1===e[0]?n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `:n?"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${aw(["r","c","d"],e)}\n    return ivec3(r, c, d);\n  }\n`;const s=rw(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec3(r, c, d);\n    }\n  `}(e,t,n);case 4:return function(e,t,n){if(n)return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${aw(["r","c","d","d2"],e)}\n      return ivec4(r, c, d, d2);\n    }\n  `;const s=rw(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t,n);case 5:return function(e,t){const n=rw(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=rw(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}}(t.logicalShape,i,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(o)),n.packedInputs&&(d+=mw),[d,l,c,r,u,a,n.userCode].join("\n")}function cw(e,t=!1){const n=e.shapeInfo.logicalShape;switch(n.length){case 0:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`float ${s}() {return ${n};}`;const[r,a]=e.shapeInfo.texShape;if(1===r&&1===a)return`\n      float ${s}() {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const i=gw(n);if(t)return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `;const[o,l]=e.shapeInfo.texShape;return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${o}, ${l}, ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 1:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${s}(int index) {\n        ${yw(e)}\n      }\n    `;const r=e.shapeInfo.texShape,a=r[0],i=r[1];if(1===i&&1===a)return`\n      float ${s}(int index) {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const o=gw(n);return 1===i?t?`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / float(${n}TexShape[0]));\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / ${a}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `:1===a?t?`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / float(${n}TexShape[1]), 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / ${i}.0, 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:t?`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `:`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${a}, ${i}, index + ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e.shapeInfo.texShape;if(null!=a&&h.util.arraysEqual(n,a)){if(t)return`\n      float ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `;const e=a[0];return`\n    float ${r}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${a[1]}.0, ${e}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `}const{newShape:i,keptDims:o}=h.util.squeezeShape(n),l=i;if(l.length<n.length){const n=["row","col"];return`\n      ${cw(vw(e,l),t)}\n      float ${r}(int row, int col) {\n        return ${r}(${ww(n,o)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${n[1]}, 1)));\n        ${yw(e)}\n      }\n    `;const u=a[0],c=a[1],d=gw(s);return 1===c?t?`\n      float ${r}(int row, int col) {\n        float index = dot(vec3(row, col, ${d}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${s}TexShape[0]));\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${d}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `:1===u?t?`\n      float ${r}(int row, int col) {\n        float index = dot(vec3(row, col, ${d}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${s}TexShape[1]), 0.5);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${d}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);\n      return sampleTexture(${s}, uv);\n    }\n  `:t?`\n      float ${r}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${s}Shape[1] + col + ${d};\n        vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n  float ${r}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${n[1]} + col + ${d};\n    vec2 uv = uvFromFlat(${u}, ${c}, index);\n    return sampleTexture(${s}, uv);\n  }\n`}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=n[1]*n[2],i=n[2],{newShape:o,keptDims:l}=h.util.squeezeShape(n),u=o;if(u.length<n.length){const n=["row","col","depth"];return`\n        ${cw(vw(e,u),t)}\n        float ${r}(int row, int col, int depth) {\n          return ${r}(${ww(n,l)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${a}, ${i}, 1)));\n        ${yw(e)}\n      }\n    `;const c=e.shapeInfo.texShape,d=c[0],p=c[1],f=e.shapeInfo.flatOffset;if(p===a&&null==f)return t?`\n      float ${r}(int row, int col, int depth) {\n        int stride1 = ${s}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n        float ${r}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${i}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${p}.0, ${d}.0);\n          return sampleTexture(${s}, uv);\n        }\n      `;if(p===i&&null==f)return t?`\n      float ${r}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${s}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${n[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${p}.0, ${d}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;const m=gw(s);return t?`\n    float ${r}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${s}Shape[1] * ${s}Shape[2];\n      int stride1 = ${s}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${m};\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n      return sampleTexture(${s}, uv);\n    }\n    `:`\n      float ${r}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${a} + col * ${i} + depth + ${m};\n        vec2 uv = uvFromFlat(${d}, ${p}, index);\n        return sampleTexture(${s}, uv);\n      }\n  `}(e,t);case 4:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=n[3],i=n[2]*a,o=n[1]*i,{newShape:l,keptDims:u}=h.util.squeezeShape(n);if(l.length<n.length){const n=["row","col","depth","depth2"];return`\n      ${cw(vw(e,l),t)}\n      float ${r}(int row, int col, int depth, int depth2) {\n        return ${r}(${ww(n,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${o}, ${i}, ${a}, 1)));\n        ${yw(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,d=e.shapeInfo.texShape,p=d[0],f=d[1],m=`int stride2 = ${s}Shape[3];`,g=`int stride1 = ${s}Shape[2] * stride2;`,y=`int stride0 = ${s}Shape[1] * stride1;`;if(f===o&&null==c)return t?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        ${m}\n        ${g}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${i}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${p}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;if(f===a&&null==c)return t?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${s}Shape[1] * ${s}Shape[2], ${s}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${n[1]*n[2]}, ${n[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${p}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;const b=gw(s);return t?`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${m}\n      ${g}\n      ${y}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index + ${b});\n      return sampleTexture(${s}, uv);\n    }\n  `:`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} +\n          depth * ${a} + depth2;\n      vec2 uv = uvFromFlat(${p}, ${f}, index + ${b});\n      return sampleTexture(${s}, uv);\n    }\n  `}(e,t);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t[4],a=t[3]*r,i=t[2]*a,o=t[1]*i,{newShape:l,keptDims:u}=h.util.squeezeShape(t);if(l.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${cw(vw(e,l))}\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        return ${s}(${ww(t,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${o}, ${i}, ${a}, ${r})) +\n          depth3;\n        ${yw(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,d=e.shapeInfo.texShape,p=d[0],f=d[1];if(f===o&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${a}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===r&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} + depth * ${a} +\n          depth2 * ${r} + depth3 + ${gw(n)};\n      vec2 uv = uvFromFlat(${p}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:r,keptDims:a}=h.util.squeezeShape(t);if(r.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${cw(vw(e,r))}\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${s}(${ww(t,a)});\n      }\n    `}const i=t[5],o=t[4]*i,l=t[3]*o,u=t[2]*l,c=t[1]*u;if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${o})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${yw(e)}\n      }\n    `;const d=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,f=p[0],m=p[1];if(m===c&&null==d)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${o}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${m}.0, ${f}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(m===i&&null==d)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${m}.0, ${f}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${o} + depth3 * ${i} + depth4 + ${gw(n)};\n      vec2 uv = uvFromFlat(${f}, ${m}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(`${n.length}-D input sampling is not yet supported`)}}function dw(e,t){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name;return`\n    vec4 ${"get"+t.charAt(0).toUpperCase()+t.slice(1)}() {\n      return ${sw().texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e.shapeInfo.texShape,a=sw();if(t)return`\n    vec4 ${s}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `;const i=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];return`\n    vec4 ${s}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${i[0]}, ${i[1]}, index);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e.shapeInfo.texShape,i=a[0],o=a[1],l=sw();if(null!=a&&h.util.arraysEqual(n,a))return t?`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `:`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}.0, ${i}.0);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `;if(t)return`\n    vec4 ${r}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `;const u=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];return`\n    vec4 ${r}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${Math.ceil(n[1]/2)}, ${u[0]}, ${u[1]}, row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e.shapeInfo.texShape,i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];if(1===n[0]){const s=[1,2],a=["b","row","col"];return`\n        ${dw(vw(e,n.slice(1)),t)}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${ww(a,s)});\n        }\n      `}const o=sw();if(t)return`\n    vec4 ${r}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${o.texture2D}(${s}, uv);\n    }\n  `;const l=i[0],u=i[1],c=Math.ceil(n[2]/2);return`\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${l}, ${u}, ${c*Math.ceil(n[1]/2)}, ${c}, b, row, col);\n      return ${o.texture2D}(${s}, uv);\n    }\n  `}(e,t);default:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=sw();if(t)return`\n    vec4 ${s}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${n}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${n}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${r.texture2D}(${n}, uv);\n    }\n  `;const a=e.shapeInfo.logicalShape,i=a.length,o=e.shapeInfo.texShape,l=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)],u=l[0],c=l[1],d=Math.ceil(a[i-1]/2);let h=d*Math.ceil(a[i-2]/2),p="int b, int row, int col",f=`b * ${h} + (row / 2) * ${d} + (col / 2)`;for(let e=2;e<i-1;e++)p=`int b${e}, `+p,h*=a[i-e-1],f=`b${e} * ${h} + `+f;return`\n    vec4 ${s}(${p}) {\n      int index = ${f};\n      int texR = index / ${c};\n      int texC = index - texR * ${c};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${u});\n      return ${r.texture2D}(${n}, uv);\n    }\n  `}(e,t)}}const hw="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",pw="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",fw="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",mw="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function gw(e){return`offset${e}`}function yw(e){const t=e.name,n=h.util.sizeFromShape(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function bw(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function xw(e,t,n){const{newShape:s,keptDims:r}=h.util.squeezeShape(t),a=t.length,i=e&&3===a&&1===t[0],o=i?t.slice(1):s,l=!e&&a>1&&!h.util.arraysEqual(t,n)&&s.length<a||i;return{useSqueezeShape:l,uniformShape:l?o:t,keptDims:r}}function vw(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function ww(e,t){return t.map(t=>e[t]).join(", ")}function kw(e,t,n){const s=[],r=[];let a,i,o,l=null,u=null;u=e.getUniformLocation(n,"NAN",!1),1===(0,h.env)().getNumber("WEBGL_VERSION")&&(l=e.getUniformLocation(n,"INFINITY",!1));const c=!1;for(const r of t.variableNames){const a={name:r,uniform:e.getUniformLocation(n,r,c),offset:e.getUniformLocation(n,`offset${r}`,c)};t.enableShapeUniforms&&(a.shape=e.getUniformLocation(n,`${r}Shape`,c),a.texShape=e.getUniformLocation(n,`${r}TexShape`,c)),s.push(a)}if(t.enableShapeUniforms&&(a=e.getUniformLocation(n,"outShape",c),o=e.getUniformLocation(n,"outShapeStrides",c),i=e.getUniformLocation(n,"outTexShape",c)),t.customUniforms)for(const s of t.customUniforms)r.push(e.getUniformLocation(n,s.name,c));return{variablesLocations:s,customUniformLocations:r,infLoc:l,nanLoc:u,outShapeLocation:a,outShapeStridesLocation:o,outTexShapeLocation:i}}function Tw(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach((e,n)=>{const s=e.logicalShape,r=t[n],a=r.shape;if(!h.util.arraysEqual(s,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${s} and ${a} must match`);if(e.isUniform&&r.isUniform)return;const i=e.texShape,o=r.isUniform?null:r.texData.texShape;if(!h.util.arraysEqual(i,o))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${o} must match`)})}function Sw(e){return(0,h.env)().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&e<=4}class Nw{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=Zx.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=sw();this.outputShape=e,this.enableShapeUniforms=Sw(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?aw(["r","c","d"],e):rw(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${t.output} = result;\n      }\n    `}}class Iw{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=Zx.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=sw();this.outputShape=e,this.enableShapeUniforms=Sw(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?aw(["r","c","d"],e):rw(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${t.output} = result;\n      }\n    `}}class Cw{constructor(e){this.variableNames=["A"],this.outTexUsage=Qx.DOWNLOAD;const t=sw();this.outputShape=e,this.userCode=`\n      ${ow}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class Aw{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=Qx.DOWNLOAD;const t=sw();this.outputShape=e,this.userCode=`\n      ${ow}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}const Ew={R:0,G:1,B:2,A:3};class $w{constructor(e,t=!1,n="RGBA"){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const s=sw();this.outputShape=e,this.enableShapeUniforms=Sw(this.outputShape.length);let r="result";t&&(r="floor(result * 255. + 0.5)");let a="";for(let e=0;e<n.length;e++){const t=n[e];a+=`\n          if(offset == ${e}) {\n            result = values[${Ew[t]}];\n          }`}this.userCode=`\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":iw(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int flatIndex = getFlatIndex(coords);\n        float result = 0.;\n        int offset = imod(flatIndex, ${n.length});\n\n        flatIndex = idiv(flatIndex, ${n.length}, 1.);\n\n        int r = flatIndex / texShape[1];\n        if (r < texShape[0]) {\n          int c = imod(flatIndex, texShape[1]);\n          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n          vec4 values = ${s.texture2D}(A, uv);\n          ${a}\n        }\n        ${s.output} = vec4(${r}, 0., 0., 0.);\n      }\n    `}}class Rw{constructor(e,t=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=sw();this.outputShape=e,this.enableShapeUniforms=Sw(this.outputShape.length);let s="",r="result";t&&(r="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let r=0;r<=1;r++){const a=2*t+r;s+=`\n          localCoords = coords;\n          if(localCoords[2] + ${r} < ${this.enableShapeUniforms?"outShape[2]":`${e[2]}`}) {\n          localCoords[2] += ${r};\n          if (localCoords[1] + ${t} < ${this.enableShapeUniforms?"outShape[1]":`${e[1]}`}) {\n            localCoords[1] += ${t};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${n.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${a}] = values[0];\n            } else if (offset == 1) {\n              result[${a}] = values[1];\n            } else if (offset == 2) {\n              result[${a}] = values[2];\n            } else {\n              result[${a}] = values[3];\n            }\n          }\n        }\n        `}this.userCode=`\n        ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":iw(e)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${s}\n\n          ${n.output} = ${r};\n        }\n    `}}function _w(e){const t=sw();return cv(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function Dw(e){return yv(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function Fw(e){return bv(e,new Uint16Array([0,1,2,2,1,3]))}function Ow(e,t,n,s,r,a){wv(t,n);const i=vv(e),o=e.TEXTURE_2D;return rv(e,()=>e.bindTexture(o,i)),rv(e,()=>e.texParameteri(o,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE)),rv(e,()=>e.texParameteri(o,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE)),rv(e,()=>e.texParameteri(o,e.TEXTURE_MIN_FILTER,e.NEAREST)),rv(e,()=>e.texParameteri(o,e.TEXTURE_MAG_FILTER,e.NEAREST)),1===(0,h.env)().getNumber("WEBGL_VERSION")?rv(e,()=>e.texImage2D(o,0,s,t,n,0,r,a,null)):rv(e,()=>e.texStorage2D(o,1,s,t,n)),rv(e,()=>e.bindTexture(e.TEXTURE_2D,null)),{texture:i,texShape:[n,t]}}function Mw(e){return e.internalFormatFloat}function zw(e,t,n,s){const[r,a]=ev(t,n);return Ow(e,r,a,Mw(s),s.textureFormatFloat,e.FLOAT)}function Lw(e){return e.internalFormatHalfFloat}function Pw(e,t,n,s){const[r,a]=ev(t,n);return Ow(e,r,a,Lw(s),s.textureFormatFloat,s.textureTypeHalfFloat)}function Bw(e){return e.downloadTextureFormat}function Ww(e,t,n,s){const[r,a]=ev(t,n);return Ow(e,r,a,Bw(s),e.RGBA,e.UNSIGNED_BYTE)}function Vw(e){return e.internalFormatPackedFloat}function Uw(e,t,n,s){const[r,a]=nv(t,n);return Ow(e,r,a,Vw(s),e.RGBA,e.FLOAT)}function Gw(e){return e.internalFormatPackedHalfFloat}function Hw(e,t,n,s){const[r,a]=nv(t,n);return Ow(e,r,a,Gw(s),e.RGBA,s.textureTypeHalfFloat)}function jw(e,t,n){return rv(e,()=>e.bindBuffer(e.ARRAY_BUFFER,n)),Tv(e,t,"clipSpacePos",n,3,20,0)&&Tv(e,t,"uv",n,2,20,12)}function qw(e,t,n,s,r,a){let i,o,l;rv(e,()=>e.bindTexture(e.TEXTURE_2D,t)),r instanceof Uint8Array?(i=new Uint8Array(n*s*4),o=e.UNSIGNED_BYTE,l=e.RGBA):(i=new Float32Array(n*s*4),o=e.FLOAT,l=a.internalFormatPackedFloat),i.set(r),2===(0,h.env)().getNumber("WEBGL_VERSION")?rv(e,()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n,s,e.RGBA,o,i)):rv(e,()=>e.texImage2D(e.TEXTURE_2D,0,l,n,s,0,e.RGBA,o,i)),rv(e,()=>e.bindTexture(e.TEXTURE_2D,null))}function Yw(e,t,n){rv(e,()=>e.bindTexture(e.TEXTURE_2D,t)),n.data instanceof Uint8Array?2===(0,h.env)().getNumber("WEBGL_VERSION")?rv(e,()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n.width,n.height,e.RGBA,e.UNSIGNED_BYTE,n.data)):rv(e,()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data)):2===(0,h.env)().getNumber("WEBGL_VERSION")?rv(e,()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,e.RGBA,e.UNSIGNED_BYTE,n)):rv(e,()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n)),rv(e,()=>e.bindTexture(e.TEXTURE_2D,null))}function Kw(e,t,n,s){const r=e.createBuffer();rv(e,()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,r));const a=16*t*n;return rv(e,()=>e.bufferData(e.PIXEL_PACK_BUFFER,a,e.STREAM_READ)),rv(e,()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0)),rv(e,()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null)),r}function Xw(e,t,n){const s=e,r=new Float32Array(n);return s.bindBuffer(s.PIXEL_PACK_BUFFER,t),s.getBufferSubData(s.PIXEL_PACK_BUFFER,0,r),s.bindBuffer(s.PIXEL_PACK_BUFFER,null),r}function Zw(e,t,n,s){const[r,a]=ev(t,n),i=new Uint8Array(t*n*4);return rv(e,()=>e.readPixels(0,0,r,a,s.downloadTextureFormat,e.UNSIGNED_BYTE,i)),new Float32Array(i.buffer)}function Qw(e,t,n,s,r,a,i,o){const l=e,u=new Float32Array(function(e,t){const[n,s]=nv(e,t);return n*s*4}(a,i));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}function Jw(e,t,n){const s=new Float32Array(t*n*4);return rv(e,()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,s)),s}class ek{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.itemsToPoll=[];const t=(0,h.env)().getNumber("WEBGL_VERSION");if(null!=e?(this.gl=e,Kx(t,e)):this.gl=Xx(t),e=this.gl,2===(0,h.env)().getNumber("WEBGL_VERSION")){const t=e;this.createVertexArray=()=>rv(t,()=>t.createVertexArray()),this.bindVertexArray=e=>rv(t,()=>t.bindVertexArray(e)),this.deleteVertexArray=e=>rv(t,()=>t.deleteVertexArray(e)),this.getVertexArray=()=>rv(t,()=>t.getParameter(t.VERTEX_ARRAY_BINDING))}else if(null!=e){const t=e.getExtension("OES_vertex_array_object");if(null==t)throw new Error("All WebGL1 implementations are expected to offer OES_vertex_array_object.");this.createVertexArray=()=>rv(e,()=>t.createVertexArrayOES()),this.bindVertexArray=n=>rv(e,()=>t.bindVertexArrayOES(n)),this.deleteVertexArray=n=>rv(e,()=>t.deleteVertexArrayOES(n)),this.getVertexArray=()=>rv(e,()=>e.getParameter(t.VERTEX_ARRAY_BINDING_OES))}let n="WEBGL_color_buffer_float";const s="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),1===(0,h.env)().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=uv(this.gl,e),Kv(this.gl,t))this.textureHalfFloatExtension=uv(this.gl,t);else if((0,h.env)().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),Kv(this.gl,s))this.colorBufferHalfFloatExtension=uv(this.gl,s);else if((0,h.env)().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",Kv(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!Kv(this.gl,s))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(s)}this.vertexBuffer=Dw(this.gl),this.indexBuffer=Fw(this.gl),this.framebuffer=kv(this.gl),this.textureConfig=sv(this.gl,this.textureHalfFloatExtension)}get debug(){return(0,h.env)().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;rv(e,()=>e.finish()),rv(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,null)),rv(e,()=>e.deleteFramebuffer(this.framebuffer)),rv(e,()=>e.bindBuffer(e.ARRAY_BUFFER,null)),rv(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)),rv(e,()=>e.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),zw(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),Pw(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),Ww(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),Yw(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,s){this.throwIfDisposed(),qw(this.gl,e,t,n,s,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),Hw(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),Uw(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(Rv(this.gl,this.framebuffer),this.outputTexture=null),rv(this.gl,()=>this.gl.deleteTexture(e))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,()=>Zw(this.gl,t,n,this.textureConfig))}downloadPackedMatrixFromBuffer(e,t,n,s,r,a){return Qw(this.gl,e,0,0,0,r,a,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return Xw(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const s=Kw(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),s}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if((0,h.env)().getBool("WEBGL_FENCE_API_ENABLED")){const s=e,r=s.fenceSync(s.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=s.clientWaitSync(r,0,0);return e===s.ALREADY_SIGNALED||e===s.CONDITION_SATISFIED},t=r}else(0,h.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,(0,h.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,()=>Jw(this.gl,t,n))}createProgram(e){this.throwIfDisposed();const t=this.gl;null==this.vertexShader&&(this.vertexShader=_w(t));const n=fv(t);rv(t,()=>t.attachShader(n,this.vertexShader)),rv(t,()=>t.attachShader(n,e)),mv(t,n);const s=Object.assign(n,{vao:this.createVertexArray()});return this.debug&&gv(t,s),s}buildVao(e){this.setProgram(e),this.bindVertexArray(e.vao);const t=this.gl;rv(t,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.indexBuffer)),jw(t,e,this.vertexBuffer)}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&(rv(this.gl,()=>this.gl.deleteProgram(e)),this.deleteVertexArray(e.vao))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&gv(this.gl,this.program),rv(this.gl,()=>this.gl.useProgram(e))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?Iv(this.gl,e,t):Cv(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),rv(this.gl,()=>this.gl.getAttribLocation(e,t))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),Av(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[s,r]=nv(t,n);this.setOutputMatrixTextureDriver(e,s,r)}setOutputMatrixWriteRegion(e,t,n,s){this.setOutputMatrixWriteRegionDriver(n,e,s,t)}setOutputPackedMatrixWriteRegion(e,t,n,s){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&gv(this.gl,this.program),_v(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;if(this.debug){const e=this.getVertexArray();console.assert(e===this.program.vao,"VAO changed between setProgram and executeProgram!"),this.debugValidate()}rv(e,()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),rv(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=uv(this.gl,2===(0,h.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===(0,h.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===(0,h.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await h.util.repeatedTry(()=>this.disposed||this.isQueryAvailable(e,(0,h.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),this.getQueryTime(e,(0,h.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),s&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise(t=>{this.addItemToPoll(()=>e.isFencePassed(),()=>t())})}pollItems(){const e=function(e){let t=0;for(;t<e.length&&e[t]();++t);return t-1}(this.itemsToPoll.map(e=>e.isDoneFn));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){if(this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1)return;let n;"setTimeoutCustom"in(0,h.env)().platform&&(n=(0,h.env)().platform.setTimeoutCustom.bind((0,h.env)().platform)),h.util.repeatedTry(()=>(this.pollItems(),0===this.itemsToPoll.length),()=>0,null,n)}bindTextureToFrameBuffer(e){this.throwIfDisposed(),$v(this.gl,e,this.framebuffer),this.debug&&_v(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?($v(this.gl,this.outputTexture,this.framebuffer),this.debug&&_v(this.gl)):Rv(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const s=this.gl;$v(s,e,this.framebuffer),this.debug&&_v(s),this.outputTexture=e,rv(s,()=>s.viewport(0,0,t,n)),rv(s,()=>s.scissor(0,0,t,n))}setOutputMatrixWriteRegionDriver(e,t,n,s){this.throwIfDisposed(),rv(this.gl,()=>this.gl.scissor(e,t,n,s))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{addImpl:tk,bincountImpl:nk,bincountReduceImpl:sk,bitwiseAndImpl:rk,castImpl:ak,ceilImpl:ik,concatImpl:ok,equalImpl:lk,expImpl:uk,expm1Impl:ck,floorImpl:dk,gatherNdImpl:hk,gatherV2Impl:pk,greaterImpl:fk,greaterEqualImpl:mk,lessImpl:gk,lessEqualImpl:yk,linSpaceImpl:bk,logImpl:xk,maxImpl:vk,maximumImpl:wk,minimumImpl:kk,multiplyImpl:Tk,negImpl:Sk,notEqualImpl:Nk,prodImpl:Ik,raggedGatherImpl:Ck,raggedRangeImpl:Ak,raggedTensorToTensorImpl:Ek,rangeImpl:$k,rsqrtImpl:Rk,scatterImpl:_k,sigmoidImpl:Dk,simpleAbsImpl:Fk,sliceImpl:Ok,sparseFillEmptyRowsImpl:Mk,sparseReshapeImpl:zk,sparseSegmentReductionImpl:Lk,sqrtImpl:Pk,staticRegexReplaceImpl:Bk,stridedSliceImpl:Wk,stringNGramsImpl:Vk,stringSplitImpl:Uk,stringToHashBucketFastImpl:Gk,subImpl:Hk,tileImpl:jk,topKImpl:qk,transposeImpl:Yk,uniqueImpl:Kk}=l;function Xk(e,t){return["x","y","z","w","u","v"].slice(0,t).map(t=>`${e}.${t}`)}function Zk(e,t){return 1===t?[e]:Xk(e,t)}class Qk{constructor(e){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.enableShapeUniforms=Sw(this.outputShape.length),0===this.rank)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const e=Zk("rc",this.rank),t=bw(this.rank),n=this.getOutOfBoundsCondition(e),s=this.getSetup(e),r=this.getOutput(e);this.userCode=`\n        void main() {\n          ${t} rc = getOutputCoords();\n\n          if(${n}) {\n            setOutput(vec4(0));\n          } else {\n            ${s}\n\n            setOutput(vec4(${r}));\n          }\n        }\n      `}}getSourceCoordsArr(e){const t=[];for(let n=0;n<=1;n++)for(let s=0;s<=1;s++){let r=`${0===n?"r":"rp1"}, ${0===s?"c":"cp1"}`;for(let t=2;t<this.rank;t++)r=`${e[e.length-1-t]},`+r;t.push(r)}return t}getOutOfBoundsCondition(e){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let t="";for(let n=this.rank-2;n<this.rank;n++)t+=`${e[n]} >= ${this.enableShapeUniforms?`outShape[${n}]`:this.outputShape[n]}`,n<this.rank-1&&(t+="||");return t}getSetup(e){if(1===this.rank)return"";const t=e.slice(-2),n=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],s=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`\n      int r = ${t[0]};\n      int c = ${t[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${n};\n      bool rEdge = rp1 >= ${s};\n    `}getOutput(e){const t=this.getSourceCoordsArr(e);return 1===this.rank?`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`:`getA(${t[0]}),\n            cEdge ? 0. : getA(${t[1]}),\n            rEdge ? 0. : getA(${t[2]}),\n            rEdge || cEdge ? 0. : getA(${t[3]})`}}class Jk{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=Sw(this.outputShape.length);let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}var s,r;this.userCode=`\n      ${s=t,r=this.enableShapeUniforms,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${r?function(e,t,n="index"){const s=function(e,t){const n=e.length,s=e.map(e=>`${t}[${e}]`),r=new Array(n-1);r[n-2]=s[n-1];for(let e=n-3;e>=0;--e)r[e]=`(${r[e+1]} * ${s[e+1]})`;return r}(e.map((e,t)=>t),t);return s.map((t,r)=>`int ${e[r]} = ${n} / ${s[r]}; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * ${s[r]}`:`index -= ${e[r]} * ${s[r]}`};`).join("")}(["r","c","d"],"inputShape"):rw(["r","c","d"],s)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":iw(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};\n        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class eT{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.usedTextures={},this.logEnabled=!1}acquireTexture(e,t,n){const s=nT(t,n),r=sT(e,s,n);r in this.freeTextures||(this.freeTextures[r]=[]),r in this.usedTextures||(this.usedTextures[r]=[]);const a=tT(e,s,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[r].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const e=this.freeTextures[r].pop();return this.usedTextures[r].push(e),e}let i;return s===Jx.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):s===Jx.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):s===Jx.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):s===Jx.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):s===Jx.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[r].push(i),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),i}releaseTexture(e,t,n,s){if(null==this.freeTextures)return;const r=nT(n,s),a=sT(t,r,s);a in this.freeTextures||(this.freeTextures[a]=[]);const i=tT(t,r,this.gpgpu.gl,this.gpgpu.textureConfig,s),o=(0,h.env)().getNumber("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==o&&this._numBytesAllocated>o?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=i):(this.freeTextures[a].push(e),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const l=this.usedTextures[a],u=l&&l.indexOf(e);if(null==u||u<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l[u]=l[l.length-1],l.pop(),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});for(const e in this.usedTextures)this.usedTextures[e].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function tT(e,t,n,s,r){const a=function(e,t){switch(e){case Jx.PACKED_2X2_FLOAT32:return Vw(t);case Jx.PACKED_2X2_FLOAT16:return Gw(t);case Jx.UNPACKED_FLOAT32:return Mw(t);case Jx.UNPACKED_FLOAT16:return Lw(t);case Jx.PACKED_4X1_UNSIGNED_BYTE:return Bw(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,s);let i;if(r){const[t,n]=nv(e[0],e[1]);i=t*n}else{const[t,n]=ev(e[0],e[1]);i=t*n}const o=function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;if(t===n.RGBA8)return 4;throw new Error(`Unknown internal format ${t}`)}(n,a);return i*o}function nT(e,t){if(e===Qx.UPLOAD)return Jx.PACKED_2X2_FLOAT32;if(e===Qx.RENDER||null==e)return function(e){return(0,h.env)().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?Jx.PACKED_2X2_FLOAT32:Jx.UNPACKED_FLOAT32:e?Jx.PACKED_2X2_FLOAT16:Jx.UNPACKED_FLOAT16}(t);if(e===Qx.DOWNLOAD||e===Qx.PIXELS)return Jx.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function sT(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class rT{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=Sw(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const aT="if (isnan(x)) return x;",iT="return abs(x);",oT=aT+"\n  return (x < 0.0) ? 0.0 : x;\n",lT=aT+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",uT="return x;";class cT{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=Sw(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class dT{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e,this.enableShapeUniforms=Sw(this.outputShape.length);const t=e.length,n=Zk("rc",t),s=bw(t),r=function(e,t){if(1===e)return"rc";let n="";for(let s=0;s<e;s++)n+=t[s],s<e-1&&(n+=",");return n}(t,n),a=n.slice(-2),i=t<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${s} rc = getOutputCoords();\n        vec4 packedInput = getA(${r});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const hT=h.kernel_impls.whereImpl,pT={},fT=(0,h.env)().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class mT extends h.KernelBackend{nextDataId(){return mT.nextDataId++}constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!(0,h.env)().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let t;if(null!=e){if(e instanceof ek)t=e;else{const n=Xx((0,h.env)().getNumber("WEBGL_VERSION"),e);t=new ek(n)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const e=Xx((0,h.env)().getNumber("WEBGL_VERSION"));t=new ek(e),this.binaryCache=((n=(0,h.env)().getNumber("WEBGL_VERSION"))in pT||(pT[n]={}),pT[n]),this.gpgpuCreatedLocally=!0}var n;this.gpgpu=t,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new eT(this.gpgpu),this.numMBBeforeWarning=null==(0,h.env)().global.screen?1024:(0,h.env)().global.screen.height*(0,h.env)().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new h.DataStorage(this,(0,h.engine)())}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}writeTexture(e,t,n,s,r,a){const i=this.makeTensorInfo(t,n),o=this.texData.get(i.dataId);o.isPacked=!1,o.texture={texture:e,texShape:[s,r]},o.texShape=[s,r];const l=Lv(t),u=new $w(l,!1,a),c=this.runWebGLProgram(u,[i],n,[[s,r]]);return c.shape=t,o.texture=null,this.disposeIntermediateTensorInfo(i),c.dataId}write(e,t,n){if(((0,h.env)().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||(0,h.env)().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const s={id:this.nextDataId()};return this.texData.set(s,{shape:t,dtype:n,values:e,usage:Qx.UPLOAD,refCount:1}),s}refCount(e){return this.texData.has(e)?this.texData.get(e).refCount:0}incRef(e){this.texData.get(e).refCount++}decRef(e){this.texData.has(e)&&this.texData.get(e).refCount--}move(e,t,n,s,r){if((0,h.env)().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===s)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:s,values:t,usage:Qx.UPLOAD,refCount:r})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:n,dtype:s,complexTensorInfos:r,slice:a,shape:i,isPacked:o}=t;if(null!=a){let t;t=o?new cT(i,uT):new rT(i,uT);const n=this.runWebGLProgram(t,[{dataId:e,shape:i,dtype:s}],s),r=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===s)return n;const l=null!=this.activeTimers;let u,c;if(l&&(u=h.util.now()),"complex64"===s){const e=this.readSync(r.real.dataId),t=this.readSync(r.imag.dataId);c=h.backend_util.mergeRealAndImagArrays(e,t)}else c=this.getValuesFromTexture(e);return l&&(this.downloadWaitMs+=h.util.now()-u),this.convertAndCacheOnCPU(e,c)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise(e=>t.push(e))}const t=this.texData.get(e),{values:n,shape:s,slice:r,dtype:a,complexTensorInfos:i,isPacked:o}=t;if(null!=r){let t;t=o?new cT(s,uT):new rT(s,uT);const n=this.runWebGLProgram(t,[{dataId:e,shape:s,dtype:a}],a),r=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if((0,h.env)().getBool("DEBUG")&&!(0,h.env)().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===(0,h.env)().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let l,u,c=null;if("complex64"!==a&&(0,h.env)().get("WEBGL_BUFFER_SUPPORTED")){l=this.decode(e);const t=this.texData.get(l.dataId);c=this.gpgpu.createBufferFromTexture(t.texture.texture,...tv(s))}if(this.pendingRead.set(e,[]),"complex64"!==a&&await this.gpgpu.createAndWaitForFence(),"complex64"===a){const e=await Promise.all([this.read(i.real.dataId),this.read(i.imag.dataId)]),t=e[0],n=e[1];u=h.backend_util.mergeRealAndImagArrays(t,n)}else if(null==c)u=this.getValuesFromTexture(e);else{const e=h.util.sizeFromShape(s);u=this.gpgpu.downloadFloat32MatrixFromBuffer(c,e)}if(null!=l&&this.disposeIntermediateTensorInfo(l),null!=c){const e=this.gpgpu.gl;rv(e,()=>e.deleteBuffer(c))}const d=this.convertAndCacheOnCPU(e,u),p=this.pendingRead.get(e);return this.pendingRead.delete(e),p.forEach(e=>e(d)),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&(0,h.engine)().removeDataId(e,this),this.pendingDeletes--),d}readToGPU(e,t={}){const n=this.texData.get(e),{values:s,shape:r,slice:a,dtype:i,isPacked:o,texture:l}=n;if("complex64"===i)throw new Error("Does not support reading texture for complex64 dtype.");if(null!=a){let n;n=o?new cT(r,uT):new rT(r,uT);const s=this.runWebGLProgram(n,[{dataId:e,shape:r,dtype:i}],i),a=this.readToGPU(s,t);return this.disposeIntermediateTensorInfo(s),a}if(null==l)throw null!=s?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const u=this.decode(e,t.customTexShape),c=(0,h.engine)().makeTensorFromTensorInfo(u),d=this.texData.get(u.dataId);return Object.assign({tensorRef:c},d.texture)}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map(e=>h.util.decodeString(e));return(0,h.buffer)(e.shape,e.dtype,n)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return(0,h.buffer)(e.shape,e.dtype,t)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!ov(n)){if((0,h.env)().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:s}=this.texData.get(e),r=h.util.sizeFromShape(t);if((0,h.env)().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),s=this.texData.get(n.dataId),a=this.gpgpu.downloadMatrixFromPackedTexture(s.texture.texture,...tv(t)).subarray(0,r);return this.disposeIntermediateTensorInfo(n),a}const a=(0,h.env)().getBool("WEBGL_PACK")&&!0===s,i=a?Lv(t):t,o=a?new Aw(i):new Cw(i),l=this.runWebGLProgram(o,[{shape:i,dtype:n,dataId:e}],"float32"),u=this.texData.get(l.dataId),c=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(u.texture.texture,u.texShape[0],u.texShape[1]).subarray(0,r);return this.disposeIntermediateTensorInfo(l),c}timerAvailable(){return(0,h.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){const t=this.activeTimers,n=[];let s=!1;null==this.programTimersStack?(this.programTimersStack=n,s=!0):this.activeTimers.push(n),this.activeTimers=n,e();const r=h.util.flatten(this.activeTimers.map(e=>e.query)).filter(e=>null!=e),a=h.util.flatten(this.activeTimers.map(e=>e.name)).filter(e=>null!=e);this.activeTimers=t,s&&(this.programTimersStack=null);const i={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if((0,h.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(r);i.kernelMs=h.util.sum(e),i.getExtraProfileInfo=()=>e.map((e,t)=>({name:a[t],ms:e})).map(e=>`${e.name}: ${e.ms}`).join(", ")}else i.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,i})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return(0,h.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:h.util.now(),endMs:null}}endTimer(e){return(0,h.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=h.util.now(),e)}async getQueryTime(e){if((0,h.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:n,texShape:s,usage:r,isPacked:a,slice:i}=this.texData.get(e),o=i&&i.origDataId||e,l=this.dataRefCount.get(o);l>1?this.dataRefCount.set(o,l-1):(this.dataRefCount.delete(o),null!=t&&(this.numBytesInGPU-=this.computeBytes(s,n),this.textureManager.releaseTexture(t,s,r,a)));const u=this.texData.get(e);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=fT){return(0,h.env)().getBool("WEBGL_CPU_FORWARD")&&e.every(e=>null==this.texData.get(e.dataId).texture&&h.util.sizeFromShape(e.shape)<t)}getGPGPUContext(){return this.gpgpu}where(e){h.backend_util.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return hT(e.shape,t)}packedUnaryOp(e,t,n){const s=new cT(e.shape,t),r=this.compileAndRun(s,[e],n);return(0,h.engine)().makeTensorFromTensorInfo(r)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=Fk(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if((0,h.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,iT,e.dtype);const t=new rT(e.shape,iT),n=this.compileAndRun(t,[e]);return(0,h.engine)().makeTensorFromTensorInfo(n)}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&h.util.isString(n[0])){const r=n.map(e=>h.util.encodeString(e));s=this.write(r,e,t)}else s=this.write(n,e,t);return this.texData.get(s).usage=null,{dataId:s,shape:e,dtype:t}}makeOutput(e,t,n){return(0,h.engine)().makeTensorFromTensorInfo(this.makeTensorInfo(e,t,n),this)}unpackTensor(e){const t=new dT(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new Qk(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[Mv(e.shape),...zv(e.shape)],s={dtype:e.dtype,shape:n,dataId:e.dataId},r=[Mv(t),...zv(t)],a=new Jk(r,n),i=[n],o=this.runWebGLProgram(a,[s],e.dtype,i,!0);return{dataId:o.dataId,shape:t,dtype:o.dtype}}decode(e,t){const n=this.texData.get(e),{isPacked:s,shape:r,dtype:a}=n;if(null!=t){const e=h.util.sizeFromShape(r),n=t[0]*t[1]*4;h.util.assert(e<=n,()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.")}const i=Lv(r);let o;o=s?new Iw(i):new Nw(i);const l=[null!=t?t:tv(i)];return{dtype:a,shape:r,dataId:this.runWebGLProgram(o,[{shape:i,dtype:a,dataId:e}],a,l,!0,t).dataId}}runWebGLProgram(e,t,n,s,r=!1,a){const i=this.makeTensorInfo(e.outputShape,n),o=this.texData.get(i.dataId);if(e.packedOutput&&(o.isPacked=!0),e.outPackingScheme===Zx.DENSE){const t=null!=a?a:tv(e.outputShape);o.texShape=t.map(e=>2*e)}if(null!=e.outTexUsage&&(o.usage=e.outTexUsage),0===h.util.sizeFromShape(i.shape))return o.values=h.util.getTypedArrayFromDType(i.dtype,0),i;const l=[],u=t.map(t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&h.util.sizeFromShape(t.shape)<=(0,h.env)().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}if(this.uploadToGPU(t.dataId),!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),l.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!Wv(n.shape,t.shape)){const e=t,s=t.shape;t.shape=n.shape,t=this.packedReshape(t,s),l.push(t),n=this.texData.get(t.dataId),e.shape=s}return{shape:t.shape,texData:n,isUniform:!1}});this.uploadToGPU(i.dataId);const c={shape:i.shape,texData:o,isUniform:!1},d=function(e,t,n){let s="";t.concat(n).forEach(t=>{const r=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0;if(e.enableShapeUniforms&&!t.isUniform){const a=t.texData.texShape,{useSqueezeShape:i,uniformShape:o,keptDims:l}=xw(e.packedInputs,t.shape,a);let u="",c="",d="";if(1===o.length&&e.packedInputs){const e=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];u=`${e[0]>1}_${e[1]>1}`}else if(2!==o.length||e.packedInputs){if(o.length>2&&!e.packedInputs){const e=h.util.computeStrides(o);d=`${e[0]===a[1]}_${e[e.length-1]===a[1]}`}}else c=`${o[0]>1}_${o[1]>1}`;const p=t.shape.length,f=2===o.length&&h.util.arraysEqual(t.shape,a),m=1===h.util.sizeFromShape(t.shape),g=h.backend_util.getBroadcastDims(t.shape,n.shape),y=!e.packedInputs&&p===n.shape.length&&h.util.arraysEqual(a,n.texData.texShape),b=e.packedInputs||o.length>2?"":`${a[0]>1}_${a[1]>1}`;s+=`${p}_${y}_${i?l:""}_${o.length}_${m}_${g}_${f}_${u}_${c}_${d}_${b}_${r}`}else{const e=t.isUniform?"uniform":t.texData.texShape;s+=`${t.shape}_${e}_${r}`}});const r=e.userCode;let a=e.constructor.name;return a+="_"+s+"_"+r+`${(0,h.env)().getNumber("WEBGL_VERSION")}`,a}(e,u,c),p=this.getAndSaveBinary(d,()=>function(e,t,n,s){const r=n.map((e,n)=>{const s={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(s.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:s}}),a=r.map(e=>e.shapeInfo),i={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},o=uw(r,i,t),l=dv(e.gl,o),u=e.createProgram(l);return(0,h.env)().get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:l,source:o,webGLProgram:u,inShapeInfos:a,outShapeInfo:i,variablesLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:(e.buildVao(u),Object.assign({program:t,fragmentShader:l,source:o,webGLProgram:u,inShapeInfos:a,outShapeInfo:i},kw(e,t,u)))}(this.gpgpu,e,u,c)),f=null!=this.activeTimers;let m;f&&(m=this.startTimer()),(0,h.env)().get("ENGINE_COMPILE_ONLY")||function(e,t,n,s,r){t.program.enableShapeUniforms||(Tw(t.inShapeInfos,n),Tw([t.outShapeInfo],[s]));const a=s.texData.texture,i=s.texData.texShape;s.texData.isPacked?e.setOutputPackedMatrixTexture(a.texture,i[0],i[1]):e.setOutputMatrixTexture(a.texture,i[0],i[1]),e.setProgram(t.webGLProgram),e.bindVertexArray(t.webGLProgram.vao),1===(0,h.env)().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN);for(let s=0;s<n.length;++s){const r=n[s],{uniform:a,offset:i,shape:o,texShape:l}=t.variablesLocations[s];if(o){const{uniformShape:n}=xw(t.program.packedInputs,r.shape,r.texData.texShape);switch(n.length){case 1:e.gl.uniform1iv(o,new Int32Array(n));break;case 2:e.gl.uniform2iv(o,new Int32Array(n));break;case 3:e.gl.uniform3iv(o,new Int32Array(n));break;case 4:e.gl.uniform4iv(o,new Int32Array(n))}}if(l&&e.gl.uniform2i(l,r.texData.texShape[0],r.texData.texShape[1]),null!=a)if(r.isUniform)if(h.util.sizeFromShape(r.shape)<2)e.gl.uniform1f(a,r.uniformValues[0]);else{let t=r.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(a,t)}else null!=r.texData.slice&&null!=i&&e.gl.uniform1i(i,r.texData.slice.flatOffset),e.setInputMatrixTexture(r.texData.texture.texture,a,s)}const o=t.outShapeLocation;if(o)switch(s.shape.length){case 1:e.gl.uniform1iv(o,new Int32Array(s.shape));break;case 2:e.gl.uniform2iv(o,new Int32Array(s.shape));break;case 3:e.gl.uniform3iv(o,new Int32Array(s.shape));break;case 4:e.gl.uniform4iv(o,new Int32Array(s.shape))}if(t.outShapeStridesLocation){const n=h.util.computeStrides(s.shape);switch(s.shape.length){case 2:e.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(n));break;case 3:e.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(n));break;case 4:e.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(n))}}if(t.outTexShapeLocation&&e.gl.uniform2i(t.outTexShapeLocation,s.texData.texShape[0],s.texData.texShape[1]),t.program.customUniforms&&r)for(let n=0;n<t.program.customUniforms.length;++n){const s=t.program.customUniforms[n],a=t.customUniformLocations[n],i=r[n];if("float"===s.type)e.gl.uniform1fv(a,i);else if("vec2"===s.type)e.gl.uniform2fv(a,i);else if("vec3"===s.type)e.gl.uniform3fv(a,i);else if("vec4"===s.type)e.gl.uniform4fv(a,i);else if("int"===s.type)e.gl.uniform1iv(a,i);else if("ivec2"===s.type)e.gl.uniform2iv(a,i);else if("ivec3"===s.type)e.gl.uniform3iv(a,i);else{if("ivec4"!==s.type)throw Error(`uniform type ${s.type} is not supported yet.`);e.gl.uniform4iv(a,i)}}e.executeProgram()}(this.gpgpu,p,u,c,s),l.forEach(e=>this.disposeIntermediateTensorInfo(e)),f&&(m=this.endTimer(m),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(m)}));const g=(0,h.env)().getNumber("WEBGL_FLUSH_THRESHOLD");if(g>0){const e=h.util.now();e-this.lastGlFlushTime>g&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!(0,h.env)().getBool("WEBGL_LAZILY_UNPACK")&&o.isPacked&&!1===r){const e=this.unpackTensor(i);return this.disposeIntermediateTensorInfo(i),e}return i}compileAndRun(e,t,n,s,r=!1){return n=n||t[0].dtype,this.runWebGLProgram(e,t,n,s,r)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||((0,h.env)().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach(e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}),this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=(0,h.tidy)(()=>{if(!(0,h.env)().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=(0,h.env)().getBool("DEBUG");(0,h.env)().set("DEBUG",!1);const t=this.abs((0,h.scalar)(1e-8)).dataSync()[0];if((0,h.env)().set("DEBUG",e),t>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:s,values:r,texture:a,usage:i,isPacked:o}=t;if(null!=a)return;const l=null!=this.activeTimers;let u;l&&(u=h.util.now());let c=t.texShape;if(null==c&&(c=Pv(n,o),t.texShape=c),null!=r){const e=Lv(n);let a,i=c[1],d=c[0];const p=r instanceof Uint8Array||r instanceof Uint8ClampedArray;!o&&p||([i,d]=nv(c[0],c[1])),a=o?new Rw(e,p):new $w(e,p);const f=p?[d,i]:c,m=this.makeTensorInfo(f,s),g=this.texData.get(m.dataId);g.usage=p?Qx.PIXELS:Qx.UPLOAD,g.texShape=f,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(m.dataId),i,d,r);const y=[[d,i]],b=!0,x=this.runWebGLProgram(a,[m],s,y,b),v=this.texData.get(x.dataId);t.texShape=v.texShape,t.isPacked=v.isPacked,t.usage=v.usage,(0,h.env)().get("ENGINE_COMPILE_ONLY")?this.disposeData(x.dataId):(t.texture=v.texture,t.values=null,this.texData.delete(x.dataId)),this.disposeIntermediateTensorInfo(m),l&&(this.uploadWaitMs+=h.util.now()-u)}else{const e=this.acquireTexture(c,i,s,o);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:s}=n;return null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error(`Unknown dtype ${t}`)}(t,s)),n.values}acquireTexture(e,t,n,s){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,s)}computeBytes(e,t){return e[0]*e[1]*h.util.bytesPerElement(t)}checkCompileCompletion(){for(const[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}async checkCompileCompletionAsync(){const e=[];if(this.gpgpu.parallelCompilationExtension){for(const[,t]of Object.entries(this.binaryCache))e.push(this.checkCompletionAsync_(t));return Promise.all(e)}for(const[,t]of Object.entries(this.binaryCache)){const n=new Promise(e=>{try{this.checkCompletion_(t),e(!0)}catch(e){throw e}});e.push(n)}return Promise.all(e)}async checkCompletionAsync_(e){return this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(e):(await(0,h.nextFrame)(),this.checkCompletionAsync_(e))}checkCompletion_(e){if(!1===this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS)){if(console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),!1===this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS))throw pv(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),new Error("Failed to compile fragment shader.");throw new Error("Failed to link vertex and fragment shaders.")}return!0}getUniformLocations(){for(const e of Object.values(this.binaryCache)){this.gpgpu.buildVao(e.webGLProgram);const{variablesLocations:t,customUniformLocations:n,infLoc:s,nanLoc:r,outShapeLocation:a,outShapeStridesLocation:i,outTexShapeLocation:o}=kw(this.gpgpu,e.program,e.webGLProgram);e.variablesLocations=t,e.customUniformLocations=n,e.infLoc=s,e.nanLoc=r,e.outShapeLocation=a,e.outShapeStridesLocation=i,e.outTexShapeLocation=o}}createTensorFromGPUData(e,t,n){e.channels=e.channels||"RGBA";const{texture:s,height:r,width:a,channels:i}=e,o=(0,h.engine)().backend;if(!o.gpgpu.gl.isTexture(s))throw new Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'.");const l=o.writeTexture(s,t,n,r,a,i);return(0,h.engine)().makeTensorFromDataId(l,t,n,o)}}mT.nextDataId=0;const gT="4.22.0";function yT(){(0,h.env)().set("WEBGL_FORCE_F16_TEXTURES",!0)}h.device_util.isBrowser()&&(0,h.registerBackend)("webgl",()=>new mT,2);const bT={forceHalfFloat:yT},xT="\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n";class vT{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=h.backend_util.assertAndGetBroadcastShape(t,n),this.enableShapeUniforms=Sw(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}const wT="\n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n";class kT{constructor(e,t,n,s=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=h.backend_util.assertAndGetBroadcastShape(t,n);const r=this.outputShape.length;this.enableShapeUniforms=Sw(r);let a="";if(s)if(0===r||1===h.util.sizeFromShape(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(a=`\n          ${bw(r)} coords = getOutputCoords();\n        `,1===r)this.enableShapeUniforms?a+="\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":a+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=Zk("coords",r);this.enableShapeUniforms?a+=`\n            bool nextRowOutOfBounds =\n              (${e[r-2]} + 1) >= outShape[${r} - 2];\n            bool nextColOutOfBounds =\n              (${e[r-1]} + 1) >= outShape[${r} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:a+=`\n            bool nextRowOutOfBounds =\n              (${e[r-2]} + 1) >= ${this.outputShape[r-2]};\n            bool nextColOutOfBounds =\n              (${e[r-1]} + 1) >= ${this.outputShape[r-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}function TT(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const ST={kernelName:h.Identity,backendName:"webgl",kernelFunc:TT};function NT(e){const{inputs:t,backend:n}=e,{real:s,imag:r}=t,a=n.makeTensorInfo(s.shape,"complex64"),i=n.texData.get(a.dataId),o=TT({inputs:{x:s},backend:n}),l=TT({inputs:{x:r},backend:n});return i.complexTensorInfos={real:o,imag:l},a}const IT={kernelName:h.Complex,backendName:"webgl",kernelFunc:NT},CT="return (a < 0.) ? b * a : a;",AT="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",ET={kernelName:h.LeakyRelu,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{alpha:a}=s,i=n.makeTensorInfo([],"float32",h.util.createScalarValue(a,"float32")),o=(0,h.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new kT(AT,r.shape,i.shape):new vT(CT,r.shape,i.shape),l=n.runWebGLProgram(o,[r,i],"float32");return n.disposeIntermediateTensorInfo(i),l}},$T="return (a < 0.) ? b * a : a;",RT="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",_T={kernelName:h.Prelu,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s,alpha:r}=t,a=(0,h.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new kT(RT,s.shape,r.shape):new vT($T,s.shape,r.shape);return n.runWebGLProgram(a,[s,r],"float32")}},DT="if (isnan(x)) return x;";function FT({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:s}){return({inputs:r,backend:a})=>{const{x:i}=r,o=a,l=s||i.dtype;if(o.shouldExecuteOnCPU([i])&&null!=n){const e=o.texData.get(i.dataId),t=n(e.values,l);return o.makeTensorInfo(i.shape,l,t)}let u;return u=(0,h.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new cT(i.shape,t):new rT(i.shape,e),o.runWebGLProgram(u,[i],l)}}function OT({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:s=!1,cpuKernelImpl:r,dtype:a}){return({inputs:i,backend:o})=>{const{a:l,b:u}=i,c=o;if(s&&"complex64"===l.dtype){const t=c.texData.get(l.dataId),n=c.texData.get(u.dataId),[s,r]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map(t=>{const[n,s]=t,r={dataId:n.dataId,dtype:n.dtype,shape:l.shape},a={dataId:s.dataId,dtype:s.dtype,shape:u.shape},i=new vT(e,l.shape,u.shape);return c.runWebGLProgram(i,[r,a],(0,h.upcastType)(n.dtype,s.dtype))}),a=NT({inputs:{real:s,imag:r},backend:c});return c.disposeIntermediateTensorInfo(s),c.disposeIntermediateTensorInfo(r),a}const d=a||(0,h.upcastType)(l.dtype,u.dtype);if(("string"===l.dtype||"string"===u.dtype||c.shouldExecuteOnCPU([l,u]))&&null!=r){const e=c.texData.get(l.dataId).values,t=c.texData.get(u.dataId).values,n="string"===l.dtype?h.backend_util.fromUint8ToStringArray(e):e,s="string"===l.dtype?h.backend_util.fromUint8ToStringArray(t):t,[a,i]=r(l.shape,u.shape,n,s,d),o=c.makeTensorInfo(i,d);return c.texData.get(o.dataId).values=a,o}let p;return p=(0,h.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new kT(t,l.shape,u.shape,n):new vT(e,l.shape,u.shape),c.runWebGLProgram(p,[l,u],d)}}function MT(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":oT;if("elu"===e)return t?"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n":"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return t?"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":lT;if("prelu"===e)return t?RT:$T;if("leakyrelu"===e)return t?AT:CT;if("sigmoid"===e)return"return 1.0 / (1.0 + exp(-1.0 * x));";throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class zT{constructor(e,t,n,s=!1,r=!1,a=!1,i=null,o=!1,l=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n,this.enableShapeUniforms=Sw(this.outputShape.length);const u=s?e[1]:e[2],c=Math.ceil(u/2),d=s?"i * 2, rc.y":"rc.y, i * 2",h=r?"rc.z, i * 2":"i * 2, rc.z",p=s?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",g="";i&&(m=o?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`:l?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${i}\n        }`:`vec4 activation(vec4 x) {\n          ${i}\n        }`,g="result = activation(result);");const y=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),l&&this.variableNames.push("leakyreluAlpha");let b="rc.x",x="rc.x";e[0]<t[0]?b=`imod(rc.x, ${e[0]})`:t[0]<e[0]&&(x=`imod(rc.x, ${t[0]})`),this.userCode=`\n      ${m}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${c}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        int batchA = ${b};\n        int batchB = ${x};\n        for (int i = 0; i < ${c}; i++) {\n          vec4 a = getMatrixA(batchA, ${d});\n          vec4 b = getMatrixB(batchB, ${h});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${p[0]} * ${f[0]});\n          result += (${p[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${y}\n\n        ${g}\n\n        setOutput(result);\n      }\n    `}}class LT{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=h.backend_util.assertAndGetBroadcastShape(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const PT="return a * b;";function BT(e){const{inputs:t,backend:n}=e,{a:s,b:r}=t,a=h.backend_util.upcastType(s.dtype,r.dtype);if("complex64"===s.dtype){const e=n.texData.get(s.dataId),t=n.texData.get(r.dataId),a=new LT("return areal * breal - aimag * bimag;",s.shape,r.shape),i=new LT("return areal * bimag + aimag * breal;",s.shape,r.shape),o=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:s.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:s.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:r.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:r.shape}],l=n.runWebGLProgram(a,o,"float32"),u=n.runWebGLProgram(i,o,"float32"),c=NT({inputs:{real:l,imag:u},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),c}if(n.shouldExecuteOnCPU([s,r])){const e=n.texData.get(s.dataId),t=n.texData.get(r.dataId),[i,o]=Tk(s.shape,r.shape,e.values,t.values,a),l=n.makeTensorInfo(o,a);return n.texData.get(l.dataId).values=i,l}let i;return i=(0,h.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new kT(PT,s.shape,r.shape):new vT(PT,s.shape,r.shape),n.runWebGLProgram(i,[s,r],a)}const WT={kernelName:h.Multiply,backendName:"webgl",kernelFunc:BT};function VT(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{shape:a}=s,i=n,o=h.util.sizeFromShape(r.shape),l=h.util.inferFromImplicitShape(a,o),u=h.util.sizeFromShape(l);h.util.assert(o===u,()=>`The new shape (${l}) has ${u} elements and the old shape (${r.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`);const c=i.texData.get(r.dataId);return!c.isPacked||Wv(r.shape,l)||null!==c.texture&&Wv(c.shape,l)?(i.incRef(r.dataId),{dataId:r.dataId,shape:l,dtype:r.dtype}):function(e,t,n){const s=[Mv(e.shape),...zv(e.shape)],r={dtype:e.dtype,shape:s,dataId:e.dataId},a=[Mv(t),...zv(t)],i=new Jk(a,s),o=[s],l=n.runWebGLProgram(i,[r],e.dtype,o,!0);return{dataId:l.dataId,shape:t,dtype:l.dtype}}(r,l,i)}const UT={kernelName:h.Reshape,backendName:"webgl",kernelFunc:VT};class GT{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:r,outSize:a}=e;this.outputShape=[s,a];const i=4*Math.floor(n/4),o=n%4;let l="sumValue += dot(values, ones);";if(null!=t){const e=1/t;l=`sumValue += dot(values * ${h.util.isInt(e)?e.toPrecision(2):e}, ones);`}let u="";r%n>0&&(u=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${u}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===o}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${l}\n        } else if (${2===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${l}\n        } else if (${3===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}class HT{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:r,outSize:a}=e;this.outputShape=[s,a];let i="0.0",o="";"prod"===t?i="1.0":"min"===t?(i="1.0 / 1e-20",o="min"):"max"===t&&(i="-1.0 / 1e-20",o="max");let l=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?l="sumValue":"prod"===t?l="prodValue":"all"===t?l="allValue":"any"===t&&(l="anyValue");const u=4*Math.floor(n/4),c=n%4;let d=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n        if (${"min"===t} || ${"max"===t}) {\n          minMaxValue = ${o}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,h="vec4";"all"===t?(i="1.0",d="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",h="bvec4"):"any"===t&&(i="0.0",d="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",h="bvec4");let p="";r%n>0&&(p=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${p}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${u}; i += 4) {\n          int inIdx = inOffset + i;\n          ${h} values = ${h}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${d}\n        }\n\n        int inIdx = inOffset + ${u};\n        if (${1===c}) {\n          ${h} values = ${h}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${d}\n        } else if (${2===c}) {\n          ${h} values = ${h}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${d}\n        } else if (${3===c}) {\n          ${h} values = ${h}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${d}\n        }\n        setOutput(${l});\n      }\n    `}}function jT(e,t,n,s){const r=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],s=h.backend_util.computeOptimalWindowSize(n);t.push({inSize:n,windowSize:s,outSize:Math.ceil(n/s)})}return t}(e.shape);let a=e;for(let i=0;i<r.length;i++){const{inSize:o,windowSize:l,outSize:u}=r[i];let c,d;c="mean"===n?0===i?new GT({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},o):new GT({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u}):new HT({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},n),d=a,a=s.runWebGLProgram(c,[a],t),d.dataId!==e.dataId&&s.disposeIntermediateTensorInfo(d)}return a}class qT{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];this.outputShape=n,this.rank=n.length;const s=bw(this.rank),r=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],s=new Array(t);for(let t=0;t<e.length;t++)s[e[t]]=n[t];return s.join()}(t);this.userCode=`\n    void main() {\n      ${s} resRC = getOutputCoords();\n      setOutput(getA(${r}));\n    }\n    `}}class YT{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const s=bw(this.rank),r=Xk("rc",this.rank),a=new Array(this.rank);for(let e=0;e<t.length;e++)a[t[e]]=r[e];const i=`vec2(${a.slice(-2).join()})`,o=`++${r[this.rank-1]} < ${n[this.rank-1]}`,l=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${s} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${l};\n      if(${o}) {\n        result[1] = ${l};\n      }\n      --${r[this.rank-1]};\n      if(++${r[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${l};\n        if(${o}) {\n          result[3] = ${l};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function KT(e,t,n){const s=(0,h.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new YT(e.shape,t):new qT(e.shape,t);return n.runWebGLProgram(s,[e],e.dtype)}function XT(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;return function(e,t,n,s){const r=t,a=e.shape.length,i=h.util.parseAxisParam(r,e.shape);let o=i;const l=h.backend_util.getAxesPermutation(o,a),u=null!=l;let c=e;u&&(c=KT(e,l,s),o=h.backend_util.getInnerMostAxes(o.length,a)),h.backend_util.assertAxesAreInnerMostDims("sum",o,a);const[d,p]=h.backend_util.computeOutAndReduceShapes(c.shape,o);let f=d;n&&(f=h.backend_util.expandShapeToKeepDim(d,i));const m=h.util.sizeFromShape(p),g=VT({inputs:{x:c},attrs:{shape:[h.util.sizeFromShape(e.shape)/m,m]},backend:s}),y=jT(g,(0,h.sumOutType)(e.dtype),"sum",s),b=VT({inputs:{x:y},attrs:{shape:f},backend:s});return s.disposeIntermediateTensorInfo(g),s.disposeIntermediateTensorInfo(y),u&&s.disposeIntermediateTensorInfo(c),b}(r,a,i,n)}const ZT={kernelName:h.Sum,backendName:"webgl",kernelFunc:XT};function QT(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{perm:a}=s,i=n,o=r.shape.length,l=new Array(o);for(let e=0;e<l.length;e++)l[e]=r.shape[a[e]];let u;if(i.shouldExecuteOnCPU([r])){const e=i.texData.get(r.dataId).values,t=Yk(e,r.shape,r.dtype,a,l);u=i.makeTensorInfo(l,r.dtype),i.texData.get(u.dataId).values=t}else u=KT(r,a,i);return u}const JT={kernelName:h.Transpose,backendName:"webgl",kernelFunc:QT};function eS({a:e,b:t,transposeA:n,transposeB:s,backend:r,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:o=0,activation:l=null}){const u=e.shape.length,c=t.shape.length,d=n?e.shape[u-2]:e.shape[u-1],p=s?t.shape[c-1]:t.shape[c-2],f=n?e.shape[u-1]:e.shape[u-2],m=s?t.shape[c-2]:t.shape[c-1],g=e.shape.slice(0,-2),y=t.shape.slice(0,-2),b=h.util.sizeFromShape(g),x=h.util.sizeFromShape(y),v=h.broadcast_util.assertAndGetBroadcastShape(e.shape.slice(0,-2),t.shape.slice(0,-2)).concat([f,m]);h.util.assert(d===p,()=>`Error in matMul: inner shapes (${d}) and (${p}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${s} must match.`);const w=n?[b,d,f]:[b,f,d],k=s?[x,m,p]:[x,p,m],T=VT({inputs:{x:e},backend:r,attrs:{shape:w}}),S=VT({inputs:{x:t},backend:r,attrs:{shape:k}}),N=[T,S],I=Math.max(b,x),C=n?T.shape[1]:T.shape[2],A=null!=a,E=null!=i,$="leakyrelu"===l,R=null!=l?MT(l,!0):null;let _;if((1===f||1===m)&&C>1e3&&!1===(A||E||$||null!=R)){let e=T,t=S;n&&(e=QT({inputs:{x:T},backend:r,attrs:{perm:[0,2,1]}}),N.push(e)),s&&(t=QT({inputs:{x:S},backend:r,attrs:{perm:[0,2,1]}}),N.push(t));const a=1===m;let i=e;1!==m&&(i=VT({inputs:{x:e},backend:r,attrs:{shape:[I,C,1]}}),N.push(i));const o=1===m?2:1;let l=t;a&&(l=VT({inputs:{x:t},backend:r,attrs:{shape:[I,1,C]}}),N.push(l));const u=BT({inputs:{a:i,b:l},backend:r});_=XT({inputs:{x:u},backend:r,attrs:{axis:o,keepDims:!0}}),N.push(u)}else{const l=(0,h.upcastType)(e.dtype,t.dtype),u=new zT(w,k,[I,f,m],n,s,A,R,E,$),c=[T,S];if(null!=a&&c.push(a),E&&c.push(i),$){const e=r.makeTensorInfo([],"float32",h.util.createScalarValue(o,"float32"));c.push(e),N.push(e)}_=r.runWebGLProgram(u,c,l)}const D=VT({inputs:{x:_},backend:r,attrs:{shape:v}});N.push(_);for(const e of N)r.disposeIntermediateTensorInfo(e);return D}const tS={kernelName:h._FusedMatMul,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:d}=s;return eS({a:r,b:a,transposeA:l,transposeB:u,backend:n,bias:i,preluActivationWeights:o,leakyreluAlpha:d,activation:c})}},nS="return abs(x);",sS={kernelName:h.Abs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])&&"complex64"!==s.dtype){const e=n.texData.get(s.dataId),t=Fk(e.values);return n.makeTensorInfo(s.shape,s.dtype,t)}let r;return r=(0,h.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new cT(s.shape,nS):new rT(s.shape,nS),n.runWebGLProgram(r,[s],s.dtype)}},rS=FT({opSnippet:aT+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),aS={kernelName:h.Acos,backendName:"webgl",kernelFunc:rS},iS=FT({opSnippet:aT+"\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),oS={kernelName:h.Acosh,backendName:"webgl",kernelFunc:iS},lS="return a + b;",uS=OT({opSnippet:lS,packedOpSnippet:lS,supportsComplex:!0,cpuKernelImpl:tk}),cS={kernelName:h.Add,backendName:"webgl",kernelFunc:uS};class dS{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map((e,t)=>`T${t}`);const n=[];this.variableNames.forEach(e=>{n.push(`float v${e} = get${e}AtOutCoords();`)});const s=this.variableNames.map(e=>`v${e}`).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${s};\n        setOutput(result);\n      }\n    `}}class hS{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map((e,t)=>`T${t}`);const n=[];this.variableNames.forEach(e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)});const s=this.variableNames.map(e=>`v${e}`).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${s};\n        setOutput(result);\n      }\n    `}}const pS={kernelName:h.AddN,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,r=n;if(1===r.length)return TT({inputs:{x:r[0]},backend:s});if(r.length>(0,h.env)().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(r.length/2),n=e({inputs:r.slice(0,t),backend:s}),a=e({inputs:r.slice(t),backend:s});return e({inputs:[n,a],backend:s})}const a=r.map(e=>e.dtype).reduce((e,t)=>(0,h.upcastType)(e,t)),i=r.map(e=>e.shape),o=(0,h.env)().getBool("WEBGL_PACK")?new hS(r[0].shape,i):new dS(r[0].shape,i);return s.runWebGLProgram(o,r,a)}},fS={kernelName:h.All,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=h.util.parseAxisParam(a,r.shape);let u=l;const c=h.backend_util.getAxesPermutation(u,o);let d=r;null!=c&&(d=QT({inputs:{x:r},backend:n,attrs:{perm:c}}),u=h.backend_util.getInnerMostAxes(u.length,o)),h.backend_util.assertAxesAreInnerMostDims("all",u,o);const[p,f]=h.backend_util.computeOutAndReduceShapes(d.shape,u),m=VT({inputs:{x:d},backend:n,attrs:{shape:[-1,h.util.sizeFromShape(f)]}}),g=jT(m,m.dtype,"all",n);let y;return y=VT(i?{inputs:{x:g},backend:n,attrs:{shape:h.backend_util.expandShapeToKeepDim(p,l)}}:{inputs:{x:g},backend:n,attrs:{shape:p}}),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=c&&n.disposeIntermediateTensorInfo(d),y}},mS={kernelName:h.Any,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=h.util.parseAxisParam(a,r.shape);let u=l;const c=h.backend_util.getAxesPermutation(u,o);let d=r;null!=c&&(d=QT({inputs:{x:r},backend:n,attrs:{perm:c}}),u=h.backend_util.getInnerMostAxes(u.length,o)),h.backend_util.assertAxesAreInnerMostDims("any",u,o);const[p,f]=h.backend_util.computeOutAndReduceShapes(d.shape,u),m=VT({inputs:{x:d},backend:n,attrs:{shape:[-1,h.util.sizeFromShape(f)]}}),g=jT(m,m.dtype,"any",n);let y;return y=VT(i?{inputs:{x:g},backend:n,attrs:{shape:h.backend_util.expandShapeToKeepDim(p,l)}}:{inputs:{x:g},backend:n,attrs:{shape:p}}),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=c&&n.disposeIntermediateTensorInfo(d),y}};class gS{constructor(e,t,n){this.variableNames=["A"];const{windowSize:s,batchSize:r,outSize:a}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[r,a];const i="max"===t?">":"<",o=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${s}; i++) {\n          int inIdx = ${o};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${i} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class yS{constructor(e,t,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,h.util.assert(e.length>2,()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`);const r=e[e.length-1],a=Math.ceil(r/t);this.outputShape=e.slice(0,-1),a>1&&this.outputShape.push(a),s||this.variableNames.push("bestIndicesA");const i=this.outputShape,o=i.length,l=bw(o),u=Zk("coords",o);let c,d;if(1===a){d=o+1;const e=bw(d);c=`\n        ${e} sourceLocR = ${e}(${u.join()}, 0);\n        ++${u[o-1]};\n        ${e} sourceLocG = ${e}(${u.join()}, 0);\n        ++${u[o-2]};\n        ${e} sourceLocA = ${e}(${u.join()}, 0);\n        --${u[o-1]};\n        ${e} sourceLocB = ${e}(${u.join()}, 0);\n        --${u[o-2]};`}else d=o,c=`\n        ${l} sourceLocR = coords;\n        ++${u[o-1]};\n        ${l} sourceLocG = coords;\n        ++${u[o-2]};\n        ${l} sourceLocA = coords;\n        --${u[o-1]};\n        ${l} sourceLocB = coords;\n        --${u[o-2]};`;const p=["x","y","z","w","u","v"].slice(0,d),f="."+p[d-1],m=p.map(e=>"int "+e),g=Zk("sourceLocR",d-1).concat("inIdx.r"),y=Zk("sourceLocG",d-1).concat("inIdx.g"),b=Zk("sourceLocB",d-1).concat("inIdx.b"),x=Zk("sourceLocA",d-1).concat("inIdx.a"),v="max"===n?"greaterThan":"lessThan",w=s?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()}),\n                             getBestIndicesAChannel(${x.join()})));`,k=`vec4(\n            getAChannel(${g.join()}),\n            hasNextCol ? getAChannel(${y.join()}) : 0.,\n            hasNextRow ? getAChannel(${b.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${x.join()}) : 0.)`,T=s?"":`\n      float getBestIndicesAChannel(${m.join()}) {\n        return getChannel(getBestIndicesA(${p.join()}),\n                                          vec2(${p.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${m.join()}) {\n        return getChannel(getA(${p.join()}),\n                               vec2(${p.slice(-2).join()}));\n      }\n      ${T}\n      void main() {\n        ${l} coords = getOutputCoords();\n        bool hasNextCol = ${u[o-1]} < ${i[o-1]-1};\n        bool hasNextRow = ${u[o-2]} < ${i[o-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},\n          sourceLocB${f}, sourceLocA${f}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${k};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${k};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${v}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function bS(e,t,n,s=null){let r=t.shape[0],a=t.shape[1];null!=s&&(r=s.shape[0],a=s.shape[1]);const i=h.backend_util.computeOptimalWindowSize(a),o={windowSize:i,inSize:a,batchSize:r,outSize:Math.ceil(a/i)},l=new gS(o,n,null==s),u=[t];null!=s&&u.push(s);const c=e.runWebGLProgram(l,u,"int32");if(1===c.shape[1])return c;const d=bS(e,t,n,c);return e.disposeIntermediateTensorInfo(c),d}function xS(e,t,n,s=null){const r=null!=s?s.shape:t.shape,a=r[r.length-1],i=h.backend_util.computeOptimalWindowSize(a),o=new yS(r,i,n,null==s),l=null==s?[t]:[t,s],u=e.runWebGLProgram(o,l,"int32");if(u.shape.length===t.shape.length){const s=xS(e,t,n,u);return e.disposeIntermediateTensorInfo(u),s}return u}function vS(e,t,n,s){const r=[n];if(h.backend_util.assertAxesAreInnerMostDims("arg"+s.charAt(0).toUpperCase()+s.slice(1),r,t.shape.length),!(0,h.env)().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],a=e.texData.get(t.dataId);let i=t;null!==a&&a.isPacked&&(i=e.unpackTensor(t),n.push(i));const[o,l]=h.backend_util.computeOutAndReduceShapes(i.shape,r),u=h.util.sizeFromShape(l),c=VT({inputs:{x:i},backend:e,attrs:{shape:[-1,u]}});n.push(c);const d=bS(e,c,s);n.push(d);const p=VT({inputs:{x:d},backend:e,attrs:{shape:o}});return n.forEach(t=>e.disposeIntermediateTensorInfo(t)),p}return xS(e,t,s)}const wS={kernelName:h.ArgMax,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;let i=h.util.parseAxisParam(a,r.shape);const o=h.backend_util.getAxesPermutation(i,r.shape.length);let l=r;const u=[];null!=o&&(l=QT({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=h.backend_util.getInnerMostAxes(i.length,l.shape.length)),h.backend_util.assertAxesAreInnerMostDims("argMax",[i[0]],l.shape.length);const c=vS(n,l,i[0],"max");return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),c}},kS={kernelName:h.ArgMin,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;let i=h.util.parseAxisParam(a,r.shape);const o=h.backend_util.getAxesPermutation(i,r.shape.length);let l=r;const u=[];null!=o&&(l=QT({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=h.backend_util.getInnerMostAxes(i.length,l.shape.length)),h.backend_util.assertAxesAreInnerMostDims("argMin",[i[0]],l.shape.length);const c=vS(n,l,i[0],"min");return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),c}},TS=FT({opSnippet:aT+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),SS={kernelName:h.Asin,backendName:"webgl",kernelFunc:TS},NS=FT({opSnippet:aT+"return log(x + sqrt(x * x + 1.0));"}),IS={kernelName:h.Asinh,backendName:"webgl",kernelFunc:NS},CS=FT({opSnippet:aT+"\n  return atan(x);\n"}),AS={kernelName:h.Atan,backendName:"webgl",kernelFunc:CS},ES=OT({opSnippet:xT+"\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+wT+"\n  return result;\n"}),$S={kernelName:h.Atan2,backendName:"webgl",kernelFunc:ES},RS=FT({opSnippet:aT+"\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),_S={kernelName:h.Atanh,backendName:"webgl",kernelFunc:RS};class DS{constructor(e,t,n,s=!1,r=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideHeight,o=e.strideWidth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterHeight,d=e.effectiveFilterWidth,h=e.padInfo.top,p=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${o});\n        const ivec2 pads = ivec2(${h}, ${p});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${d};\n                wC += ${u}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${s?r?m:g:`wR * ${d} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(b="avgValue / max(count, 1.0)");const x=4*Math.floor(a/4),v=a%4,w=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${h}, ${p});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${l}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${u};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              getValue(batch, xR, xC + 3 * ${u}, d)\n            );\n\n            ${w}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${w}\n          } else if (${2===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${w}\n          } else if (${3===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              initializationValue\n            );\n\n            ${w}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class FS{constructor(e,t,n,s=!1,r=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideDepth,o=e.strideHeight,l=e.strideWidth,u=e.dilationDepth,c=e.dilationHeight,d=e.dilationWidth,h=e.effectiveFilterDepth,p=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,y=e.padInfo.left;this.outputShape=e.outShape;const b="avg"===t;let x="0.0";if(b||(x="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${o}, ${l});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${h};\n              wD += ${u}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${p};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${d}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${s?r?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${p} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let v=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(v="avgValue / max(count, 1.0)");const w=4*Math.floor(a/4),k=a%4,T=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${o}, ${l});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${h};\n            wD += ${u}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${p};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${w}; wC += 4) {\n              int xC = xCCorner + wC * ${d};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${d}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${d}, ch)\n              );\n\n              ${T}\n            }\n\n            int xC = xCCorner + ${w};\n            if (${1===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${T}\n            } else if (${2===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${T}\n            } else if (${3===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${d}, ch),\n                initializationValue\n              );\n\n              ${T}\n            }\n          }\n        }\n        setOutput(${v});\n      }\n    `}}const OS={kernelName:h.AvgPool,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;tw(r,"avgPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;h.util.assert(h.backend_util.eitherStridesOrDilationsAreOne(i,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`);const u=h.backend_util.computePool2DInfo(r.shape,a,i,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&h.util.arraysEqual(u.inShape,u.outShape))return TT({inputs:{x:r},backend:n});const c=new DS(u,"avg",!1);return n.runWebGLProgram(c,[r],"float32")}},MS={kernelName:h.AvgPool3D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s,c=h.backend_util.computePool3DInfo(r.shape,a,i,[1,1,1],o,l,u),d=new FS(c,"avg",!1);return n.runWebGLProgram(d,[r],"float32")}};class zS{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterHeight,l=e.effectiveFilterWidth,u=o-1-e.padInfo.top,c=l-1-e.padInfo.left,d=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${u}, ${c});\n      const float avgMultiplier = float(${d});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n            wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${l};\n            wC+= ${i}) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class LS{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,d=e.effectiveFilterHeight,h=e.effectiveFilterWidth,p=c-1-e.padInfo.front,f=d-1-e.padInfo.top,m=h-1-e.padInfo.left,g=1/(t*n*s);this.userCode=`\n      const ivec3 pads = ivec3(${p}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${r}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${d};\n              wR += ${l}) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${h};\n                wC += ${u}) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const PS={kernelName:h.AvgPool3DGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a,{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=s,d=h.backend_util.computePool3DInfo(i.shape,o,l,[1,1,1],u,c),p=new LS(d);return n.runWebGLProgram(p,[r],i.dtype)}},BS={kernelName:h.AvgPoolGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a;tw([r,a],"avgPoolGrad");const{filterSize:o,strides:l,pad:u}=s,c=h.backend_util.computePool2DInfo(i.shape,o,l,1,u),d=new zS(c);return n.runWebGLProgram(d,[r],i.dtype)}},WS={kernelName:h.BatchMatMul,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a}=t,{transposeA:i,transposeB:o}=s;return eS({a:r,b:a,transposeA:i,transposeB:o,backend:n})}};class VS{constructor(e,t,n,s,r,a){this.outputShape=[],this.variableNames=["x","mean","variance"],h.backend_util.assertAndGetBroadcastShape(e,t),h.backend_util.assertAndGetBroadcastShape(e,n);let i="0.0";null!=s&&(h.backend_util.assertAndGetBroadcastShape(e,s),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="1.0";null!=r&&(h.backend_util.assertAndGetBroadcastShape(e,r),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${o};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class US{constructor(e,t,n,s,r,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],h.backend_util.assertAndGetBroadcastShape(e,t),h.backend_util.assertAndGetBroadcastShape(e,n);let i="vec4(0.0)";null!=s&&(h.backend_util.assertAndGetBroadcastShape(e,s),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=r&&(h.backend_util.assertAndGetBroadcastShape(e,r),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${o};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const GS={kernelName:h.FusedBatchNorm,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,mean:r,variance:a,offset:i,scale:o}=e;h.util.assert(r.shape.length===a.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),h.util.assert(null==i||r.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),h.util.assert(null==o||r.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let{varianceEpsilon:l}=n;null==l&&(l=.001);const u=[s,r,a];let c=null;null!=i&&(c=i.shape,u.push(i));let d=null;null!=o&&(d=o.shape,u.push(o));const p=(0,h.env)().getBool("WEBGL_PACK_NORMALIZATION")?new US(s.shape,r.shape,a.shape,c,d,l):new VS(s.shape,r.shape,a.shape,c,d,l);return t.runWebGLProgram(p,u,u[0].dtype)}};class HS{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=bw(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const n=function(e){if(1===e)return"sourceLoc";if(e<=6)return jS.slice(0,e).map(e=>"sourceLoc."+e).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let s;s=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map((e,t)=>`sourceLoc.${jS[t]} = start[${t}] + coords.${jS[t]};`).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${s}\n        setOutput(getSource(${n}));\n      }\n    `}}const jS=["x","y","z","w","u","v"];class qS{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const t=bw(this.rank),n=Zk("coords",this.rank),s=Zk("sourceLoc",this.rank),r=1===this.rank?"sourceLoc":`vec2(${s.slice(-2).join()})`,a=`getChannel(getSource(${s.join()}), ${r})`,i=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${s[this.rank-1]};\n        result.y = ${a};\n        --${s[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${s[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${s[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,l=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map((e,t)=>`start[${t}]`).join()});`:e.map((e,t)=>`${s[t]} = ${n[t]} + start[${t}];`).join("\n");this.userCode=`\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${l}\n        vec4 result = vec4(0.);\n        ${i}\n        ${o}\n        setOutput(result);\n      }\n    `}}function YS(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,size:i}=s,[o,l]=h.slice_util.parseSliceParams(r,a,i);if(h.slice_util.assertParamsValid(r,o,l),0===h.util.sizeFromShape(l))return n.makeTensorInfo(l,r.dtype,[]);if(n.shouldExecuteOnCPU([r])||"string"===r.dtype){const e=n.texData.get(r.dataId),t=Ok(e.values,o,l,r.shape,r.dtype);return n.makeTensorInfo(l,r.dtype,t)}const{isPacked:u}=n.texData.get(r.dataId),c=h.slice_util.isSliceContinous(r.shape,o,l);if(u||!c){const e=(0,h.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new qS(l):new HS(l),t=[o];return n.runWebGLProgram(e,[r],r.dtype,t)}return n.uploadToGPU(r.dataId),function(e,t,n,s){const r=s.texData.get(e.dataId),a=s.makeTensorInfo(n,e.dtype),i=s.texData.get(a.dataId);Object.assign(i,r),i.refCount=1,i.shape=n,i.dtype=e.dtype;let o=h.slice_util.computeFlatOffset(t,h.util.computeStrides(e.shape));r.slice&&(o+=r.slice.flatOffset),i.slice={flatOffset:o,origDataId:r.slice&&r.slice.origDataId||e.dataId};const l=s.dataRefCount.get(i.slice.origDataId)||1;return s.dataRefCount.set(i.slice.origDataId,l+1),a}(r,o,l,n)}const KS={kernelName:h.Slice,backendName:"webgl",kernelFunc:YS},XS={kernelName:h.BatchToSpaceND,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,crops:i}=s;h.util.assert(r.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");const o=a.reduce((e,t)=>e*t),l=h.backend_util.getReshaped(r.shape,a,o),u=h.backend_util.getPermuted(l.length,a.length),c=h.backend_util.getReshapedPermuted(r.shape,a,o),d=h.backend_util.getSliceBeginCoords(i,a.length),p=h.backend_util.getSliceSize(c,i,a.length),f=[],m=VT({inputs:{x:r},backend:n,attrs:{shape:l}}),g=QT({inputs:{x:m},backend:n,attrs:{perm:u}}),y=VT({inputs:{x:g},backend:n,attrs:{shape:c}}),b=YS({inputs:{x:y},backend:n,attrs:{begin:d,size:p}});return f.push(m),f.push(g),f.push(y),f.forEach(e=>n.disposeIntermediateTensorInfo(e)),b}},ZS={kernelName:h.Bincount,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i}=s,o=n.readSync(r.dataId),l=n.readSync(a.dataId),u=nk(o,l,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,u)}},QS={kernelName:h.BitwiseAnd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{a:s,b:r}=t,a=(0,h.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS"),i=(0,h.env)().getNumber("WEBGL_VERSION");if(n.shouldExecuteOnCPU([s,r])||1===i){const e=n.texData.get(s.dataId).values,t=n.texData.get(r.dataId).values,[a,i]=rk(s.shape,r.shape,e,t,s.dtype),o=n.makeTensorInfo(i,s.dtype);return n.texData.get(o.dataId).values=a,o}let o;return o=a?new kT("\n  int r = int(a.r) & int(b.r);\n  int g = int(a.g) & int(b.g);\n  int rb = int(a.b) & int(b.b);\n  int ra = int(a.a) & int(b.a);\n  return vec4(r, g, rb, ra);\n",s.shape,r.shape,!1):new vT("\n  return float(int(a.r) & int(b.r));\n",s.shape,r.shape),n.runWebGLProgram(o,[s,r],s.dtype)}},JS={kernelName:h.BroadcastArgs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:s,s1:r}=t,a=n.readSync(s.dataId),i=n.readSync(r.dataId),o=h.backend_util.assertAndGetBroadcastShape(Array.from(a),Array.from(i));return n.makeTensorInfo([o.length],"int32",Int32Array.from(o))}},eN=OT({opSnippet:"return float(a != b);",cpuKernelImpl:Nk,dtype:"bool"}),tN={kernelName:h.NotEqual,backendName:"webgl",kernelFunc:eN};function nN(e){const{inputs:t,backend:n}=e,{input:s}=t;return TT({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.real},backend:n})}const sN={kernelName:h.Real,backendName:"webgl",kernelFunc:nN},rN={kernelName:h.Cast,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s,attrs:r}=t,{x:a}=n,{dtype:i}=r;if("complex64"===i){if("complex64"===a.dtype)return TT({inputs:{x:a},backend:s});const t=h.zeros(a.shape),n=e({inputs:{x:a},backend:s,attrs:{dtype:"float32"}}),r=NT({inputs:{real:n,imag:t},backend:s});return t.dispose(),s.disposeIntermediateTensorInfo(n),r}if("complex64"===a.dtype){const t=nN({inputs:{input:a},backend:s}),n=e({inputs:{x:t},backend:s,attrs:{dtype:i}});return s.disposeIntermediateTensorInfo(t),n}if(!h.util.hasEncodingLoss(a.dtype,i)){const e=TT({inputs:{x:a},backend:s});return{dataId:e.dataId,shape:e.shape,dtype:i}}if(s.shouldExecuteOnCPU([a])){const e=s.texData.get(a.dataId).values,[t,n,r]=ak(e,a.shape,a.dtype,i);return s.makeTensorInfo(t,n,r)}if("int32"===i)return function(e,t){const n=new rT(e.shape,"return float(int(x));"),s=t.runWebGLProgram(n,[e],"int32");return{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}(a,s);if("bool"===i){const e=s.makeTensorInfo([],"bool",h.util.getTypedArrayFromDType("bool",1)),t=eN({inputs:{a,b:e},backend:s});return s.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${a.dtype} to ${i}`)}},aN="return ceil(x);",iN=FT({opSnippet:aN,packedOpSnippet:aN,cpuKernelImpl:ik}),oN={kernelName:h.Ceil,backendName:"webgl",kernelFunc:iN};class lN{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class uN{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const cN={kernelName:h.ClipByValue,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{clipValueMin:a,clipValueMax:i}=s;let o;o=(0,h.env)().getBool("WEBGL_PACK_CLIP")?new uN(r.shape):new lN(r.shape);const l=[[a],[i]];return n.runWebGLProgram(o,[r],r.dtype,l)}};class dN{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function hN(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const pN={kernelName:h.ComplexAbs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=n.texData.get(s.dataId),a=new dN(s.shape),i=[hN(s,r.complexTensorInfos.real),hN(s,r.complexTensorInfos.imag)];return n.runWebGLProgram(a,i,i[0].dtype)}};class fN{constructor(e){this.outputShape=[],this.outputShape=h.backend_util.computeOutShape(e,1),this.variableNames=e.map((e,t)=>`T${t}`);const t=new Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){const s=t[e-1];n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${s}));`)}const s=t.length,r=t[t.length-1];n.push(`else setOutput(getT${s}(yR, yC-${r}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class mN{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=h.backend_util.computeOutShape(e,t);const n=this.outputShape,s=n.length,r=bw(s),a=Zk("coords",s),i=["x","y","z","w","u","v"].slice(0,s);this.variableNames=e.map((e,t)=>`T${t}`);const o=new Array(e.length-1);o[0]=e[0][t];for(let n=1;n<o.length;n++)o[n]=o[n-1]+e[n][t];const l=i[t],u=i.slice(-2),c=i.join();let d=`if (${l} < ${o[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${u.join()}));\n        }`;for(let e=1;e<o.length;e++){const t=o[e-1];d+=`\n        if (${l} < ${o[e]}  && ${l} >= ${o[e-1]}) {\n          return getChannel(\n            getT${e}(${gN(i,l,t)}),\n            vec2(${gN(u,l,t)}));\n        }`}const p=o.length,f=o[o.length-1];d+=`\n        return getChannel(\n          getT${p}(${gN(i,l,f)}),\n          vec2(${gN(u,l,f)}));`,this.userCode=`\n      float getValue(${i.map(e=>"int "+e)}) {\n        ${d}\n      }\n\n      void main() {\n        ${r} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[s-1]} = ${a[s-1]} + 1;\n        if (${a[s-1]} < ${n[s-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[s-2]} = ${a[s-2]} + 1;\n        if (${a[s-2]} < ${n[s-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[s-1]} = ${a[s-1]} - 1;\n        if (${a[s-2]} < ${n[s-2]} &&\n            ${a[s-1]} < ${n[s-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function gN(e,t,n){const s=e.indexOf(t);return e.map((e,t)=>t===s?`${e} - ${n}`:e).join()}function yN(e){const{inputs:t,backend:n}=e,{input:s}=t;return TT({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.imag},backend:n})}const bN={kernelName:h.Imag,backendName:"webgl",kernelFunc:yN};function xN(e,t,n){const s=e[0].dtype;if("complex64"===s){const s=e.map(e=>nN({inputs:{input:e},backend:n})),r=e.map(e=>yN({inputs:{input:e},backend:n})),a=xN(s,t,n),i=xN(r,t,n),o=NT({inputs:{real:a,imag:i},backend:n});return s.forEach(e=>n.disposeIntermediateTensorInfo(e)),r.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),o}let r=n.shouldExecuteOnCPU(e);if("string"===s&&(r=!0),r){const r=e.map(e=>{const s=h.util.sizeFromShape(e.shape.slice(t));return VT({inputs:{x:e},backend:n,attrs:{shape:[-1,s]}})}),a=r.map(e=>({vals:n.readSync(e.dataId),shape:e.shape})),i=h.backend_util.computeOutShape(r.map(e=>e.shape),1),o=1===r[0].shape[0],l=ok(a,i,s,o),u=h.backend_util.computeOutShape(e.map(e=>e.shape),t),c=n.makeTensorInfo(u,s,l);return r.forEach(e=>n.disposeIntermediateTensorInfo(e)),c}const a=e.filter(e=>h.util.sizeFromShape(e.shape)>0),i=(0,h.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&a[0].shape.length>1;if(1===a.length){const t=i?new rT(e[0].shape,uT):new cT(e[0].shape,uT);return n.runWebGLProgram(t,e,s)}const o=(0,h.env)().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(a.length>o){const e=[];for(let s=0;s<a.length;s+=o){const r=a.slice(s,s+o);e.push(xN(r,t,n))}const s=xN(e,t,n);for(const t of e)n.disposeIntermediateTensorInfo(t);return s}if(i){const e=new mN(a.map(e=>e.shape),t);return n.runWebGLProgram(e,a,s)}const{tensors2D:l,outShape:u}=function(e,t,n){const s=h.backend_util.computeOutShape(e.map(e=>e.shape),t);return{tensors2D:e.map(e=>VT({inputs:{x:e},attrs:{shape:[-1,h.util.sizeFromShape(e.shape.slice(t))]},backend:n})),outShape:s}}(a,t,n),c=new fN(l.map(e=>e.shape)),d=n.runWebGLProgram(c,l,s);l.forEach(e=>n.disposeIntermediateTensorInfo(e));const p=VT({inputs:{x:d},attrs:{shape:u},backend:n});return n.disposeIntermediateTensorInfo(d),p}function vN(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s,a=h.util.parseAxisParam(r,t[0].shape)[0],i=t.map(e=>e.shape);h.backend_util.assertParamsConsistent(i,a);const o=h.backend_util.computeOutShape(t.map(e=>e.shape),a);if(0===h.util.sizeFromShape(o))return n.makeTensorInfo(o,t[0].dtype,[]);const l=t.filter(e=>h.util.sizeFromShape(e.shape)>0);return 1===l.length?TT({inputs:{x:l[0]},backend:n}):xN(l,a,n)}const wN={kernelName:h.Concat,backendName:"webgl",kernelFunc:vN};class kN{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.padInfo.top,i=e.padInfo.left,o=e.strideHeight,l=e.strideWidth,u=e.dilationHeight,c=e.dilationWidth,d=e.filterHeight,h=e.filterWidth,p=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,y=m?2:3,b=m?3:1;let x="",v="";n&&(x=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,v="result = activation(result);");const w=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${x}\n\n      const ivec2 strides = ivec2(${o}, ${l});\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${y}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${d}; wR++) {\n          int xR = xRCorner + wR * ${u};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${h}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${p}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${p}) *\n                    getW(wR, wC, ${p}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${p}, xR, xC) *\n                    getW(wR, wC, ${p}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${p}, d2),\n                getW(wR, wC, ${p} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${p}),\n                  getX(batch, xR, xC, ${p} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${p}, xR, xC),\n                  getX(batch, ${p} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${p}, d2),\n                getW(wR, wC, ${p} + 1, d2),\n                getW(wR, wC, ${p} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${p}),\n                  getX(batch, xR, xC, ${p} + 1),\n                  getX(batch, xR, xC, ${p} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${p}, xR, xC),\n                  getX(batch, ${p} + 1, xR, xC),\n                  getX(batch, ${p} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${w}\n        ${v}\n        setOutput(result);\n      }\n    `}}class TN{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,s=e.padInfo.left,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.filterDepth,d=e.filterHeight,h=e.filterWidth,p=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${r}, ${a}, ${i});\n      const ivec3 pads = ivec3(${t}, ${n}, ${s});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d}; wR++) {\n            int xR = xRCorner + wR * ${l};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h}; wC++) {\n              int xC = xCCorner + wC * ${u};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${p}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${p}) *\n                  getW(wF, wR, wC, ${p}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${p}),\n                  getX(batch, xF, xR, xC, ${p} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${p}, d2),\n                  getW(wF, wR, wC, ${p} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${p}),\n                  getX(batch, xF, xR, xC, ${p} + 1),\n                  getX(batch, xF, xR, xC, ${p} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${p}, d2),\n                  getW(wF, wR, wC, ${p} + 1, d2),\n                  getW(wF, wR, wC, ${p} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class SN{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=Sw(this.outputShape.length);const a=e.padInfo.left,i=e.strideWidth,o=e.dilationWidth,l=e.filterHeight,u=e.filterWidth,c=u;let d="\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<u;e++)d+=`\n           vec4 xTexelC${2*e};\n           int xTexelC${2*e}Ready;\n           vec4 xTexelC${2*e+1};\n           int xTexelC${2*e+1}Ready;\n           vec4 xC${e};`;d+=`\n     for (int r = 0; r < ${l}; r++) {\n      for (int d1 = 0; d1 < ${e.inChannels}; d1 += 2) {\n       `;for(let e=0;e<u;e++)d+=`\n           xTexelC${2*e} = vec4(0.0);\n           xTexelC${2*e}Ready = 0;\n           xTexelC${2*e+1} = vec4(0.0);\n           xTexelC${2*e+1}Ready = 0;\n           xC${e} = vec4(0.0);`;d+="\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       ";for(let t=0;t<(c+1)/2;t++){const n=2*t;if(d+=`\n           xC = xCCorner + ${n*o};\n           `,1===i){if(n<u&&(a%2==1?(d+=`\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n               `,d+=1===o&&n>0?`\n                 xC${n} = vec4(xTexelC${n-2}.zw, xTexelC${n}.xy);\n                 `:`\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC${n} = vec4(previous.zw, xTexelC${n}.xy);\n                   } else {\n                     xC${n} = vec4(0.0, 0.0, xTexelC${n}.xy);\n                   }\n                   `):d+=`\n                 if (xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 xC${n} = xTexelC${n};\n                 `,n+1<u)){const e=a%2==0?h.util.nearestLargerEven(o):o;o%2==0&&a%2==1||o%2!=0&&a%2!=1?(d+=`\n                   xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                     xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC${n+1}.zw = vec2(0.0);\n                     }\n                     xTexelC${n+1}Ready = 1;\n                   }\n                   `,d+=o>1?`\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC${n+1} = vec4(previous.zw, xTexelC${n+1}.xy);\n                     } else {\n                      xC${n+1} = vec4(0.0, 0.0, xTexelC${n+1}.xy);\n                     }\n                     `:`\n                     xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.xy);\n                     `):d+=1===e?`\n                     xC${n+1} = xTexelC${n};\n                     `:`\n                     xCOffset = xC + ${e};\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                       xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC${n+1}.zw = vec2(0.0);\n                       }\n                       xTexelC${n+1}Ready = 1;\n                     }\n\n                     xC${n+1} = xTexelC${n+1};\n                     `}}else n<u&&(a%2==1?(d+=`\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${n+1}Ready == 0) {\n                   xTexelC${n+1} = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC${n+1}.zw = vec2(0.0);\n                   }\n                   xTexelC${n+1}Ready = 1;\n                 }\n\n                 xC${n} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n               `,n+1<u&&(d+=`\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC${n+1} = vec4(xTexelC${n+1}.xy, final.xy);\n                 `)):(d+=`\n                 if(xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                   xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n+1}.zw = vec2(0.);\n                   }\n                   xTexelC${n+1}Ready = 1;\n                 }\n\n                 xC${n} = vec4(\n                   xTexelC${n}.xy, xTexelC${n+1}.xy);\n               `,n+1<u&&(d+=`\n                   xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n                 `)));n<u&&(d+=`\n             wTexel = getW(r, ${n}, d1, d2);\n             dotProd += xC${n}.xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ${e.inChannels}) {\n               dotProd += xC${n}.yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           `,n+1<u&&(d+=`\n               wTexel = getW(r, ${n+1}, d1, d2);\n               dotProd += xC${n+1}.xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ${e.inChannels}) {\n                 dotProd += xC${n+1}.yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             `))}d+="\n     }\n   ",d+="\n     }\n   ",d+="\n     }\n   ";let p="",f="";n&&(p=s?`vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ${n}\n         }`:r?`vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ${n}\n         }`:`vec4 activation(vec4 x) {\n           ${n}\n         }`,f="result = activation(result);");const m=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n       ${p}\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ${d}\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ${m}\n         ${f}\n         setOutput(result);\n       }\n     `}}class NN{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=Sw(this.outputShape.length);const{dataFormat:n}=t,s=sw(),r="channelsLast"===n,a=r?1:2,i=r?2:3,o=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${e[2]} && pos < ${e[1]}) {`;let l="";for(let e=0;e<=1;e++)for(let t=0;t<=1;t++)l+=`\n          blockIndex = rc.z + ${t};\n          pos = rc.y + ${e};\n\n          ${o}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${a}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${i}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${r}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*e+t}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*e+t}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${l}\n\n        ${s.output} = result;\n      }\n    `}}function IN(e,t){const n=e.length;return n>=3?t?[...e.slice(0,-3),e[n-3]*e[n-2],e[n-1]]:[...e.slice(0,-3),e[n-3],e[n-2]*e[n-1]]:!t&&1===n&&e[0]>1?[e[0],1]:null}function CN({x:e,filter:t,convInfo:n,backend:s,bias:r=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:o=null}){const l=e.shape,u=s.texData.get(e.dataId),c=n.inChannels,d=l[0]*l[1]*l[2],p=n.outChannels,f="channelsLast"===n.dataFormat,m=!1;let g;const y=[];if(null!=a){const e=IN(a.shape,f);null!=e&&(a=VT({inputs:{x:a},backend:s,attrs:{shape:e}}),y.push(a))}if(null!=r){const e=IN(r.shape,f);null!=e&&(r=VT({inputs:{x:r},backend:s,attrs:{shape:e}}),y.push(r))}if((1!==d&&1!==p||!(c>1e3))&&u.isPacked&&f&&null!=u.texture&&l[2]%2!=0&&h.util.arraysEqual(u.shape.slice(-3),l.slice(-3))){const c=l[0]*l[1]*(l[2]+1),d={dataId:e.dataId,shape:[1,c,n.inChannels],dtype:e.dtype},p=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,h.util.assert(Wv(u.shape,d.shape),()=>`packed reshape ${u.shape} to ${d.shape} isn't free`);const f=VT({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}});y.push(f);const b=eS({a:d,b:f,backend:s,transposeA:!1,transposeB:m,bias:r,activation:o,preluActivationWeights:a,leakyreluAlpha:i}),x=s.texData.get(b.dataId);h.util.assert(x.isPacked,()=>"batchMatMul result is expected to be packed"),u.shape=p,x.shape=n.outShape,g=TT({inputs:{x:b},backend:s}),g.shape=n.outShape,y.push(b)}else{const l=n.outHeight*n.outWidth,u=VT({inputs:{x:e},backend:s,attrs:{shape:f?[n.batchSize,l,n.inChannels]:[n.batchSize,n.inChannels,l]}}),c=VT({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}}),d=eS({a:f?u:c,b:f?c:u,transposeA:!f,transposeB:m,backend:s,bias:r,activation:o,preluActivationWeights:a,leakyreluAlpha:i});g=VT({inputs:{x:d},backend:s,attrs:{shape:n.outShape}}),y.push(u),y.push(c),y.push(d)}for(const e of y)s.disposeIntermediateTensorInfo(e);return g}function AN({x:e,filter:t,convInfo:n,backend:s,bias:r=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:o=null}){const{filterWidth:l,filterHeight:u,inChannels:c,outWidth:d,outHeight:p,dataFormat:f}=n,m="channelsLast"===f,g=l*u*c,y=p*d,b=[n.batchSize,g,y],x=[];if(null!=a){const e=IN(a.shape,m);null!=e&&(a=VT({inputs:{x:a},backend:s,attrs:{shape:e}}),x.push(a))}if(null!=r){const e=IN(r.shape,m);null!=e&&(r=VT({inputs:{x:r},backend:s,attrs:{shape:e}}),x.push(r))}const v=VT({inputs:{x:t},backend:s,attrs:{shape:[1,g,h.util.sizeFromShape(t.shape)/g]}});x.push(v);const w=new NN(b,n),k=[e.shape,[n.padInfo.top,n.padInfo.left],[n.strideHeight,n.strideWidth],[n.dilationHeight,n.dilationWidth],[n.inChannels],[n.filterWidth*n.inChannels],[n.outWidth]],T=s.runWebGLProgram(w,[e],"float32",k),S=VT({inputs:{x:T},backend:s,attrs:{shape:b}});x.push(T),x.push(S);const N=null!=r,I=null!=a,C="leakyrelu"===o,A=o?MT(o,!0):null,E=new zT(m?S.shape:v.shape,m?v.shape:S.shape,m?[n.batchSize,y,n.outChannels]:[n.batchSize,n.outChannels,y],!0,!1,N,A,I,C),$=m?[S,v]:[v,S];if(r&&$.push(r),I&&$.push(a),C){const e=s.makeTensorInfo([],"float32",h.util.createScalarValue(i,"float32"));$.push(e),x.push(e)}const R=s.runWebGLProgram(E,$,"float32"),_=VT({inputs:{x:R},backend:s,attrs:{shape:n.outShape}});x.push(R);for(const e of x)s.disposeIntermediateTensorInfo(e);return _}const EN={kernelName:h.Conv2D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dataFormat:l,dilations:u,dimRoundingMode:c}=s,d=h.backend_util.convertConv2DDataFormat(l),p=h.backend_util.computeConv2DInfo(r.shape,a.shape,i,u,o,c,!1,d);let f;if(1!==p.filterHeight||1!==p.filterWidth||1!==p.dilationHeight||1!==p.dilationWidth||1!==p.strideHeight||1!==p.strideWidth||"SAME"!==p.padInfo.type&&"VALID"!==p.padInfo.type)if(p.strideWidth<=2&&"channelsLast"===d&&(0,h.env)().getBool("WEBGL_EXP_CONV")){const e=new SN(p),t=[[p.padInfo.top,p.padInfo.left],[p.strideHeight,p.strideWidth],[p.dilationHeight,p.dilationWidth],[p.inHeight,p.inWidth]];f=n.runWebGLProgram(e,[r,a],"float32",t)}else if((0,h.env)().getBool("WEBGL_CONV_IM2COL"))f=AN({x:r,filter:a,convInfo:p,backend:n});else{const e=new kN(p);f=n.runWebGLProgram(e,[r,a],"float32")}else f=CN({x:r,filter:a,convInfo:p,backend:n});const m=VT({inputs:{x:f},backend:n,attrs:{shape:p.outShape}});return n.disposeIntermediateTensorInfo(f),m}};class $N{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,r=e.padInfo.left,a="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              ${a?"float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);":"float dyValue = getDy(b, d2, yR, yC);\n              float xValue = getX(b, d1, xR, xC);\n              dotProd += (xValue * dyValue);"}\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class RN{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a="channelsLast"===e.dataFormat,i=t-1-e.padInfo.top,o=n-1-e.padInfo.left,l=a?1:2,u=a?2:3,c=a?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${l}], coords[${u}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class _N{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,r=e.padInfo.front,a=e.padInfo.top,i=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${r};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${a};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${s} - ${i};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class DN{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=t-1-e.padInfo.front,l=n-1-e.padInfo.top,u=s-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${o}, ${l}, ${u});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${r}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${s}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${s} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const FN={kernelName:h.Conv2DBackpropFilter,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:c}=s,d=h.backend_util.convertConv2DDataFormat(l),p=h.backend_util.computeConv2DInfo(r.shape,c,i,1,o,u,!1,d),f=new $N(p);return n.runWebGLProgram(f,[r,a],"float32")}};class ON{constructor(e){this.variableNames=["dy","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"strides",type:"vec2"}],this.outputShape=e.inShape,this.enableShapeUniforms=Sw(this.outputShape.length);const t=e.filterHeight,n=e.filterWidth,s=t-1-e.padInfo.top,r=n-1-e.padInfo.left;this.userCode=`\n      const ivec2 pads = ivec2(${s}, ${r});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n\n        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        vec4 result = vec4(0.);\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / strides[0];\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            int wCPerm = ${n} - 1 - wC;\n\n            float dyC = float(dyCCorner + wC) / strides[1];\n            bool idyCVal = (dyC >= 0.0) && (dyC < ${e.outWidth}.0)\n              && (fract(dyC) == 0.0);\n            int idyC = int(dyC);\n\n            float dyC2 = float(dyCCorner + wC + 1) / strides[1];\n            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${e.outWidth}.0)\n              && (fract(dyC2) == 0.0);\n            int idyC2 = int(dyC2);\n\n            if (idyCVal && idyCVal2) {\n              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?\n                  dySample : getDy(batch, idyR, idyC2, d2);\n\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n\n                dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample2.xy : dySample2.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal) {\n              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal2) {\n              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC2, d2);\n                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            }\n          }\n        }\n        setOutput(result);\n      }\n    `}}const MN={kernelName:h.Conv2DBackpropInput,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{inputShape:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:c}=s,d=h.backend_util.convertConv2DDataFormat(u),p=h.backend_util.computeConv2DInfo(i,a.shape,o,1,l,c,!1,d);if((0,h.env)().getBool("WEBGL_PACK_CONV2DTRANSPOSE")&&"channelsLast"===d){const e=[[p.strideHeight,p.strideWidth]],t=new ON(p);return n.runWebGLProgram(t,[r,a],"float32",e)}{const e=new RN(p);return n.runWebGLProgram(e,[r,a],"float32")}}},zN={kernelName:h.Conv3D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s,u=h.backend_util.computeConv3DInfo(r.shape,a.shape,i,l,o),c=new TN(u);return n.runWebGLProgram(c,[r,a],"float32")}},LN={kernelName:h.Conv3DBackpropFilterV2,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,filterShape:l}=s,u=h.backend_util.computeConv3DInfo(r.shape,l,i,1,o),c=new _N(u);return n.runWebGLProgram(c,[r,a],"float32")}},PN={kernelName:h.Conv3DBackpropInputV2,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{pad:i,strides:o,inputShape:l}=s,u=h.backend_util.computeConv3DInfo(l,a.shape,o,1,i),c=new DN(u);return n.runWebGLProgram(c,[r,a],"float32")}},BN=FT({opSnippet:DT+"\n  return cos(x);\n",packedOpSnippet:`\n  vec4 result = cos(x);\n  bvec4 isNaN = isnan(x);\n  ${wT}\n  return result;\n`}),WN={kernelName:h.Cos,backendName:"webgl",kernelFunc:BN},VN=FT({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),UN={kernelName:h.Cosh,backendName:"webgl",kernelFunc:VN};class GN{constructor(e,t,n,s,r){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,i,o,l]=e,[u]=t,[c,d]=n;this.outputShape=[u,c,d,l];const h="bilinear"===s?1:0,[p,f]=[i-1+".0",o-1+".0"],[m,g,y]=c>1?[""+(i-1)/(c-1),"(y2-y1) * height_ratio",`y1*${p} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${p}`],[b,x,v]=d>1?[""+(o-1)/(d-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${p} ) {\n          setOutput(float(${r}));\n          return;\n        }\n        float in_x = ${v};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${r}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${h} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const HN={kernelName:h.CropAndResize,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{image:r,boxes:a,boxInd:i}=t,{cropSize:o,method:l,extrapolationValue:u}=s,c=new GN(r.shape,a.shape,o,l,u);return n.runWebGLProgram(c,[r,a,i],"float32")}};var jN;!function(e){e.Prod="*",e.Sum="+"}(jN||(jN={}));class qN{constructor(e,t,n,s){this.op=e,this.outputShape=t,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];const r=this.outputShape.length,a=this.op===jN.Prod?"1.0":"0.0",i=n?a:`getX(${YN(r,"coords",this.op)})`,o=this.outputShape[this.outputShape.length-1];let l="",u="";n?(l=s?"end != "+(o-1):"end != 0",u=s?"end + 1":"end - 1"):(l=s?`end + pow2 < ${o}`:"end >= pow2",u=s?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${bw(r)} coords = getOutputCoords();\n        int end = ${KN(r,"coords",this.op)};\n        float val = ${i};\n        int pow2 = int(pow(2.0, index));\n        if (${l}) {\n          int idx = ${u};\n          ${KN(r,"coords",this.op)} = idx;\n          val ${this.op}= getX(${YN(r,"coords",this.op)});\n        }\n        setOutput(val);\n      }\n    `}}function YN(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function KN(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function XN(e,t,n,s,r,a){const i=t.shape.length,o=h.backend_util.getAxesPermutation([s],i);let l=t;null!=o&&(l=QT({inputs:{x:t},backend:n,attrs:{perm:o}}));const u=h.backend_util.getInnerMostAxes(1,i)[0];if(u!==i-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${s}`);const c=l.shape[u];let d=TT({inputs:{x:l},backend:n});for(let t=0;t<=Math.ceil(Math.log2(c))-1;t++){const s=new qN(e,l.shape,!1,a),r=[[t]],i=d;d=n.runWebGLProgram(s,[d],d.dtype,r),n.disposeIntermediateTensorInfo(i)}if(r){const t=new qN(e,l.shape,r,a),s=d;d=n.runWebGLProgram(t,[d],d.dtype),n.disposeIntermediateTensorInfo(s)}if(null!=o){const e=QT({inputs:{x:d},backend:n,attrs:{perm:h.backend_util.getUndoAxesPermutation(o)}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(l),e}return d}const ZN={kernelName:h.Cumprod,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s;return XN(jN.Prod,r,n,a,i,o)}},QN={kernelName:h.Cumsum,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s;return XN(jN.Sum,r,n,a,i,o)}},JN={kernelName:h.DenseBincount,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i,binaryOutput:o}=s;if(1===r.shape.length){const e=n.readSync(r.dataId),t=n.readSync(a.dataId),s=nk(e,t,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,s)}if(2===r.shape.length){const e=n.bufferSync(r),t=n.bufferSync(a),s=sk(e,t,i,o);return n.makeTensorInfo(s.shape,a.dtype,s.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}};class eI{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const tI={kernelName:h.DepthToSpace,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockSize:a,dataFormat:i}=s,o=r.shape[0],l=("NHWC"===i?r.shape[1]:r.shape[2])*a,u=("NHWC"===i?r.shape[2]:r.shape[3])*a,c=("NHWC"===i?r.shape[3]:r.shape[1])/(a*a),d=new eI("NHWC"===i?[o,l,u,c]:[o,c,l,u],a,i);return n.runWebGLProgram(d,[r],r.dtype)}};class nI{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=Sw(this.outputShape.length);const a=e.filterHeight,i=e.filterWidth,o=e.outChannels/e.inChannels;let l="",u="";n&&(l=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,u="result = activation(result);");const c=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${l}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${o};\n        int q = d2 - d1 * ${o};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${a}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${i}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${c}\n        ${u}\n        setOutput(result);\n      }\n    `}}class sI{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=Sw(this.outputShape.length);const a=e.outChannels/e.inChannels,i=e.padInfo.left,o=e.strideWidth,l=e.dilationWidth,u=e.filterHeight,c=e.filterWidth,d=c;let p="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<c;e++)p+=`\n          vec4 xTexelC${2*e};\n          int xTexelC${2*e}Ready;\n          vec4 xTexelC${2*e+1};\n          int xTexelC${2*e+1}Ready;\n          vec4 xC${e};`;p+=`\n    for (int r = 0; r < ${u}; r++) {\n      `;for(let e=0;e<c;e++)p+=`\n          xTexelC${2*e} = vec4(0.0);\n          xTexelC${2*e}Ready = 0;\n          xTexelC${2*e+1} = vec4(0.0);\n          xTexelC${2*e+1}Ready = 0;\n          xC${e} = vec4(0.0);`;p+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let e=0;e<(d+1)/2;e++){const t=2*e;if(p+=`\n          xC = xCCorner + ${t*l};\n          `,1===o){if(t<c&&(i%2==1?(p+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n              `,p+=1===l&&t>0?`\n                xC${t} = vec4(xTexelC${t-2}.zw, xTexelC${t}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${t} = vec4(previous.zw, xTexelC${t}.xy);\n                  } else {\n                    xC${t} = vec4(0.0, 0.0, xTexelC${t}.xy);\n                  }\n                  `):p+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xC${t} = xTexelC${t};\n                `,t+1<c)){const e=i%2==0?h.util.nearestLargerEven(l):l;l%2==0&&i%2==1||l%2!=0&&i%2!=1?(p+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                    xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${t+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${t+1}Ready = 1;\n                  }\n                  `,p+=l>1?`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${t+1} = vec4(previous.zw, xTexelC${t+1}.xy);\n                    } else {\n                     xC${t+1} = vec4(0.0, 0.0, xTexelC${t+1}.xy);\n                    }\n                    `:`\n                    xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.xy);\n                    `):p+=1===e?`\n                    xC${t+1} = xTexelC${t};\n                    `:`\n                    xCOffset = xC + ${e};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                      xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${t+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${t+1}Ready = 1;\n                    }\n\n                    xC${t+1} = xTexelC${t+1};\n                    `}}else t<c&&(i%2==1?(p+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n              `,t+1<c&&(p+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${t+1} = vec4(xTexelC${t+1}.xy, final.xy);\n                `)):(p+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(\n                  xTexelC${t}.xy, xTexelC${t+1}.xy);\n              `,t+1<c&&(p+=`\n                  xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n                `)));t<c&&(p+=`\n            wTexel = getW(r, ${t}, d1, q);\n            dotProd += xC${t} * vec4(wTexel.xz, wTexel.xz);\n          `,t+1<c&&(p+=`\n              wTexel = getW(r, ${t+1}, d1, q);\n              dotProd += xC${t+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}p+="\n    }\n  ",p+="\n      }\n    ";let f="",m="";n&&(f=s?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,m="result = activation(result);");const g=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${f}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${a};\n        int q = d2 - d1 * ${a};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${p}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${g}\n        ${m}\n        setOutput(result);\n      }\n    `}}const rI={kernelName:h.DepthwiseConv2dNative,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l,dimRoundingMode:u}=s;let c=l;null==c&&(c=[1,1]),h.util.assert(h.backend_util.eitherStridesOrDilationsAreOne(i,c),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`);const d=h.backend_util.computeConv2DInfo(r.shape,a.shape,i,c,o,u,!0);let p;p=(0,h.env)().getBool("WEBGL_PACK_DEPTHWISECONV")&&d.strideWidth<=2&&d.outChannels/d.inChannels===1?new sI(d):new nI(d);const f=[[d.padInfo.top,d.padInfo.left],[d.strideHeight,d.strideWidth],[d.dilationHeight,d.dilationWidth],[d.inHeight,d.inWidth]];return n.runWebGLProgram(p,[r,a],"float32",f)}};class aI{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,r=e.padInfo.left,a=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${a} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class iI{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a=t-1-e.padInfo.top,i=n-1-e.padInfo.left,o=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${o}; dm++) {\n              int d2 = d1 * ${o} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const oI={kernelName:h.DepthwiseConv2dNativeBackpropFilter,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:c}=s,d=h.backend_util.computeConv2DInfo(r.shape,c,i,o,l,u,!0),p=new aI(d);return n.runWebGLProgram(p,[r,a],"float32")}},lI={kernelName:h.DepthwiseConv2dNativeBackpropInput,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,inputShape:c}=s,d=h.backend_util.computeConv2DInfo(c,a.shape,i,o,l,u,!0),p=new iI(d);return n.runWebGLProgram(p,[r,a],"float32")}};class uI{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const cI={kernelName:h.Diag,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=[...s.shape,...s.shape],a=h.util.sizeFromShape(s.shape),i=VT({inputs:{x:s},backend:n,attrs:{shape:[a]}}),o=new uI(a),l=n.runWebGLProgram(o,[i],i.dtype),u=VT({inputs:{x:l},backend:n,attrs:{shape:r}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),u}};class dI{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:s,strideHeight:r,strideWidth:a,filterHeight:i,filterWidth:o,dilationHeight:l,dilationWidth:u}=e,{top:c,left:d}=s;this.userCode=`\n      const ivec2 strides = ivec2(${r}, ${a});\n      const ivec2 pads = ivec2(${c}, ${d});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${i}; h++) {\n          int hIn = hBeg + h * ${l};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${o}; w++) {\n              int wIn = wBeg + w * ${u};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const hI={kernelName:h.Dilation2D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s,u=h.backend_util.computeDilation2DInfo(r.shape,a.shape,i,o,"NHWC",l);let c;const d=new dI(u);c=n.runWebGLProgram(d,[r,a],"float32");const p=VT({inputs:{x:c},backend:n,attrs:{shape:u.outShape}});return n.disposeIntermediateTensorInfo(c),p}},pI={kernelName:h.Einsum,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{equation:r}=s,a=t,{allDims:i,summedDims:o,idDims:l}=h.backend_util.decodeEinsumEquation(r,a.length);h.backend_util.checkEinsumDimSizes(i.length,l,a);const{path:u,steps:c}=h.backend_util.getEinsumComputePath(o,l),d=c.length;let p=null,f=i.length;const m=[];for(let e=0;e<d;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:s}=h.backend_util.getEinsumPermutation(f,l[t]);let r;h.backend_util.isIdentityPermutation(e)?r=a[t]:(r=QT({inputs:{x:a[t]},backend:n,attrs:{perm:e}}),m.push(r));const i=r.shape.slice();for(let e=0;e<s.length;++e)i.splice(s[e],0,1);h.util.arraysEqual(r.shape,i)||(r=VT({inputs:{x:r},backend:n,attrs:{shape:i}}),m.push(r)),null===p?p=r:(p=BT({inputs:{a:r,b:p},backend:n}),m.push(p))}e<d-1&&(u[e]>=0&&(p=XT({inputs:{x:p},backend:n,attrs:{axis:u[e]-(i.length-f),keepDims:!1}}),m.push(p)),f--)}for(const e of m)e!==p&&n.disposeIntermediateTensorInfo(e);return p}},fI=FT({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),mI={kernelName:h.Elu,backendName:"webgl",kernelFunc:fI},gI={kernelName:h.EluGrad,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:s,y:r}=t,a=(0,h.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new kT("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",s.shape,r.shape):new vT("return (b >= 0.0) ? a : a * (b + 1.0);",s.shape,r.shape);return n.runWebGLProgram(a,[s,r],s.dtype)}},yI=OT({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:lk}),bI={kernelName:h.Equal,backendName:"webgl",kernelFunc:yI},xI=FT({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${h.backend_util.ERF_P};\n  float a1 = ${h.backend_util.ERF_A1};\n  float a2 = ${h.backend_util.ERF_A2};\n  float a3 = ${h.backend_util.ERF_A3};\n  float a4 = ${h.backend_util.ERF_A4};\n  float a5 = ${h.backend_util.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),vI={kernelName:h.Erf,backendName:"webgl",kernelFunc:xI},wI=FT({opSnippet:DT+"\n  return exp(x);\n",packedOpSnippet:"\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:uk,dtype:"float32"}),kI={kernelName:h.Exp,backendName:"webgl",kernelFunc:wI};function TI(e){const{inputs:t,attrs:n,backend:s}=e,{dim:r}=n,{input:a}=t,i=a.shape.length,o=a.shape.slice();let l=r;return r<0&&(h.util.assert(-(i+1)<=r,()=>`Axis must be in the interval [${-(i+1)}, ${i}]`),l=i+r+1),o.splice(l,0,1),VT({inputs:{x:a},backend:s,attrs:{shape:o}})}const SI={kernelName:h.ExpandDims,backendName:"webgl",kernelFunc:TI},NI="return exp(x) - 1.0;",II=FT({opSnippet:NI,packedOpSnippet:NI,cpuKernelImpl:ck}),CI={kernelName:h.Expm1,backendName:"webgl",kernelFunc:II};class AI{constructor(e,t,n){this.variableNames=["real","imag"];const s=t[1];this.outputShape=t;const r=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,a=n?`${s}.0`:"1.0";let i;if("real"===e)i="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);i="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${r};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${i}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${s});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${s}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function EI(e,t,n){const s=n.texData.get(e.dataId),r=h.util.sizeFromShape(e.shape),a=e.shape[e.shape.length-1],i=VT({inputs:{x:e},backend:n,attrs:{shape:[r/a,a]}}),o=i.shape,l=new AI("real",o,t),u=new AI("imag",o,t),c=[{dataId:s.complexTensorInfos.real.dataId,dtype:s.complexTensorInfos.real.dtype,shape:o},{dataId:s.complexTensorInfos.imag.dataId,dtype:s.complexTensorInfos.imag.dtype,shape:o}],d=n.runWebGLProgram(l,c,"float32"),p=n.runWebGLProgram(u,c,"float32"),f=NT({inputs:{real:d,imag:p},backend:n});n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p);const m=VT({inputs:{x:f},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(f),m}const $I={kernelName:h.FFT,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return EI(s,!1,n)}};class RI{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function _I(e){const{backend:t,attrs:n}=e,{shape:s,value:r}=n;let{dtype:a}=n;if(a=a||h.util.inferDtype(r),"string"===a){const e=h.util.getArrayFromDType(a,h.util.sizeFromShape(s));return e.fill(r),t.makeTensorInfo(s,a,e)}{const e=new RI(s,r),n=[[r]];return t.runWebGLProgram(e,[],a,n)}}const DI={kernelName:h.Fill,backendName:"webgl",kernelFunc:_I};class FI{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const OI={kernelName:h.FlipLeftRight,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,s=t,r=new FI(n.shape);return s.runWebGLProgram(r,[n],n.dtype)}},MI="return floor(x);",zI=FT({opSnippet:MI,packedOpSnippet:MI,cpuKernelImpl:dk}),LI={kernelName:h.Floor,backendName:"webgl",kernelFunc:zI},PI=OT({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),BI={kernelName:h.FloorDiv,backendName:"webgl",kernelFunc:PI};class WI{constructor(e){this.variableNames=["A"];const t=sw(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class VI{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=sw(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${s}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const UI={kernelName:h.FromPixels,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e;let{pixels:r}=t;const{numChannels:a}=s,i="undefined"!=typeof HTMLVideoElement&&r instanceof HTMLVideoElement,o="undefined"!=typeof HTMLImageElement&&r instanceof HTMLImageElement,[l,u]=i?[r.videoWidth,r.videoHeight]:[r.width,r.height],c=[u,l],d=[u,l,a];if(o||i){const e=(0,h.env)().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");null!=GI&&e===HI||(HI=e,GI=document.createElement("canvas").getContext("2d",{willReadFrequently:HI})),GI.canvas.width=l,GI.canvas.height=u,GI.drawImage(r,0,0,l,u),r=GI.canvas}const p=n.makeTensorInfo(c,"int32");n.texData.get(p.dataId).usage=Qx.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(p.dataId),r);const f=(0,h.env)().getBool("WEBGL_PACK")?new VI(d):new WI(d),m=n.runWebGLProgram(f,[p],"int32");return n.disposeData(p.dataId),m}};let GI,HI=(0,h.env)().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");const jI={kernelName:h.FusedConv2D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:d,dimRoundingMode:p,activation:f,leakyreluAlpha:m}=s,g=h.backend_util.convertConv2DDataFormat(c),y=h.backend_util.computeConv2DInfo(r.shape,a.shape,l,d,u,p,!1,g);let b;const x=[],v=null!=i,w=null!=o,k="leakyrelu"===f,T=()=>{const e=[r,a],t=(e,t)=>{if("NCHW"===t&&1===e.shape.length&&1!==e.shape[0]){const t=VT({inputs:{x:e},backend:n,attrs:{shape:[e.shape[0],1,1]}});return x.push(t),t}return e};if(v&&e.push(t(i,c)),w&&e.push(t(o,c)),k){const t=n.makeTensorInfo([],"float32",h.util.createScalarValue(m,"float32"));e.push(t),x.push(t)}return e};if(1!==y.filterHeight||1!==y.filterWidth||1!==y.dilationHeight||1!==y.dilationWidth||1!==y.strideHeight||1!==y.strideWidth||"SAME"!==y.padInfo.type&&"VALID"!==y.padInfo.type)if(y.strideWidth<=2&&"channelsLast"===g&&(0,h.env)().getBool("WEBGL_EXP_CONV")){const e=f?MT(f,!0):null,t=new SN(y,v,e,w,k),s=[[y.padInfo.top,y.padInfo.left],[y.strideHeight,y.strideWidth],[y.dilationHeight,y.dilationWidth],[y.inHeight,y.inWidth]],r=T();b=n.runWebGLProgram(t,r,"float32",s)}else if((0,h.env)().getBool("WEBGL_CONV_IM2COL"))b=AN({x:r,filter:a,convInfo:y,backend:n,bias:i,activation:f,preluActivationWeights:o,leakyreluAlpha:m});else{const e=f?MT(f,!1):null,t=new kN(y,v,e,w,k),s=T();b=n.runWebGLProgram(t,s,"float32")}else b=CN({x:r,filter:a,convInfo:y,backend:n,bias:i,activation:f,preluActivationWeights:o,leakyreluAlpha:m});const S=VT({inputs:{x:b},backend:n,attrs:{shape:y.outShape}});return x.push(b),x.forEach(e=>n.disposeIntermediateTensorInfo(e)),S}},qI={kernelName:h.FusedDepthwiseConv2D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dilations:c,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s,m=[];let g=c;null==g&&(g=[1,1]),h.util.assert(h.backend_util.eitherStridesOrDilationsAreOne(l,g),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${g}'`);const y=h.backend_util.computeConv2DInfo(r.shape,a.shape,l,g,u,d,!0),b=(0,h.env)().getBool("WEBGL_PACK_DEPTHWISECONV")&&y.strideWidth<=2&&y.outChannels/y.inChannels===1,x=p?MT(p,b):null,v=[r,a],w=null!=i,k=null!=o,T="leakyrelu"===p;if(w&&v.push(i),k&&v.push(o),T){const e=n.makeTensorInfo([],"float32",h.util.createScalarValue(f,"float32"));v.push(e),m.push(e)}let S;S=b?new sI(y,w,x,k,T):new nI(y,w,x,k,T);const N=[[y.padInfo.top,y.padInfo.left],[y.strideHeight,y.strideWidth],[y.dilationHeight,y.dilationWidth],[y.inHeight,y.inWidth]],I=n.runWebGLProgram(S,v,"float32",N);return m.forEach(e=>n.disposeIntermediateTensorInfo(e)),I}};class YI{constructor(e,t,n,s){this.sliceDim=e,this.strides=t,this.paramsShape=s,this.variableNames=["x","indices"],this.outputShape=n;const r=bw(n.length);let a="\n    int index;";for(let e=0;e<this.sliceDim;e++)a+=`\n          index = round(getIndices(coords[0], ${e}));\n          out_of_bounds = out_of_bounds || index < 0;\n          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[e]};\n          flattenIndex += index * ${this.strides[e]};`;this.userCode=`\n         void main() {\n          ${r} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n\n          ${a}\n\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `}}const KI={kernelName:h.GatherNd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:r}=t,a=r.shape,i=a[a.length-1],o=h.util.sizeFromShape(s.shape),[l,u,c,d]=h.backend_util.prepareAndValidate(s,r),p=VT({inputs:{x:r},backend:n,attrs:{shape:[u,i]}}),f=VT({inputs:{x:s},backend:n,attrs:{shape:[h.util.sizeFromShape(s.shape)/c,c]}});if(n.shouldExecuteOnCPU([s,r])||"string"===s.dtype){const e=n.readSync(r.dataId),t=n.bufferSync(s),a=hk(e,t,s.dtype,u,i,c,d,s.shape,o);return n.makeTensorInfo(l,s.dtype,a.values)}const m=new YI(i,d,[u,c],s.shape),g=n.runWebGLProgram(m,[f,p],f.dtype),y=VT({inputs:{x:g},backend:n,attrs:{shape:l}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(g),y}};class XI{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=bw(this.rank),s=function(e){const t=["resRC.x","resRC.y","resRC.z","resRC.w"],n=[];for(let s=0;s<e.length;s++)2===s?n.push("index"):n.push(`${t[s]}`);return n.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${s}));\n      }\n    `}}function ZI(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,indices:a}=t,{axis:i,batchDims:o}=s,l=h.util.parseAxisParam(i,r.shape)[0];if((0,h.env)().get("DEBUG")){const e=n.readSync(a.dataId),t=r.shape[l];for(let n=0;n<e.length;++n){const s=e[n];h.util.assert(s<=t-1&&s>=0,()=>`GatherV2: the index value ${s} is not in [0, ${t-1}]`)}}const u=h.backend_util.segment_util.collectGatherOpShapeInfo(r,a,l,o),c=h.util.sizeFromShape(a.shape),d=[],p=VT({inputs:{x:r},backend:n,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),f=VT({inputs:{x:a},backend:n,attrs:{shape:[u.batchSize,c/u.batchSize]}});d.push(p),d.push(f);const m=[u.batchSize,u.outerSize,c/u.batchSize,u.sliceSize];if(n.shouldExecuteOnCPU([r,a])||"string"===r.dtype){const e=n.bufferSync(f),t=n.bufferSync(p),s=pk(t,e,m);return d.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(u.outputShape,s.dtype,s.values)}const g=new XI(p.shape,m),y=n.runWebGLProgram(g,[p,f],p.dtype);d.push(y);const b=VT({inputs:{x:y},backend:n,attrs:{shape:u.outputShape}});return d.forEach(e=>n.disposeIntermediateTensorInfo(e)),b}const QI={kernelName:h.GatherV2,backendName:"webgl",kernelFunc:ZI},JI=OT({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:fk,dtype:"bool"}),eC={kernelName:h.Greater,backendName:"webgl",kernelFunc:JI},tC=OT({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:mk}),nC={kernelName:h.GreaterEqual,backendName:"webgl",kernelFunc:tC},sC={kernelName:h.IFFT,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return EI(s,!0,n)}},rC=FT({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),aC={kernelName:h.IsFinite,backendName:"webgl",kernelFunc:rC},iC=FT({opSnippet:"return float(isinf(x));",dtype:"bool"}),oC={kernelName:h.IsInf,backendName:"webgl",kernelFunc:iC},lC=FT({opSnippet:"return float(isnan(x));",dtype:"bool"}),uC={kernelName:h.IsNan,backendName:"webgl",kernelFunc:lC},cC=OT({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:gk,dtype:"bool"}),dC={kernelName:h.Less,backendName:"webgl",kernelFunc:cC},hC=OT({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:yk,dtype:"bool"}),pC={kernelName:h.LessEqual,backendName:"webgl",kernelFunc:hC},fC={kernelName:h.LinSpace,backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,num:a}=n,i=bk(s,r,a);return t.makeTensorInfo([i.length],"float32",i)}},mC=FT({opSnippet:DT+"\n  return x < 0.0 ? 0./0. : log(x);\n",packedOpSnippet:"\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n",cpuKernelImpl:xk}),gC={kernelName:h.Log,backendName:"webgl",kernelFunc:mC},yC=FT({opSnippet:DT+"\n  return log(1.0 + x);\n"}),bC={kernelName:h.Log1p,backendName:"webgl",kernelFunc:yC},xC=OT({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),vC={kernelName:h.LogicalAnd,backendName:"webgl",kernelFunc:xC},wC=FT({opSnippet:"return float(!(x >= 1.0));"}),kC={kernelName:h.LogicalNot,backendName:"webgl",kernelFunc:wC},TC=OT({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),SC={kernelName:h.LogicalOr,backendName:"webgl",kernelFunc:TC};class NC{constructor(e,t,n,s,r){this.variableNames=["x"],this.outputShape=[];const a=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;o=.5===r?`inversesqrt(${l})`:1===r?`1.0/(${l})`:`exp(log(${l}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `}}class IC{constructor(e,t,n,s,r){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;o=.5===r?`inversesqrt(${l})`:1===r?`1.0/(${l})`:`exp(log(${l}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `}}const CC={kernelName:h.LRN,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{depthRadius:a,bias:i,alpha:o,beta:l}=s,u=(0,h.env)().getBool("WEBGL_PACK_NORMALIZATION")?new IC(r.shape,a,i,o,l):new NC(r.shape,a,i,o,l);return n.runWebGLProgram(u,[r],r.dtype)}};class AC{constructor(e,t,n,s,r){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=s,this.beta=r,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${s}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${s})\n                * float(${r})\n                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${r});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const EC={kernelName:h.LRNGrad,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r,y:a,dy:i}=t,{depthRadius:o,bias:l,alpha:u,beta:c}=s,d=new AC(r.shape,o,l,u,c);return n.runWebGLProgram(d,[r,a,i],r.dtype)}};function $C(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reductionIndices:a,keepDims:i}=s,o=r.shape.length,l=h.util.parseAxisParam(a,r.shape);let u=l;const c=h.backend_util.getAxesPermutation(u,o),d=null!=c,p=n.shouldExecuteOnCPU([r]);let f=r;if(d){if(p){const e=n.texData.get(f.dataId).values,t=new Array(o);for(let e=0;e<t.length;e++)t[e]=r.shape[c[e]];const s=Yk(e,r.shape,r.dtype,c,t);f=n.makeTensorInfo(t,r.dtype),n.texData.get(f.dataId).values=s}else f=KT(r,c,n);u=h.backend_util.getInnerMostAxes(u.length,o)}h.backend_util.assertAxesAreInnerMostDims("max",u,o);const[m,g]=h.backend_util.computeOutAndReduceShapes(f.shape,u);let y,b=m;if(i&&(b=h.backend_util.expandShapeToKeepDim(m,l)),p){const e=n.texData.get(f.dataId).values,t=vk(e,h.util.sizeFromShape(g),b,r.dtype);y=n.makeTensorInfo(b,r.dtype),n.texData.get(y.dataId).values=t}else y=function(e,t,n,s){const r=h.util.sizeFromShape(t),a=VT({inputs:{x:e},attrs:{shape:[h.util.sizeFromShape(e.shape)/r,r]},backend:s}),i=jT(a,e.dtype,"max",s),o=VT({inputs:{x:i},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}(f,g,b,n);return d&&n.disposeIntermediateTensorInfo(f),y}const RC={kernelName:h.Max,backendName:"webgl",kernelFunc:$C},_C=OT({opSnippet:xT+"\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+wT+"\n  return result;\n",cpuKernelImpl:wk}),DC={kernelName:h.Maximum,backendName:"webgl",kernelFunc:_C},FC={kernelName:h.MaxPool,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;tw(r,"maxPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;h.util.assert(h.backend_util.eitherStridesOrDilationsAreOne(i,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`);const u=h.backend_util.computePool2DInfo(r.shape,a,i,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&h.util.arraysEqual(u.inShape,u.outShape))return TT({inputs:{x:r},backend:n});const c=new DS(u,"max",!1);return n.runWebGLProgram(c,[r],r.dtype)}},OC={kernelName:h.MaxPool3D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dataFormat:l,dimRoundingMode:u}=s,c=h.backend_util.computePool3DInfo(r.shape,a,i,[1,1,1],o,u,l),d=new FS(c,"max",!1);return n.runWebGLProgram(d,[r],r.dtype)}};class MC{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,s=e.dilationHeight,r=e.effectiveFilterHeight,a=e.effectiveFilterWidth,i=r-1-e.padInfo.top,o=a-1-e.padInfo.left,l=r*a-1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${r};\n          wR += ${s}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${l} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class zC{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,r=e.dilationDepth,a=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterDepth,l=e.effectiveFilterHeight,u=e.effectiveFilterWidth,c=o-1-e.padInfo.front,d=l-1-e.padInfo.top,h=u-1-e.padInfo.left,p=o*l*u-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${d}, ${h});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${o};\n           wD += ${r}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${l};\n              wR += ${a}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${u};\n                wC += ${i}) {\n              float dyC = float(dyCCorner + wC) / ${s}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${p} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${l} * ${u} +\n                  wR * ${u} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const LC={kernelName:h.MaxPool3DGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a,{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=s,d=h.backend_util.computePool3DInfo(i.shape,o,l,[1,1,1],u,c),p=new FS(d,"max",!0),f=n.runWebGLProgram(p,[i],i.dtype),m=new zC(d),g=n.runWebGLProgram(m,[r,f],i.dtype);return n.disposeIntermediateTensorInfo(f),g}},PC={kernelName:h.MaxPoolGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a,output:i}=t,o=a;tw([a,i],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:d}=s,p=h.backend_util.computePool2DInfo(o.shape,l,u,1,c,d),f=new DS(p,"max",!0),m=n.runWebGLProgram(f,[o],o.dtype),g=new MC(p),y=n.runWebGLProgram(g,[r,m],o.dtype);return n.disposeIntermediateTensorInfo(m),y}},BC={kernelName:h.MaxPoolWithArgmax,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:r,strides:a,pad:i,includeBatchInIndex:o}=t,l=n;h.util.assert(4===s.shape.length,()=>`Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`);const u=[1,1];h.util.assert(h.backend_util.eitherStridesOrDilationsAreOne(a,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`);const c=h.backend_util.computePool2DInfo(s.shape,r,a,u,i),[d,p]=function(e,t,n,s){let r=new DS(n,"max",!1);const a=s.runWebGLProgram(r,[e],"float32");return r=new DS(n,"max",!0,!0,t),[a,s.runWebGLProgram(r,[e],"float32")]}(s,o,c,l);return[d,p]}},WC={kernelName:h.Mean,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{keepDims:r,axis:a}=t,i=n,o=s.shape.length,l=h.util.parseAxisParam(a,s.shape);let u=l;const c=h.backend_util.getAxesPermutation(u,o),d=null!=c,p=i.shouldExecuteOnCPU([s]),f=[];let m=s;if(d){if(p){const e=i.texData.get(m.dataId).values,t=new Array(o);for(let e=0;e<t.length;e++)t[e]=s.shape[c[e]];const n=Yk(e,s.shape,s.dtype,c,t);m=i.makeTensorInfo(t,s.dtype),i.texData.get(m.dataId).values=n}else m=KT(s,c,i);f.push(m),u=h.backend_util.getInnerMostAxes(u.length,o)}h.backend_util.assertAxesAreInnerMostDims("sum",u,o);const[g,y]=h.backend_util.computeOutAndReduceShapes(m.shape,u);let b=g;r&&(b=h.backend_util.expandShapeToKeepDim(g,l));const x=function(e,t,n,s){const r=h.util.sizeFromShape(t),a=VT({inputs:{x:e},attrs:{shape:[h.util.sizeFromShape(e.shape)/r,r]},backend:s}),i=jT(a,"float32","mean",s),o=VT({inputs:{x:i},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}(m,y,b,i);for(const e of f)i.disposeIntermediateTensorInfo(e);return x}},VC={kernelName:h.Min,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=h.util.parseAxisParam(a,r.shape);let u=l;const c=h.backend_util.getAxesPermutation(u,o);let d=r;null!=c&&(d=QT({inputs:{x:r},backend:n,attrs:{perm:c}}),u=h.backend_util.getInnerMostAxes(u.length,r.shape.length)),h.backend_util.assertAxesAreInnerMostDims("min",u,o);const[p,f]=h.backend_util.computeOutAndReduceShapes(d.shape,u),m=VT({inputs:{x:d},backend:n,attrs:{shape:[-1,h.util.sizeFromShape(f)]}}),g=jT(m,m.dtype,"min",n);let y;return y=VT(i?{inputs:{x:g},backend:n,attrs:{shape:h.backend_util.expandShapeToKeepDim(p,l)}}:{inputs:{x:g},backend:n,attrs:{shape:p}}),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=c&&n.disposeIntermediateTensorInfo(d),y}},UC=OT({opSnippet:xT+"\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+wT+"\n  return result;\n",cpuKernelImpl:kk}),GC={kernelName:h.Minimum,backendName:"webgl",kernelFunc:UC};class HC{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);const s=e.length,r=bw(s),a=t.map(e=>e[0]).join(","),i=t.map((t,n)=>t[0]+e[n]).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s),l="reflect"===n?0:1;this.userCode=1!==s?`\n      ${r} start = ${r}(${a});\n      ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        for (int i = 0; i < ${s}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${l};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${l};\n          }\n        }\n        ${r} coords = outC - start;\n        setOutput(getX(${o}));\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${l};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${l};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class jC{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);const s=e.length,r=bw(s),a=t.map(e=>e[0]).join(","),i=t.map((t,n)=>t[0]+e[n]).join(","),o=Zk("rc",s),l=Zk("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,d="reflect"===n?0:1;let h="";if(1===s){const e=`\n        ${r} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${d};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${d};\n        }\n        source -= start;\n      `;h=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n      `}else{const e=`\n        ${r} source = rc;\n        ${r} lt = ${r}(lessThan(source, start));\n        ${r} gte = ${r}(greaterThanEqual(source, end));\n        ${r} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${d}) +\n                gte * ((end - 1) * 2 - source + ${d});\n        source -= start;\n      `;h=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${o[s-2]} += 1;\n        if(${o[s-2]} < ${this.outputShape[s-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${l.join()}), ${c});\n          ${o[s-1]} += 1;\n          if(${u}) {\n            ${e}\n            result[3] = getChannel(getX(${l.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${r} start = ${r}(${a});\n      const ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${h}\n        setOutput(result);\n      }\n    `}}const qC={kernelName:h.MirrorPad,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s}=e,{paddings:r,mode:a}=n,i=(0,h.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new jC(s.shape,r,a):new HC(s.shape,r,a);return t.runWebGLProgram(i,[s],s.dtype)}},YC=OT({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  bvec4 isNaN = equal(b, vec4(0.0));\n  "+wT+"\n  return result;\n"}),KC={kernelName:h.Mod,backendName:"webgl",kernelFunc:YC};class XC{constructor(e,t,n){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,n],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}}const ZC=OT({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),QC={kernelName:h.RealDiv,backendName:"webgl",kernelFunc:ZC},JC="return a - b;",eA=OT({opSnippet:JC,packedOpSnippet:JC,supportsComplex:!0,cpuKernelImpl:Hk}),tA={kernelName:h.Sub,backendName:"webgl",kernelFunc:eA};function nA(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{dim:a}=s,i=h.util.parseAxisParam([a],r.shape),o=$C({inputs:{x:r},backend:n,attrs:{reductionIndices:i,keepDims:!1}}),l=h.backend_util.expandShapeToKeepDim(o.shape,i),u=VT({inputs:{x:o},backend:n,attrs:{shape:l}}),c=eA({inputs:{a:r,b:u},backend:n}),d=wI({inputs:{x:c},backend:n}),p=XT({inputs:{x:d},backend:n,attrs:{axis:i,keepDims:!1}}),f=VT({inputs:{x:p},backend:n,attrs:{shape:l}}),m=ZC({inputs:{a:d,b:f},backend:n});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),m}const sA={kernelName:h.Softmax,backendName:"webgl",kernelFunc:nA},rA={kernelName:h.Multinomial,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{numSamples:a,seed:i,normalized:o}=s,l=o?r:nA({inputs:{logits:r},backend:n,attrs:{dim:r.shape.length-1}}),u=l.shape[0],c=l.shape[1],d=new XC(u,c,a),h=[[i]],p=n.runWebGLProgram(d,[l],"int32",h);return o||n.disposeIntermediateTensorInfo(l),p}},aA=aT+"\n  return -x;\n",iA={kernelName:h.Neg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])){const e=n.texData.get(s.dataId),[t,r]=Sk(e.values,s.shape,s.dtype);return n.makeTensorInfo(r,s.dtype,t)}let r;return r=(0,h.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new cT(s.shape,"\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"):new rT(s.shape,aA),n.runWebGLProgram(r,[s],s.dtype)}},oA=h.kernel_impls.nonMaxSuppressionV3Impl,lA={kernelName:h.NonMaxSuppressionV3,backendName:"webgl",kernelFunc:function(e){h.backend_util.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=s,u=n.readSync(r.dataId),c=n.readSync(a.dataId),{selectedIndices:d}=oA(u,c,i,o,l);return n.makeTensorInfo([d.length],"int32",new Int32Array(d))}},uA=h.kernel_impls.nonMaxSuppressionV4Impl,cA={kernelName:h.NonMaxSuppressionV4,backendName:"webgl",kernelFunc:function(e){h.backend_util.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=s,c=n.readSync(r.dataId),d=n.readSync(a.dataId),{selectedIndices:p,validOutputs:f}=uA(c,d,i,o,l,u);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([],"int32",new Int32Array([f]))]}},dA=h.kernel_impls.nonMaxSuppressionV5Impl,hA={kernelName:h.NonMaxSuppressionV5,backendName:"webgl",kernelFunc:function(e){h.backend_util.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=s,c=n.readSync(r.dataId),d=n.readSync(a.dataId),p=i,f=o,m=l,g=u,{selectedIndices:y,selectedScores:b}=dA(c,d,p,f,m,g);return[n.makeTensorInfo([y.length],"int32",new Int32Array(y)),n.makeTensorInfo([b.length],"float32",new Float32Array(b))]}};class pA{constructor(e,t,n,s){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${s}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const fA={kernelName:h.OneHot,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{indices:r}=t,{dtype:a,depth:i,onValue:o,offValue:l}=s,u=h.util.sizeFromShape(r.shape),c=new pA(u,i,o,l),d=VT({inputs:{x:r},backend:n,attrs:{shape:[u]}}),p=n.runWebGLProgram(c,[d],a);n.disposeIntermediateTensorInfo(d);const f=VT({inputs:{x:p},backend:n,attrs:{shape:[...r.shape,i]}});return n.disposeIntermediateTensorInfo(p),f}};function mA(e){const{inputs:t,backend:n}=e,{x:s}=t;if("complex64"===s.dtype){const e=nN({inputs:{input:s},backend:n}),t=mA({inputs:{x:e},backend:n}),r=yN({inputs:{input:s},backend:n}),a=mA({inputs:{x:r},backend:n}),i=NT({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}return _I({attrs:{shape:s.shape,dtype:s.dtype,value:"string"===s.dtype?"":0},backend:n})}const gA={kernelName:h.ZerosLike,backendName:"webgl",kernelFunc:mA},yA={kernelName:h.OnesLike,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===r.dtype){const t=nN({inputs:{input:r},backend:s}),n=e({inputs:{x:t},backend:s}),a=yN({inputs:{input:r},backend:s}),i=mA({inputs:{x:a},backend:s}),o=NT({inputs:{real:n,imag:i},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}return _I({attrs:{shape:r.shape,dtype:r.dtype,value:1},backend:s})}},bA={kernelName:h.Pack,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s;if(1===t.length)return TI({inputs:{input:t[0]},backend:n,attrs:{dim:r}});const a=t[0].shape,i=t[0].dtype;t.forEach(e=>{h.util.assertShapesMatch(a,e.shape,"All tensors passed to stack must have matching shapes"),h.util.assert(i===e.dtype,()=>"All tensors passed to stack must have matching dtypes")});const o=[],l=vN({inputs:t.map(e=>{const t=TI({inputs:{input:e},backend:n,attrs:{dim:r}});return o.push(t),t}),backend:n,attrs:{axis:r}});return o.forEach(e=>n.disposeIntermediateTensorInfo(e)),l}};class xA{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);const s=e.length,r=bw(s),a=t.map(e=>e[0]).join(","),i=t.map((t,n)=>t[0]+e[n]).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s);this.userCode=1!==s?`\n      ${r} start = ${r}(${a});\n      ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${r} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class vA{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);const s=e.length,r=bw(s),a=t.map(e=>e[0]).join(","),i=t.map((t,n)=>t[0]+e[n]).join(","),o=Zk("rc",s),l=Zk("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,d=[`${r} rc = outputLoc;`,`${o[s-1]} += 1;\n       if(${u}) {\n      `,1===s?"":`}\n       rc = outputLoc;\n       ${o[s-2]} += 1;\n       if(${o[s-2]} < ${this.outputShape[s-2]}) {`,1===s?"":`  ${o[s-1]} += 1;\n         if(${u}) {`],h=1===s?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let p="";for(let e=0,t=1===s?2:4;e<t;e++)p+=`\n        ${d[e]}\n        if (${h}) {\n          result[${e}] = float(value);\n        } else {\n          ${r} source = rc - start;\n          result[${e}] = getChannel(getX(${l.join()}), ${c});\n        }\n      `;p+=1===s?"} ":"}}",this.userCode=`\n      const ${r} start = ${r}(${a});\n      const ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const wA=e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,constantValue:i}=s;if(0===h.util.sizeFromShape(r.shape)){const e=a.map((e,t)=>e[0]+r.shape[t]+e[1]);return _I({backend:n,attrs:{shape:e,value:i,dtype:r.dtype}})}const o=(0,h.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new vA(r.shape,a,i):new xA(r.shape,a,i),l=[[i]];return n.runWebGLProgram(o,[r],r.dtype,l)},kA={kernelName:h.PadV2,backendName:"webgl",kernelFunc:wA},TA=OT({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  bvec4 isNaN1 = lessThan(a, vec4(0.0));\n  bvec4 isNaN2 = lessThan(floor(b), b);\n  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);\n  "+wT+"\n  return result;\n"}),SA={kernelName:h.Pow,backendName:"webgl",kernelFunc:TA},NA={kernelName:h.Prod,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=[],u=h.util.parseAxisParam(a,r.shape);let c=u;const d=h.backend_util.getAxesPermutation(c,o);let p,f=r;if(null!=d&&(f=QT({inputs:{x:r},backend:n,attrs:{perm:d}}),c=h.backend_util.getInnerMostAxes(c.length,o),l.push(f)),h.backend_util.assertAxesAreInnerMostDims("prod",c,o),n.shouldExecuteOnCPU([f])){const e=n.texData.get(f.dataId).values,{outVals:t,outShape:s,outDtype:r}=Ik(f.shape,f.dtype,e,c);p=n.makeTensorInfo(s,r,t)}else{const[e,t]=h.backend_util.computeOutAndReduceShapes(f.shape,c),s=h.util.sizeFromShape(t),a=VT({inputs:{x:f},backend:n,attrs:{shape:[-1,s]}}),i=jT(a,(0,h.sumOutType)(r.dtype),"prod",n);p=VT({inputs:{x:i},backend:n,attrs:{shape:e}}),l.push(a),l.push(i)}if(i){l.push(p);const e=h.backend_util.expandShapeToKeepDim(p.shape,u);p=VT({inputs:{x:p},backend:n,attrs:{shape:e}})}return l.forEach(e=>n.disposeIntermediateTensorInfo(e)),p}},IA={kernelName:h.RaggedGather,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{paramsNestedSplits:r,paramsDenseValues:a,indices:i}=t,{outputRaggedRank:o}=s,l=r.map(e=>n.readSync(e.dataId)),u=r.map(e=>e.shape),c=n.readSync(a.dataId),d=n.readSync(i.dataId),[h,p,f]=Ck(l,u,c,a.shape,a.dtype,d,i.shape,o),m=h.map(e=>n.makeTensorInfo([e.length],"int32",e)),g=n.makeTensorInfo(f,a.dtype,p);return m.concat([g])}},CA={kernelName:h.RaggedRange,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{starts:s,limits:r,deltas:a}=t,i=n.readSync(s.dataId),o=n.readSync(r.dataId),l=n.readSync(a.dataId),[u,c]=Ak(i,s.shape,s.dtype,o,r.shape,l,a.shape);return[n.makeTensorInfo([u.length],"int32",u),n.makeTensorInfo([c.length],s.dtype,c)]}},AA={kernelName:h.RaggedTensorToTensor,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{shape:r,values:a,defaultValue:i,rowPartitionTensors:o}=t,{rowPartitionTypes:l}=s,u=n.readSync(r.dataId),c=n.readSync(a.dataId),d=n.readSync(i.dataId),h=o.map(e=>n.readSync(e.dataId)),p=o.map(e=>e.shape),[f,m]=Ek(u,r.shape,c,a.shape,a.dtype,d,i.shape,h,p,l);return n.makeTensorInfo(f,a.dtype,m)}},EA=e=>{const{backend:t,attrs:n}=e,{start:s,stop:r,step:a,dtype:i}=n,o=$k(s,r,a,i);return t.makeTensorInfo([o.length],i,o)},$A={kernelName:h.Range,backendName:"webgl",kernelFunc:EA},RA=FT({opSnippet:"return 1.0 / x;"}),_A={kernelName:h.Reciprocal,backendName:"webgl",kernelFunc:RA},DA=FT({opSnippet:aT+"\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),FA={kernelName:h.Relu,backendName:"webgl",kernelFunc:DA},OA=FT({opSnippet:aT+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),MA={kernelName:h.Relu6,backendName:"webgl",kernelFunc:OA};class zA{constructor(e,t,n,s,r){this.variableNames=["A"],this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let d;d=r?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${d};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class LA{constructor(e,t,n,s,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let d;d=r?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${d};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const PA={kernelName:h.ResizeBilinear,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s,[l,u]=o,c=(0,h.env)().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new LA(r.shape,l,u,a,i):new zA(r.shape,l,u,a,i);return n.runWebGLProgram(c,[r],"float32")}};class BA{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,r]=t,[,a,i]=e,o=[n&&a>1?s-1:s,n&&i>1?r-1:r],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],d=1/u,h=1/c,p=2*Math.ceil(d)+2,f=2*Math.ceil(h)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${d});\n        const float invWidthScale = float(${h});\n\n        const int winHeight = int(${p});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${s-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${r-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const WA={kernelName:h.ResizeBilinearGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s,o=new BA(a.shape,r.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class VA{constructor(e,t,n,s,r){this.variableNames=["A"],this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n],d=s?"0.5":"0.0";let h;h=r?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${d})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class UA{constructor(e,t,n,s,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n],d=s?"0.5":"0.0";let h;h=r?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${d})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const GA={kernelName:h.ResizeNearestNeighbor,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s,[l,u]=o,c=(0,h.env)().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new UA(r.shape,l,u,a,i):new VA(r.shape,l,u,a,i);return n.runWebGLProgram(c,[r],r.dtype)}};class HA{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,r]=t,[,a,i]=e,o=[n&&a>1?s-1:s,n&&i>1?r-1:r],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],d=1/u,h=1/c,p=2*Math.ceil(d)+2,f=2*Math.ceil(h)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${d});\n        const float invWidthScale = float(${h});\n\n        const int winHeight = int(${p});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${l[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${l[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const jA={kernelName:h.ResizeNearestNeighborGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s,o=new HA(a.shape,r.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class qA{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const s=e.map((n,s)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(s)).join(","),r=bw(n);this.userCode=`\n      void main() {\n        ${r} coords = getOutputCoords();\n        setOutput(getX(${s}));\n      }\n    `}}class YA{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const s=Zk("rc",n),r=`${s[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${s[n-2]} + 1 < ${this.outputShape[n-2]}`,i=bw(n);function o(n){const s=e.map((s,r)=>function(n,s){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${s[n]} - 1`:`${s[n]}`}(r,n));return`getChannel(getX(${s.join(",")}), vec2(${s.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${r}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return o(e)}(s.slice())};\n          if(${r}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",o(e)}(s.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",o(e)}(s.slice())};\n            if(${r}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",o(e)}(s.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const KA={kernelName:h.Reverse,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dims:a}=s,i=r.shape.length,o=h.util.parseAxisParam(a,r.shape);if(0===i)return TT({inputs:{x:r},backend:n});const l=(0,h.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new YA(r.shape,o):new qA(r.shape,o);return n.runWebGLProgram(l,[r],r.dtype)}};class XA{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const n=e[1],s=e[2];this.outputShape=e;let r="";r="number"==typeof t?`float outputValue = ${t.toFixed(2)};`:`\n        vec3 fill = vec3(${t.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${r}\n          if(coordX >= 0 && coordX < ${s} && coordY >= 0 && coordY < ${n}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const ZA={kernelName:h.RotateWithOffset,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:r,fillValue:a,center:i}=t,o=n,l=new XA(s.shape,a),[u,c]=h.backend_util.getImageCenter(i,s.shape[1],s.shape[2]),d=[[u,c,Math.sin(r),Math.cos(r)]];return o.runWebGLProgram(l,[s],s.dtype,d)}},QA=FT({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),JA={kernelName:h.Round,backendName:"webgl",kernelFunc:QA},eE=FT({opSnippet:"return inversesqrt(x);",cpuKernelImpl:Rk}),tE={kernelName:h.Rsqrt,backendName:"webgl",kernelFunc:eE};class nE{constructor(e,t,n,s,r,a,i=!0,o=!1){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const l=bw(r.length),u=bw(a.length);let c="";1===n?c="i":2===n&&(c="i, j");const d=`getIndices(${c})`;let h="";1===s?h="i":2===s&&(h="i, coords[1]");const p=`getUpdates(${h})`;let f="";o&&(f="coords[0], coords[1]");const m=`getDefaultValue(${f})`,g=t>1?"strides[j]":"strides";this.userCode=`\n        ${l} strides = ${l}(${r});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${d});\n              flattenedIndex += index * ${g};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${p};\n              found = true;\n            }\n          }\n          setOutput(mix(${m}, sum, float(found)));\n        }\n      `}}class sE{constructor(e,t,n,s,r,a,i=!0,o=!1){this.variableNames=["updates","indices","defaultValue"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=a;const l=bw(r.length),u=bw(a.length);let c="";1===n?c="i":2===n&&(c="i, j");const d=`getIndices(${c})`;let h="";1===s?h="i":2===s&&(h="i, coords[1]");const p=`getUpdates(${h})`;let f="";o&&(f="coords[0], coords[1]");const m=`getDefaultValue(${f})`,g=t>1?"strides[j]":"strides",y=t>1?"strides[j + 1]":"strides";this.userCode=`\n        ${l} strides = ${l}(${r});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          vec4 sum = vec4(0.);\n          vec4 found = vec4(0.);\n          for (int i = 0; i < ${e}; i+=2) {\n            ivec2 flattenedIndex = ivec2(0);\n            for (int j = 0; j < ${t}; j+=2) {\n              ivec4 index = round(${d});\n              flattenedIndex += index.xz * ${g};\n              if (j + 1 < ${t}) {\n                flattenedIndex += index.yw * ${y};\n              }\n            }\n            if (flattenedIndex[0] == coords[0] || flattenedIndex[1] == coords[0] ||\n                flattenedIndex[0] == coords[0] + 1 || flattenedIndex[1] == coords[0] + 1) {\n              vec4 updVals = ${p};\n              if (flattenedIndex[0] == coords[0]) {\n                sum.xy += updVals.xy;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[0] == coords[0] + 1) {\n                sum.zw += updVals.xy;\n                found.zw = vec2(1.);\n              }\n              if (flattenedIndex[1] == coords[0]) {\n                sum.xy += updVals.zw;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[1] == coords[0] + 1) {\n                sum.zw += updVals.zw;\n                found.zw = vec2(1.);\n              }\n            }\n          }\n          setOutput(mix(${m}, sum, found));\n        }\n      `}}const rE={kernelName:h.ScatterNd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r,updates:a}=t,{shape:i}=s,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:d}=h.backend_util.calculateShapes(a,r,i),p=[d/u,u];if(0===d)return n.makeTensorInfo(i,r.dtype);const f=VT({inputs:{x:r},backend:n,attrs:{shape:[l,o]}}),m=VT({inputs:{x:a},backend:n,attrs:{shape:[l,u]}}),g=n.makeTensorInfo([],"float32",new Float32Array([0]));let y;y=(0,h.env)().getBool("WEBGL_PACK")?new sE(l,o,f.shape.length,m.shape.length,c,p):new nE(l,o,f.shape.length,m.shape.length,c,p);const b=n.runWebGLProgram(y,[m,f,g],m.dtype),x=VT({inputs:{x:b},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(g),x}};class aE{constructor(e,t,n,s){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[e,n];const r=`for (int i = 0; i < ${Math.ceil(Math.log2(t+1))}; ++i) { if (left >= right) break;`,a=2===(0,h.env)().getNumber("WEBGL_VERSION")?"while (left < right) {":r,i="left"===s?"<":"<=";this.userCode=`\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${a}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${i} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `}}const iE={kernelName:h.SearchSorted,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sortedSequence:r,values:a}=t,{side:i}=s,o=new aE(r.shape[0],r.shape[1],a.shape[1],i),l=[[r.shape[1]]];return n.runWebGLProgram(o,[r,a],"int32",l)}};class oE{constructor(e,t,n){let s,r;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)r="resRC",s="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],i=[];for(let s=0;s<t.length;s++)i.push(`${n[s]}`),s<e&&a.push(`${n[s]}`);s=a.join(),r=i.join()}const a=bw(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${s});\n        if (cVal >= 1.0) {\n          setOutput(getA(${r}));\n        } else {\n          setOutput(getB(${r}));\n        }\n      }\n    `}}const lE={kernelName:h.Select,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:r,e:a}=t,i=new oE(s.shape.length,r.shape,r.shape.length);return n.runWebGLProgram(i,[s,r,a],(0,h.upcastType)(r.dtype,a.dtype))}},uE=FT({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${h.backend_util.SELU_SCALEALPHA};\n  float scale = ${h.backend_util.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),cE={kernelName:h.Selu,backendName:"webgl",kernelFunc:uE},dE=FT({opSnippet:DT+"\n  return 1.0 / (1.0 + exp(-1.0 * x));\n",packedOpSnippet:"\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:Dk}),hE={kernelName:h.Sigmoid,backendName:"webgl",kernelFunc:dE},pE=FT({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),fE={kernelName:h.Sign,backendName:"webgl",kernelFunc:pE},mE=FT({opSnippet:DT+"\n  return sin(x);\n",packedOpSnippet:`\n  vec4 result = sin(x);\n  bvec4 isNaN = isnan(x);\n  ${wT}\n  return result;\n`}),gE={kernelName:h.Sin,backendName:"webgl",kernelFunc:mE},yE=FT({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),bE={kernelName:h.Sinh,backendName:"webgl",kernelFunc:yE},xE=FT({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),vE={kernelName:h.Softplus,backendName:"webgl",kernelFunc:xE},wE={kernelName:h.SpaceToBatchND,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,paddings:i}=s;h.util.assert(r.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");const o=a.reduce((e,t)=>e*t),l=[[0,0]];l.push(...i);for(let e=1+a.length;e<r.shape.length;++e)l.push([0,0]);const u=[],c=wA({inputs:{x:r},backend:n,attrs:{paddings:l,constantValue:0}}),d=h.backend_util.getReshaped(c.shape,a,o,!1),p=h.backend_util.getPermuted(d.length,a.length,!1),f=h.backend_util.getReshapedPermuted(c.shape,a,o,!1),m=VT({inputs:{x:c},backend:n,attrs:{shape:d}}),g=QT({inputs:{x:m},backend:n,attrs:{perm:p}}),y=VT({inputs:{x:g},backend:n,attrs:{shape:f}});return u.push(c),u.push(m),u.push(g),u.forEach(e=>n.disposeIntermediateTensorInfo(e)),y}},kE={kernelName:h.SparseFillEmptyRows,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:s,values:r,denseShape:a,defaultValue:i}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${a.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${s.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n         ${r.shape}`);if(0!==i.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${i.shape}`);const o=n.readSync(s.dataId),l=n.readSync(r.dataId),u=n.readSync(a.dataId),c=n.readSync(i.dataId)[0],[d,h,p,f,m]=Mk(o,s.shape,s.dtype,l,r.dtype,u,c);return[n.makeTensorInfo(h,s.dtype,d),n.makeTensorInfo([h[0]],r.dtype,p),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map(e=>Number(e)))),n.makeTensorInfo([m.length],s.dtype,new Int32Array(m))]}},TE={kernelName:h.SparseReshape,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:s,inputShape:r,newShape:a}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape ${s.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape ${r.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const i=Array.from(n.readSync(r.dataId)),o=n.readSync(s.dataId),l=Array.from(n.readSync(a.dataId)),[u,c,d]=zk(o,s.shape,s.dtype,i,l);return[n.makeTensorInfo(c,s.dtype,u),n.makeTensorInfo([d.length],a.dtype,new Int32Array(d))]}},SE={kernelName:h.SparseSegmentMean,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${a.shape}`);const i=n.readSync(s.dataId),o=n.readSync(r.dataId),l=n.readSync(a.dataId),[u,c]=Lk(i,s.shape,s.dtype,o,l,!0);return n.makeTensorInfo(c,s.dtype,u)}},NE={kernelName:h.SparseSegmentSum,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${a.shape}`);const i=n.readSync(s.dataId),o=n.readSync(r.dataId),l=n.readSync(a.dataId),[u,c]=Lk(i,s.shape,s.dtype,o,l);return n.makeTensorInfo(c,s.dtype,u)}},IE={kernelName:h.SparseToDense,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:r,sparseValues:a,defaultValue:i}=t,{outputShape:o}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:d,outputSize:p}=h.backend_util.calculateShapes(a,r,o),f=!1;if("string"===a.dtype){const e=n.bufferSync(r),t=n.bufferSync(a),s=h.util.decodeString(n.readSync(i.dataId)[0]),m=_k(e,t,o,p,c,u,l,d,s,f);return n.makeTensorInfo(o,m.dtype,m.values)}const m=new nE(u,l,r.shape.length,a.shape.length,d,[p,1],f),g=n.runWebGLProgram(m,[a,r,i],a.dtype),y=VT({inputs:{x:g},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(g),y}},CE={kernelName:h.SplitV,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{numOrSizeSplits:a,axis:i}=s,o=h.util.parseAxisParam(i,r.shape)[0],l=h.backend_util.prepareSplitSize(r,a,o),u=r.shape.length,c=new Array(u).fill(0),d=r.shape.slice();return l.map(e=>{const t=[...d];t[o]=e;const s=YS({inputs:{x:r},backend:n,attrs:{begin:c,size:t}});return c[o]+=e,s})}},AE="return sqrt(x);",EE=FT({opSnippet:AE,packedOpSnippet:AE,cpuKernelImpl:Pk}),$E={kernelName:h.Sqrt,backendName:"webgl",kernelFunc:EE},RE=FT({opSnippet:"return x * x;"}),_E={kernelName:h.Square,backendName:"webgl",kernelFunc:RE},DE="return (a - b) * (a - b);",FE=OT({opSnippet:DE,packedOpSnippet:DE}),OE={kernelName:h.SquaredDifference,backendName:"webgl",kernelFunc:FE},ME={kernelName:h.StaticRegexReplace,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;if("string"!==r.dtype)throw new Error("Input must be of datatype string");const a=n.readSync(r.dataId),i=h.backend_util.fromUint8ToStringArray(a),o=Bk(i,"string",s);return n.makeTensorInfo(r.shape,"string",o)}},zE={kernelName:h.Step,backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:s}=e,r=aT+`\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `,a=new rT(s.shape,r);return n.runWebGLProgram(a,[s],s.dtype)}};class LE{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const s=n.length,r=bw(n.length),a=bw(n.length);let i="";if(1===s)i="coords * strides + begin";else{let e=0;i=n.map((t,s)=>(e++,1===n.length?`coords * strides[${s}] + begin[${s}]`:`coords[${e-1}] * strides[${s}] + begin[${s}]`)).join(",")}this.userCode=`\n      ${r} begin = ${r}(${e});\n      ${r} strides = ${r}(${t});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}const PE={kernelName:h.StridedSlice,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,end:i,strides:o,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:d,shrinkAxisMask:p}=s,{finalShapeSparse:f,finalShape:m,isIdentity:g,sliceDim0:y,isSimpleSlice:b,begin:x,end:v,strides:w}=h.slice_util.sliceInfo(r.shape,a,i,o,l,u,c,d,p);let k;if(g)k=VT({inputs:{x:r},backend:n,attrs:{shape:m}});else if(y||b){h.util.assert(r.shape.length>=1,()=>`Input must have rank at least 1, got: ${r.shape.length}`);const e=h.slice_util.computeOutShape(x,v,w),t=YS({inputs:{x:r},backend:n,attrs:{begin:x,size:e}});k=VT({inputs:{x:t},backend:n,attrs:{shape:m}}),n.disposeIntermediateTensorInfo(t)}else if(n.shouldExecuteOnCPU([r])){const e=n.readSync(r.dataId),t=(0,h.buffer)(r.shape,r.dtype,e),s=Wk(f,t,w,x);k=n.makeTensorInfo(m,r.dtype,s.values)}else{const e=new LE(x,w,f);k=n.runWebGLProgram(e,[r],r.dtype)}const T=VT({inputs:{x:k},backend:n,attrs:{shape:m}});return n.disposeIntermediateTensorInfo(k),T}},BE={kernelName:h.StringNGrams,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{separator:r,nGramWidths:a,leftPad:i,rightPad:o,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:d}=t,h=n.readSync(c.dataId),p=n.readSync(d.dataId),[f,m]=Vk(h,p,r,a,i,o,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(d.shape,"int32",m)]}},WE={kernelName:h.StringSplit,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{skipEmpty:r}=s,{input:a,delimiter:i}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==i.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);const o=n.readSync(a.dataId),l=n.readSync(i.dataId)[0],[u,c,d]=Uk(o,l,r),h=c.length;return[n.makeTensorInfo([h,2],"int32",u),n.makeTensorInfo([h],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(d))]}},VE={kernelName:h.StringToHashBucketFast,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{numBuckets:r}=s,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const i=n.readSync(a.dataId),o=Gk(i,r);return n.makeTensorInfo(a.shape,"int32",o)}},UE=FT({opSnippet:"return tan(x);"}),GE={kernelName:h.Tan,backendName:"webgl",kernelFunc:UE},HE=FT({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),jE={kernelName:h.Tanh,backendName:"webgl",kernelFunc:HE},qE={kernelName:h.TensorScatterUpdate,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{tensor:r,indices:a,updates:i}=t,{}=s,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:d}=h.backend_util.calculateShapes(i,a,r.shape),p=[d/u,u];if(0===d)return n.makeTensorInfo(r.shape,a.dtype);const f=VT({inputs:{x:a},backend:n,attrs:{shape:[l,o]}}),m=VT({inputs:{x:i},backend:n,attrs:{shape:[l,u]}}),g=VT({inputs:{x:r},backend:n,attrs:{shape:p}}),y=new nE(l,o,f.shape.length,m.shape.length,c,p,!1,!0),b=n.runWebGLProgram(y,[m,f,g],g.dtype),x=VT({inputs:{x:b},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(b),x}};class YE{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[s]*t[s];this.outputShape=n,this.rank=n.length;const s=bw(this.rank),r=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],s=[];for(let t=0;t<e.length;t++)s.push(`imod(${n[t]}, ${e[t]})`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        setOutput(getA(${r}));\n      }\n    `}}function KE(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reps:a}=s;if("string"===r.dtype||r.shape.length>5){const e=n.readSync(r.dataId),t="string"===r.dtype?e.map(e=>h.util.decodeString(e)):e,s=(0,h.buffer)(r.shape,r.dtype,t),i=jk(s,a);return n.makeTensorInfo(i.shape,i.dtype,i.values)}const i=new YE(r.shape,a);return n.runWebGLProgram(i,[r],r.dtype)}const XE={kernelName:h.Tile,backendName:"webgl",kernelFunc:KE};class ZE{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class QE{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function JE(e,t){null!==t&&e.disposeIntermediateTensorInfo(t)}function e$(e){let t=1;for(;t<e;)t*=2;return t}const t$={kernelName:h.TopK,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{k:a,sorted:i}=s,o=(0,h.env)().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=(0,h.env)().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),u=r.shape,c=u[u.length-1];if(n.shouldExecuteOnCPU([r])||c<o||a>l){const e=n.readSync(r.dataId),[t,s]=qk(e,u,r.dtype,a,i);return[n.makeTensorInfo(t.shape,t.dtype,t.values),n.makeTensorInfo(s.shape,s.dtype,s.values)]}if(0===a)return u[u.length-1]=0,[n.makeTensorInfo(u,r.dtype,[]),n.makeTensorInfo(u,"int32",[])];if(1===c)return[r,_I({attrs:{shape:u,dtype:"int32",value:0},backend:n})];const d=n.texData.get(r.dataId),p=null!==d&&d.isPacked,f=p?n.unpackTensor(r):r,m=h.util.sizeFromShape(u)/c,g=VT({inputs:{x:f},attrs:{shape:[m,c]},backend:n});p&&JE(n,f);const y=e$(a),b=e$(c);let x=null;const v=()=>null===x?[g,g]:[g,x],w=(e,t,s)=>{const r=v(),a=new ZE(s),i=[[c],[null===x?1:0],[Number.NEGATIVE_INFINITY],[e],[t]],o=x;x=n.runWebGLProgram(a,r,"int32",i),JE(n,o)};for(let e=1;e<y;e*=2){const t=2*e;for(let n=e;n>=1;n/=2)w(t,n,[m,b])}for(let e=b;e>y;e/=2){const t=v(),s=new QE([m,e/2]),r=[[c],[null===x?1:0],[y]],a=x;x=n.runWebGLProgram(s,t,"int32",r),JE(n,a);const i=y/2,o=2*i;for(let e=i;e>=1;e/=2)w(o,e,x.shape)}let k=x;x=YS({inputs:{x},backend:n,attrs:{begin:0,size:[m,a]}}),JE(n,k);let T=ZI({inputs:{x:g,indices:x},backend:n,attrs:{axis:1,batchDims:1}});JE(n,g);const S=u.slice(0,-1);S.push(a),k=x,x=VT({inputs:{x},attrs:{shape:S},backend:n}),JE(n,k);const N=T;return T=VT({inputs:{x:T},attrs:{shape:S},backend:n}),JE(n,N),[T,x]}};class n${constructor(e,t,n,s,r,a){this.variableNames=["Image","Transforms"],this.outputShape=a;const i="nearest"===n?1:2;let o;switch(s){case"constant":default:o=1;break;case"reflect":o=2;break;case"wrap":o=3;break;case"nearest":o=4}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${o} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${r});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${r});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${t}));\n                float mapY = mapCoord(inY, float(${e}));\n\n                if (${i} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const s$={kernelName:h.Transform,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:r,transforms:a}=t,{interpolation:i,fillMode:o,fillValue:l,outputShape:u}=s,[c,d,h,p]=r.shape,[f,m]=null!=u?u:[d,h],g=new n$(d,h,i,o,l,[c,f,m,p]);return n.runWebGLProgram(g,[r,a],"float32")}},r$={kernelName:h.Unique,backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:r}=n,{x:a}=t;tw(a,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const i=s.readSync(a.dataId),{outputValues:o,outputShape:l,indices:u}=Kk(i,r,a.shape,a.dtype);return[s.makeTensorInfo(l,a.dtype,o),s.makeTensorInfo([u.length],"int32",u)]}},a$={kernelName:h.Unpack,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:r}=t;let{axis:a}=s;a<0&&(a+=r.shape.length);const i=r,o=i.shape.length,l=r.shape[a],u=new Array(o-1);let c=0;for(let e=0;e<o;e++)e!==a&&(u[c++]=i.shape[e]);const d=[],h=new Array(o).fill(0),p=i.shape.slice();p[a]=1;const f=new Array(l);for(let e=0;e<f.length;e++){h[a]=e;const t=YS({inputs:{x:i},backend:n,attrs:{begin:h,size:p}}),s=VT({inputs:{x:t},backend:n,attrs:{shape:u}});f[e]=s,d.push(t)}return d.forEach(e=>n.disposeIntermediateTensorInfo(e)),f}};class i${constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,s=e.batchSize,r=e.inSize,a=e.numSegments,i=a*Math.ceil(r/n);this.outputShape=[s,i];const o=4*Math.floor(n/4),l=n%4,u="\n        sumValue += dot(values, segFilter);\n    ";let c="";r%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `);let d="";r%n>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${d}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}const o$=[tS,sS,aS,oS,cS,pS,fS,mS,wS,kS,SS,IS,AS,$S,_S,OS,MS,PS,BS,WS,GS,XS,ZS,QS,JS,rN,oN,cN,IT,pN,wN,EN,FN,MN,zN,LN,PN,WN,UN,HN,ZN,QN,JN,tI,rI,oI,lI,cI,hI,pI,mI,gI,bI,vI,kI,SI,CI,$I,DI,OI,LI,BI,UI,jI,qI,KI,QI,eC,nC,ST,sC,bN,aC,oC,uC,ET,dC,pC,fC,gC,bC,vC,kC,SC,CC,EC,RC,DC,FC,OC,LC,PC,BC,WC,VC,GC,qC,KC,rA,WT,iA,lA,cA,hA,tN,fA,yA,bA,kA,SA,_T,NA,IA,CA,AA,$A,sN,QC,_A,FA,MA,UT,PA,WA,GA,jA,KA,ZA,JA,tE,rE,iE,lE,cE,hE,fE,gE,bE,KS,sA,vE,wE,kE,TE,SE,NE,IE,CE,$E,_E,OE,ME,zE,PE,BE,WE,VE,tA,ZT,GE,jE,qE,XE,t$,s$,JT,r$,a$,{kernelName:h.UnsortedSegmentSum,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,segmentIds:a}=t,{numSegments:i}=s,o=r.shape.length,l=[];let u=0;const c=h.backend_util.getAxesPermutation([u],o);let d=r;null!=c&&(d=QT({inputs:{x:r},backend:n,attrs:{perm:c}}),l.push(d),u=h.backend_util.getInnerMostAxes(1,o)[0]);const p=h.backend_util.segment_util.computeOutShape(d.shape,u,i),f=h.util.sizeFromShape([d.shape[u]]),m=VT({inputs:{x:d},backend:n,attrs:{shape:[-1,f]}});l.push(m);const g=(0,h.sumOutType)(r.dtype),y=(e,t,s,r,a)=>{const i=e.shape[0],o=e.shape[1],u=h.backend_util.segment_util.segOpComputeOptimalWindowSize(o,a),c=new i$({windowSize:u,inSize:o,batchSize:i,numSegments:a},t),d=n.compileAndRun(c,[e,s],r);if(l.push(d),d.shape[1]===a)return d;const p=EA({backend:n,attrs:{start:0,stop:a,step:1,dtype:"float32"}}),f=KE({inputs:{x:p},backend:n,attrs:{reps:[o/u]}});return l.push(p),l.push(f),y(d,t,f,r,a)},b=VT({inputs:{x:y(m,"unsortedSegmentSum",a,g,i)},backend:n,attrs:{shape:p}});let x=b;if(null!=c){l.push(b);const e=h.backend_util.getUndoAxesPermutation(c);x=QT({inputs:{x},backend:n,attrs:{perm:e}})}return l.forEach(e=>n.disposeIntermediateTensorInfo(e)),x}},gA];for(const e of o$)(0,h.registerKernel)(e);const l$={"tfjs-core":h.version_core,"tfjs-backend-cpu":Bm,"tfjs-backend-webgl":gT,"tfjs-data":dp,"tfjs-layers":To,"tfjs-converter":rh.version_converter,tfjs:"4.22.0"};var u$=n(234),c$=n.n(u$);function d$(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,s=Array(t);n<t;n++)s[n]=e[n];return s}function h$(e){return h$="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},h$(e)}function p$(){var e,t,n="function"==typeof Symbol?Symbol:{},s=n.iterator||"@@iterator",r=n.toStringTag||"@@toStringTag";function a(n,s,r,a){var l=s&&s.prototype instanceof o?s:o,u=Object.create(l.prototype);return f$(u,"_invoke",function(n,s,r){var a,o,l,u=0,c=r||[],d=!1,h={p:0,n:0,v:e,a:p,f:p.bind(e,4),d:function(t,n){return a=t,o=0,l=e,h.n=n,i}};function p(n,s){for(o=n,l=s,t=0;!d&&u&&!r&&t<c.length;t++){var r,a=c[t],p=h.p,f=a[2];n>3?(r=f===s)&&(l=a[(o=a[4])?5:(o=3,3)],a[4]=a[5]=e):a[0]<=p&&((r=n<2&&p<a[1])?(o=0,h.v=s,h.n=a[1]):p<f&&(r=n<3||a[0]>s||s>f)&&(a[4]=n,a[5]=s,h.n=f,o=0))}if(r||n>1)return i;throw d=!0,s}return function(r,c,f){if(u>1)throw TypeError("Generator is already running");for(d&&1===c&&p(c,f),o=c,l=f;(t=o<2?e:l)||!d;){a||(o?o<3?(o>1&&(h.n=-1),p(o,l)):h.n=l:h.v=l);try{if(u=2,a){if(o||(r="next"),t=a[r]){if(!(t=t.call(a,l)))throw TypeError("iterator result is not an object");if(!t.done)return t;l=t.value,o<2&&(o=0)}else 1===o&&(t=a.return)&&t.call(a),o<2&&(l=TypeError("The iterator does not provide a '"+r+"' method"),o=1);a=e}else if((t=(d=h.n<0)?l:n.call(s,h))!==i)break}catch(t){a=e,o=1,l=t}finally{u=1}}return{value:t,done:d}}}(n,r,a),!0),u}var i={};function o(){}function l(){}function u(){}t=Object.getPrototypeOf;var c=[][s]?t(t([][s]())):(f$(t={},s,function(){return this}),t),d=u.prototype=o.prototype=Object.create(c);function h(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,u):(e.__proto__=u,f$(e,r,"GeneratorFunction")),e.prototype=Object.create(d),e}return l.prototype=u,f$(d,"constructor",u),f$(u,"constructor",l),l.displayName="GeneratorFunction",f$(u,r,"GeneratorFunction"),f$(d),f$(d,r,"Generator"),f$(d,s,function(){return this}),f$(d,"toString",function(){return"[object Generator]"}),(p$=function(){return{w:a,m:h}})()}function f$(e,t,n,s){var r=Object.defineProperty;try{r({},"",{})}catch(e){r=0}f$=function(e,t,n,s){function a(t,n){f$(e,t,function(e){return this._invoke(t,n,e)})}t?r?r(e,t,{value:n,enumerable:!s,configurable:!s,writable:!s}):e[t]=n:(a("next",0),a("throw",1),a("return",2))},f$(e,t,n,s)}function m$(e,t,n,s,r,a,i){try{var o=e[a](i),l=o.value}catch(e){return void n(e)}o.done?t(l):Promise.resolve(l).then(s,r)}function g$(e){return function(){var t=this,n=arguments;return new Promise(function(s,r){var a=e.apply(t,n);function i(e){m$(a,s,r,i,o,"next",e)}function o(e){m$(a,s,r,i,o,"throw",e)}i(void 0)})}}var y$,b$,x$,v$=function(){var e=g$(p$().m(function e(t){var n,s;return p$().w(function(e){for(;;)switch(e.n){case 0:if("bootstrap"==(null===(n=(s=t).data)||void 0===n?void 0:n.status)){e.n=1;break}return self.postMessage({status:"failed"}),e.a(2);case 1:if((b$=s.data).tm){e.n=3;break}return e.n=2,c$().load();case 2:y$=e.v,e.n=5;break;case 3:return e.n=4,Go({load:function(){var e=g$(p$().m(function e(t){return p$().w(function(e){for(;;)if(0===e.n)return e.a(2,b$.tm)},e)}));return function(t){return e.apply(this,arguments)}}()});case 4:(y$=e.v).detect=function(e){return h.tidy(function(){var t=_calculateFeaturesOnCurrentFrame(e),n=y$.predict(t.expandDims()).squeeze();n.argMax().arraySync(),n.arraySync()}),[]};case 5:y$&&(b$.status="initialised",x$=new OffscreenCanvas(b$.width,b$.height).getContext("2d",{willReadFrequently:!0}),self.onmessage=w$,self.postMessage(b$));case 6:return e.a(2)}},e)}));return function(t){return e.apply(this,arguments)}}(),w$=function(e){var t,n;if(e.data instanceof ImageData){var s=e.data;requestAnimationFrame(function(){var e=g$(p$().m(function e(t){var n,r,a,i;return p$().w(function(e){for(;;)switch(e.p=e.n){case 0:return e.p=0,e.n=1,k$(s);case 1:n=e.v,r=n.processedImageData,a=n.predictions,self.postMessage([r,a,b$]),e.n=3;break;case 2:e.p=2,i=e.v,self.postMessage(i);case 3:return e.a(2)}},e,null,[[0,2]])}));return function(t){return e.apply(this,arguments)}}())}else{if("object"===h$(e.data)){if(e.data.status)switch(e.data.status){case"config":b$=e.data;break;case"dispose":b$={bound:null,width:0,height:0,ODData:!1,renderOD:!1,renderFrame:!1,landscape:!1,status:""},null===(t=y$)||void 0===t||t.dispose(),null===(n=d)||void 0===n||n.dispose(),d=null,y$=null;break;default:e.data.status.split("|").forEach(function(t){switch(t){case"width":case"height":x$.canvas[t]=e.data[t];break;case"bound":e.data[t]}b$[t]=e.data[t]})}e.data.status="acknowledged"}self.postMessage(e.data)}},k$=function(){var e=g$(p$().m(function e(t){var n,s,r,a,i;return p$().w(function(e){for(;;)switch(e.n){case 0:if(n=t,r=[],!b$.renderOD){e.n=2;break}return x$.putImageData(n,0,0),e.n=1,null===(a=y$)||void 0===a?void 0:a.detect(n);case 1:(r=e.v)&&r.forEach(function(e){var t,n;x$.beginPath(),(t=x$).rect.apply(t,function(e){if(Array.isArray(e))return d$(e)}(n=e.bbox)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||function(e,t){if(e){if("string"==typeof e)return d$(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?d$(e,t):void 0}}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),x$.lineWidth=1,x$.strokeStyle="lime",x$.fillStyle="lime",x$.stroke(),x$.fillText("".concat(e.class,": ").concat(Math.round(100*e.score),"%"),e.bbox[0],e.bbox[1]>10?e.bbox[1]-5:10)}),s=x$.getImageData(0,0,x$.canvas.width,x$.canvas.height),e.n=5;break;case 2:if(b$.renderFrame&&(s=n),!b$.ODData){e.n=4;break}return e.n=3,null===(i=y$)||void 0===i?void 0:i.detect(n);case 3:r=e.v;case 4:b$.bound;case 5:return e.a(2,{processedImageData:s,predictions:r})}},e)}));return function(t){return e.apply(this,arguments)}}();self.onmessage=v$})()})();